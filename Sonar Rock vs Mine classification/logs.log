2024-01-09 10:49:10,519:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-09 10:49:10,519:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-09 10:49:10,519:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-09 10:49:10,519:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-09 10:50:04,135:INFO:PyCaret ClassificationExperiment
2024-01-09 10:50:04,135:INFO:Logging name: clf-default-name
2024-01-09 10:50:04,135:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-01-09 10:50:04,135:INFO:version 3.2.0
2024-01-09 10:50:04,135:INFO:Initializing setup()
2024-01-09 10:50:04,135:INFO:self.USI: c2b0
2024-01-09 10:50:04,135:INFO:self._variable_keys: {'n_jobs_param', 'logging_param', '_available_plots', 'target_param', 'seed', 'y', 'fold_shuffle_param', 'fix_imbalance', 'pipeline', 'is_multiclass', 'log_plots_param', 'exp_name_log', 'memory', 'USI', 'html_param', 'X', 'idx', 'data', 'fold_groups_param', '_ml_usecase', 'fold_generator', 'gpu_n_jobs_param', 'exp_id', 'y_test', 'y_train', 'X_test', 'X_train', 'gpu_param'}
2024-01-09 10:50:04,135:INFO:Checking environment
2024-01-09 10:50:04,135:INFO:python_version: 3.11.5
2024-01-09 10:50:04,135:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-01-09 10:50:04,135:INFO:machine: AMD64
2024-01-09 10:50:04,135:INFO:platform: Windows-10-10.0.19045-SP0
2024-01-09 10:50:04,135:INFO:Memory: svmem(total=8464732160, available=4614770688, percent=45.5, used=3849961472, free=4614770688)
2024-01-09 10:50:04,135:INFO:Physical Core: 2
2024-01-09 10:50:04,135:INFO:Logical Core: 4
2024-01-09 10:50:04,135:INFO:Checking libraries
2024-01-09 10:50:04,135:INFO:System:
2024-01-09 10:50:04,135:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-01-09 10:50:04,135:INFO:executable: C:\Users\HP\anaconda3\python.exe
2024-01-09 10:50:04,135:INFO:   machine: Windows-10-10.0.19045-SP0
2024-01-09 10:50:04,135:INFO:PyCaret required dependencies:
2024-01-09 10:50:06,346:INFO:                 pip: 23.2.1
2024-01-09 10:50:06,346:INFO:          setuptools: 68.0.0
2024-01-09 10:50:06,346:INFO:             pycaret: 3.2.0
2024-01-09 10:50:06,346:INFO:             IPython: 8.15.0
2024-01-09 10:50:06,346:INFO:          ipywidgets: 8.0.4
2024-01-09 10:50:06,346:INFO:                tqdm: 4.65.0
2024-01-09 10:50:06,346:INFO:               numpy: 1.24.3
2024-01-09 10:50:06,346:INFO:              pandas: 1.5.3
2024-01-09 10:50:06,346:INFO:              jinja2: 3.1.2
2024-01-09 10:50:06,346:INFO:               scipy: 1.11.1
2024-01-09 10:50:06,346:INFO:              joblib: 1.1.1
2024-01-09 10:50:06,346:INFO:             sklearn: 1.2.2
2024-01-09 10:50:06,346:INFO:                pyod: 1.1.2
2024-01-09 10:50:06,346:INFO:            imblearn: 0.11.0
2024-01-09 10:50:06,346:INFO:   category_encoders: 2.6.3
2024-01-09 10:50:06,346:INFO:            lightgbm: 4.2.0
2024-01-09 10:50:06,346:INFO:               numba: 0.57.1
2024-01-09 10:50:06,346:INFO:            requests: 2.31.0
2024-01-09 10:50:06,346:INFO:          matplotlib: 3.6.0
2024-01-09 10:50:06,346:INFO:          scikitplot: 0.3.7
2024-01-09 10:50:06,346:INFO:         yellowbrick: 1.5
2024-01-09 10:50:06,346:INFO:              plotly: 5.9.0
2024-01-09 10:50:06,346:INFO:    plotly-resampler: Not installed
2024-01-09 10:50:06,346:INFO:             kaleido: 0.2.1
2024-01-09 10:50:06,346:INFO:           schemdraw: 0.15
2024-01-09 10:50:06,346:INFO:         statsmodels: 0.14.0
2024-01-09 10:50:06,346:INFO:              sktime: 0.21.1
2024-01-09 10:50:06,346:INFO:               tbats: 1.1.3
2024-01-09 10:50:06,346:INFO:            pmdarima: 2.0.4
2024-01-09 10:50:06,346:INFO:              psutil: 5.9.0
2024-01-09 10:50:06,346:INFO:          markupsafe: 2.1.1
2024-01-09 10:50:06,346:INFO:             pickle5: Not installed
2024-01-09 10:50:06,346:INFO:         cloudpickle: 2.2.1
2024-01-09 10:50:06,346:INFO:         deprecation: 2.1.0
2024-01-09 10:50:06,346:INFO:              xxhash: 2.0.2
2024-01-09 10:50:06,346:INFO:           wurlitzer: Not installed
2024-01-09 10:50:06,346:INFO:PyCaret optional dependencies:
2024-01-09 10:50:12,534:INFO:                shap: 0.44.0
2024-01-09 10:50:12,534:INFO:           interpret: 0.5.0
2024-01-09 10:50:12,534:INFO:                umap: 0.5.5
2024-01-09 10:50:12,534:INFO:     ydata_profiling: 4.6.0
2024-01-09 10:50:12,534:INFO:  explainerdashboard: 0.4.5
2024-01-09 10:50:12,534:INFO:             autoviz: Not installed
2024-01-09 10:50:12,534:INFO:           fairlearn: 0.7.0
2024-01-09 10:50:12,534:INFO:          deepchecks: Not installed
2024-01-09 10:50:12,534:INFO:             xgboost: 2.0.3
2024-01-09 10:50:12,534:INFO:            catboost: 1.2.2
2024-01-09 10:50:12,534:INFO:              kmodes: 0.12.2
2024-01-09 10:50:12,534:INFO:             mlxtend: 0.23.0
2024-01-09 10:50:12,534:INFO:       statsforecast: 1.5.0
2024-01-09 10:50:12,534:INFO:        tune_sklearn: Not installed
2024-01-09 10:50:12,534:INFO:                 ray: Not installed
2024-01-09 10:50:12,534:INFO:            hyperopt: 0.2.7
2024-01-09 10:50:12,534:INFO:              optuna: 3.5.0
2024-01-09 10:50:12,534:INFO:               skopt: 0.9.0
2024-01-09 10:50:12,534:INFO:              mlflow: 1.30.1
2024-01-09 10:50:12,534:INFO:              gradio: 3.50.2
2024-01-09 10:50:12,534:INFO:             fastapi: 0.108.0
2024-01-09 10:50:12,534:INFO:             uvicorn: 0.25.0
2024-01-09 10:50:12,534:INFO:              m2cgen: 0.10.0
2024-01-09 10:50:12,534:INFO:           evidently: 0.2.8
2024-01-09 10:50:12,534:INFO:               fugue: 0.8.6
2024-01-09 10:50:12,534:INFO:           streamlit: Not installed
2024-01-09 10:50:12,534:INFO:             prophet: Not installed
2024-01-09 10:50:12,534:INFO:None
2024-01-09 10:50:12,534:INFO:Set up data.
2024-01-09 10:50:12,573:INFO:Set up folding strategy.
2024-01-09 10:50:12,573:INFO:Set up train/test split.
2024-01-09 10:50:12,586:INFO:Set up index.
2024-01-09 10:50:12,586:INFO:Assigning column types.
2024-01-09 10:50:12,596:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-01-09 10:50:12,694:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-09 10:50:12,707:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 10:50:12,790:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 10:50:12,790:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 10:50:13,398:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-09 10:50:13,398:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 10:50:13,587:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 10:50:13,603:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 10:50:13,618:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-01-09 10:50:13,760:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 10:50:13,822:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 10:50:13,822:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 10:50:14,058:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 10:50:14,215:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 10:50:14,231:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 10:50:14,231:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-01-09 10:50:14,477:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 10:50:14,493:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 10:50:14,651:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 10:50:14,666:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 10:50:14,675:INFO:Preparing preprocessing pipeline...
2024-01-09 10:50:14,675:INFO:Set up label encoding.
2024-01-09 10:50:14,675:INFO:Set up simple imputation.
2024-01-09 10:50:14,747:INFO:Finished creating preprocessing pipeline.
2024-01-09 10:50:14,763:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\HP\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21', '22...
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False)
2024-01-09 10:50:14,763:INFO:Creating final display dataframe.
2024-01-09 10:50:14,952:INFO:Setup _display_container:                     Description             Value
0                    Session id              3642
1                        Target                60
2                   Target type            Binary
3                Target mapping        M: 0, R: 1
4           Original data shape         (208, 61)
5        Transformed data shape         (208, 61)
6   Transformed train set shape         (145, 61)
7    Transformed test set shape          (63, 61)
8              Numeric features                60
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              c2b0
2024-01-09 10:50:15,154:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 10:50:15,154:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 10:50:15,332:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 10:50:15,332:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 10:50:15,349:INFO:setup() successfully completed in 11.28s...............
2024-01-09 10:50:33,029:INFO:Initializing compare_models()
2024-01-09 10:50:33,030:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-01-09 10:50:33,031:INFO:Checking exceptions
2024-01-09 10:50:33,034:INFO:Preparing display monitor
2024-01-09 10:50:33,103:INFO:Initializing Logistic Regression
2024-01-09 10:50:33,103:INFO:Total runtime is 1.6399224599202474e-05 minutes
2024-01-09 10:50:33,108:INFO:SubProcess create_model() called ==================================
2024-01-09 10:50:33,108:INFO:Initializing create_model()
2024-01-09 10:50:33,108:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:50:33,112:INFO:Checking exceptions
2024-01-09 10:50:33,112:INFO:Importing libraries
2024-01-09 10:50:33,112:INFO:Copying training dataset
2024-01-09 10:50:33,120:INFO:Defining folds
2024-01-09 10:50:33,121:INFO:Declaring metric variables
2024-01-09 10:50:33,125:INFO:Importing untrained model
2024-01-09 10:50:33,136:INFO:Logistic Regression Imported successfully
2024-01-09 10:50:33,150:INFO:Starting cross validation
2024-01-09 10:50:33,152:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:50:43,881:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:43,889:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:43,889:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:43,897:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:43,897:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:43,897:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:43,897:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:43,897:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:43,913:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:43,956:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:43,956:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:43,973:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,130:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,130:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,150:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,153:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,154:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,156:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,156:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,156:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,156:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,217:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,219:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,232:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,242:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,251:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,251:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,251:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,251:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:44,268:INFO:Calculating mean and std
2024-01-09 10:50:44,268:INFO:Creating metrics dataframe
2024-01-09 10:50:44,284:INFO:Uploading results into container
2024-01-09 10:50:44,284:INFO:Uploading model into container now
2024-01-09 10:50:44,284:INFO:_master_model_container: 1
2024-01-09 10:50:44,284:INFO:_display_container: 2
2024-01-09 10:50:44,284:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3642, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-01-09 10:50:44,284:INFO:create_model() successfully completed......................................
2024-01-09 10:50:44,752:INFO:SubProcess create_model() end ==================================
2024-01-09 10:50:44,752:INFO:Creating metrics dataframe
2024-01-09 10:50:44,783:INFO:Initializing K Neighbors Classifier
2024-01-09 10:50:44,783:INFO:Total runtime is 0.19468495448430378 minutes
2024-01-09 10:50:44,786:INFO:SubProcess create_model() called ==================================
2024-01-09 10:50:44,786:INFO:Initializing create_model()
2024-01-09 10:50:44,791:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:50:44,791:INFO:Checking exceptions
2024-01-09 10:50:44,792:INFO:Importing libraries
2024-01-09 10:50:44,792:INFO:Copying training dataset
2024-01-09 10:50:44,794:INFO:Defining folds
2024-01-09 10:50:44,794:INFO:Declaring metric variables
2024-01-09 10:50:44,804:INFO:Importing untrained model
2024-01-09 10:50:44,812:INFO:K Neighbors Classifier Imported successfully
2024-01-09 10:50:44,830:INFO:Starting cross validation
2024-01-09 10:50:44,833:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:50:45,649:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:45,649:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:45,649:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:45,649:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:45,649:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:45,665:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:45,665:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:45,665:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:45,665:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:45,665:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:45,680:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:45,680:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,263:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,263:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,278:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,278:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,278:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,278:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,278:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,294:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,294:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,294:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,294:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,310:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,803:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,803:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,803:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,822:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,822:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:46,838:INFO:Calculating mean and std
2024-01-09 10:50:46,838:INFO:Creating metrics dataframe
2024-01-09 10:50:46,838:INFO:Uploading results into container
2024-01-09 10:50:46,854:INFO:Uploading model into container now
2024-01-09 10:50:46,855:INFO:_master_model_container: 2
2024-01-09 10:50:46,855:INFO:_display_container: 2
2024-01-09 10:50:46,856:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-01-09 10:50:46,857:INFO:create_model() successfully completed......................................
2024-01-09 10:50:47,320:INFO:SubProcess create_model() end ==================================
2024-01-09 10:50:47,320:INFO:Creating metrics dataframe
2024-01-09 10:50:47,336:INFO:Initializing Naive Bayes
2024-01-09 10:50:47,336:INFO:Total runtime is 0.237229319413503 minutes
2024-01-09 10:50:47,353:INFO:SubProcess create_model() called ==================================
2024-01-09 10:50:47,353:INFO:Initializing create_model()
2024-01-09 10:50:47,353:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:50:47,353:INFO:Checking exceptions
2024-01-09 10:50:47,353:INFO:Importing libraries
2024-01-09 10:50:47,353:INFO:Copying training dataset
2024-01-09 10:50:47,360:INFO:Defining folds
2024-01-09 10:50:47,360:INFO:Declaring metric variables
2024-01-09 10:50:47,372:INFO:Importing untrained model
2024-01-09 10:50:47,378:INFO:Naive Bayes Imported successfully
2024-01-09 10:50:47,395:INFO:Starting cross validation
2024-01-09 10:50:47,400:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:50:47,485:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,485:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,501:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,502:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,502:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,502:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,502:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,502:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,517:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,517:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,517:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,534:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,596:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,612:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,612:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,612:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,612:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,612:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,612:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,628:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,628:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,689:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,705:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,705:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,705:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,705:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,705:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:47,722:INFO:Calculating mean and std
2024-01-09 10:50:47,722:INFO:Creating metrics dataframe
2024-01-09 10:50:47,738:INFO:Uploading results into container
2024-01-09 10:50:47,739:INFO:Uploading model into container now
2024-01-09 10:50:47,739:INFO:_master_model_container: 3
2024-01-09 10:50:47,739:INFO:_display_container: 2
2024-01-09 10:50:47,739:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-01-09 10:50:47,739:INFO:create_model() successfully completed......................................
2024-01-09 10:50:48,204:INFO:SubProcess create_model() end ==================================
2024-01-09 10:50:48,204:INFO:Creating metrics dataframe
2024-01-09 10:50:48,219:INFO:Initializing Decision Tree Classifier
2024-01-09 10:50:48,219:INFO:Total runtime is 0.2519531567891439 minutes
2024-01-09 10:50:48,236:INFO:SubProcess create_model() called ==================================
2024-01-09 10:50:48,236:INFO:Initializing create_model()
2024-01-09 10:50:48,236:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:50:48,237:INFO:Checking exceptions
2024-01-09 10:50:48,237:INFO:Importing libraries
2024-01-09 10:50:48,237:INFO:Copying training dataset
2024-01-09 10:50:48,246:INFO:Defining folds
2024-01-09 10:50:48,246:INFO:Declaring metric variables
2024-01-09 10:50:48,255:INFO:Importing untrained model
2024-01-09 10:50:48,264:INFO:Decision Tree Classifier Imported successfully
2024-01-09 10:50:48,284:INFO:Starting cross validation
2024-01-09 10:50:48,287:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:50:48,376:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,391:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,391:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,391:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,391:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,391:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,391:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,407:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,407:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,407:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,407:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,423:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,501:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,509:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,509:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,509:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,518:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,518:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,519:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,519:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,519:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,527:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,535:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,535:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,597:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,597:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,597:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,597:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,597:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,613:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:48,613:INFO:Calculating mean and std
2024-01-09 10:50:48,629:INFO:Creating metrics dataframe
2024-01-09 10:50:48,629:INFO:Uploading results into container
2024-01-09 10:50:48,629:INFO:Uploading model into container now
2024-01-09 10:50:48,640:INFO:_master_model_container: 4
2024-01-09 10:50:48,640:INFO:_display_container: 2
2024-01-09 10:50:48,641:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3642, splitter='best')
2024-01-09 10:50:48,641:INFO:create_model() successfully completed......................................
2024-01-09 10:50:49,098:INFO:SubProcess create_model() end ==================================
2024-01-09 10:50:49,098:INFO:Creating metrics dataframe
2024-01-09 10:50:49,113:INFO:Initializing SVM - Linear Kernel
2024-01-09 10:50:49,113:INFO:Total runtime is 0.2668473362922668 minutes
2024-01-09 10:50:49,136:INFO:SubProcess create_model() called ==================================
2024-01-09 10:50:49,136:INFO:Initializing create_model()
2024-01-09 10:50:49,138:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:50:49,138:INFO:Checking exceptions
2024-01-09 10:50:49,139:INFO:Importing libraries
2024-01-09 10:50:49,139:INFO:Copying training dataset
2024-01-09 10:50:49,147:INFO:Defining folds
2024-01-09 10:50:49,147:INFO:Declaring metric variables
2024-01-09 10:50:49,159:INFO:Importing untrained model
2024-01-09 10:50:49,170:INFO:SVM - Linear Kernel Imported successfully
2024-01-09 10:50:49,186:INFO:Starting cross validation
2024-01-09 10:50:49,191:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:50:49,288:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 10:50:49,292:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,293:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 10:50:49,294:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,294:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 10:50:49,294:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,294:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,305:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,307:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,309:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,309:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,309:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 10:50:49,309:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,309:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,325:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,325:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,371:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 10:50:49,387:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,387:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 10:50:49,387:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,387:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,403:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 10:50:49,403:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,403:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,403:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,403:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 10:50:49,403:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,403:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,403:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,418:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,418:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,434:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,481:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 10:50:49,481:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 10:50:49,481:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,481:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,497:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,502:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,502:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:49,517:INFO:Calculating mean and std
2024-01-09 10:50:49,517:INFO:Creating metrics dataframe
2024-01-09 10:50:49,535:INFO:Uploading results into container
2024-01-09 10:50:49,537:INFO:Uploading model into container now
2024-01-09 10:50:49,537:INFO:_master_model_container: 5
2024-01-09 10:50:49,537:INFO:_display_container: 2
2024-01-09 10:50:49,538:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=3642, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-01-09 10:50:49,538:INFO:create_model() successfully completed......................................
2024-01-09 10:50:49,989:INFO:SubProcess create_model() end ==================================
2024-01-09 10:50:49,989:INFO:Creating metrics dataframe
2024-01-09 10:50:50,020:INFO:Initializing Ridge Classifier
2024-01-09 10:50:50,020:INFO:Total runtime is 0.28196749289830525 minutes
2024-01-09 10:50:50,034:INFO:SubProcess create_model() called ==================================
2024-01-09 10:50:50,034:INFO:Initializing create_model()
2024-01-09 10:50:50,035:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:50:50,035:INFO:Checking exceptions
2024-01-09 10:50:50,035:INFO:Importing libraries
2024-01-09 10:50:50,035:INFO:Copying training dataset
2024-01-09 10:50:50,046:INFO:Defining folds
2024-01-09 10:50:50,047:INFO:Declaring metric variables
2024-01-09 10:50:50,055:INFO:Importing untrained model
2024-01-09 10:50:50,062:INFO:Ridge Classifier Imported successfully
2024-01-09 10:50:50,085:INFO:Starting cross validation
2024-01-09 10:50:50,085:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:50:50,184:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 10:50:50,184:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 10:50:50,200:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,200:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,200:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,200:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,200:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,216:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,216:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,216:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,295:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 10:50:50,295:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 10:50:50,295:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,295:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,295:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 10:50:50,311:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,311:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,312:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,313:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 10:50:50,313:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,313:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,313:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,313:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,313:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,313:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,330:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,378:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 10:50:50,378:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,378:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 10:50:50,378:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,378:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,378:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,378:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,394:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:50,394:INFO:Calculating mean and std
2024-01-09 10:50:50,410:INFO:Creating metrics dataframe
2024-01-09 10:50:50,423:INFO:Uploading results into container
2024-01-09 10:50:50,423:INFO:Uploading model into container now
2024-01-09 10:50:50,423:INFO:_master_model_container: 6
2024-01-09 10:50:50,423:INFO:_display_container: 2
2024-01-09 10:50:50,423:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=3642, solver='auto',
                tol=0.0001)
2024-01-09 10:50:50,423:INFO:create_model() successfully completed......................................
2024-01-09 10:50:50,891:INFO:SubProcess create_model() end ==================================
2024-01-09 10:50:50,891:INFO:Creating metrics dataframe
2024-01-09 10:50:50,906:INFO:Initializing Random Forest Classifier
2024-01-09 10:50:50,906:INFO:Total runtime is 0.29673279126485186 minutes
2024-01-09 10:50:50,928:INFO:SubProcess create_model() called ==================================
2024-01-09 10:50:50,928:INFO:Initializing create_model()
2024-01-09 10:50:50,928:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:50:50,928:INFO:Checking exceptions
2024-01-09 10:50:50,928:INFO:Importing libraries
2024-01-09 10:50:50,928:INFO:Copying training dataset
2024-01-09 10:50:50,940:INFO:Defining folds
2024-01-09 10:50:50,940:INFO:Declaring metric variables
2024-01-09 10:50:50,948:INFO:Importing untrained model
2024-01-09 10:50:50,957:INFO:Random Forest Classifier Imported successfully
2024-01-09 10:50:50,970:INFO:Starting cross validation
2024-01-09 10:50:50,974:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:50:51,806:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:51,810:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:51,810:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:51,822:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:51,822:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:51,822:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:51,822:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:51,822:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:51,838:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:51,868:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:51,884:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:51,884:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:52,622:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:52,642:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:52,646:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:52,646:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:52,646:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:52,646:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:52,646:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:52,662:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:52,662:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:52,800:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:52,800:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:52,815:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:53,350:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:53,351:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:53,351:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:53,351:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:53,351:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:53,367:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:53,383:INFO:Calculating mean and std
2024-01-09 10:50:53,383:INFO:Creating metrics dataframe
2024-01-09 10:50:53,397:INFO:Uploading results into container
2024-01-09 10:50:53,397:INFO:Uploading model into container now
2024-01-09 10:50:53,397:INFO:_master_model_container: 7
2024-01-09 10:50:53,400:INFO:_display_container: 2
2024-01-09 10:50:53,401:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3642, verbose=0, warm_start=False)
2024-01-09 10:50:53,401:INFO:create_model() successfully completed......................................
2024-01-09 10:50:53,849:INFO:SubProcess create_model() end ==================================
2024-01-09 10:50:53,849:INFO:Creating metrics dataframe
2024-01-09 10:50:53,887:INFO:Initializing Quadratic Discriminant Analysis
2024-01-09 10:50:53,887:INFO:Total runtime is 0.34640999237696324 minutes
2024-01-09 10:50:53,895:INFO:SubProcess create_model() called ==================================
2024-01-09 10:50:53,895:INFO:Initializing create_model()
2024-01-09 10:50:53,895:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:50:53,895:INFO:Checking exceptions
2024-01-09 10:50:53,900:INFO:Importing libraries
2024-01-09 10:50:53,900:INFO:Copying training dataset
2024-01-09 10:50:53,910:INFO:Defining folds
2024-01-09 10:50:53,911:INFO:Declaring metric variables
2024-01-09 10:50:53,921:INFO:Importing untrained model
2024-01-09 10:50:53,928:INFO:Quadratic Discriminant Analysis Imported successfully
2024-01-09 10:50:53,946:INFO:Starting cross validation
2024-01-09 10:50:53,947:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:50:54,087:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-01-09 10:50:54,119:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,119:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,119:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,135:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:50:54,135:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:50:54,135:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,135:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,135:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,135:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,198:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-01-09 10:50:54,229:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,229:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,229:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,229:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,229:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:50:54,229:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,244:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,244:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,244:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,244:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:50:54,244:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,244:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:50:54,244:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,244:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:50:54,244:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,244:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,317:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,318:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,318:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,318:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,318:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:50:54,318:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,333:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:54,333:INFO:Calculating mean and std
2024-01-09 10:50:54,349:INFO:Creating metrics dataframe
2024-01-09 10:50:54,360:INFO:Uploading results into container
2024-01-09 10:50:54,360:INFO:Uploading model into container now
2024-01-09 10:50:54,362:INFO:_master_model_container: 8
2024-01-09 10:50:54,362:INFO:_display_container: 2
2024-01-09 10:50:54,363:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-01-09 10:50:54,363:INFO:create_model() successfully completed......................................
2024-01-09 10:50:54,819:INFO:SubProcess create_model() end ==================================
2024-01-09 10:50:54,819:INFO:Creating metrics dataframe
2024-01-09 10:50:54,851:INFO:Initializing Ada Boost Classifier
2024-01-09 10:50:54,851:INFO:Total runtime is 0.36248245636622106 minutes
2024-01-09 10:50:54,861:INFO:SubProcess create_model() called ==================================
2024-01-09 10:50:54,861:INFO:Initializing create_model()
2024-01-09 10:50:54,861:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:50:54,861:INFO:Checking exceptions
2024-01-09 10:50:54,861:INFO:Importing libraries
2024-01-09 10:50:54,861:INFO:Copying training dataset
2024-01-09 10:50:54,875:INFO:Defining folds
2024-01-09 10:50:54,875:INFO:Declaring metric variables
2024-01-09 10:50:54,881:INFO:Importing untrained model
2024-01-09 10:50:54,895:INFO:Ada Boost Classifier Imported successfully
2024-01-09 10:50:54,912:INFO:Starting cross validation
2024-01-09 10:50:54,914:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:50:55,447:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:55,463:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:55,463:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:55,463:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:55,463:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:55,478:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:55,478:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:55,478:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:55,478:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:55,478:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:55,494:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:55,494:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,029:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,029:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,029:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,029:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,045:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,045:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,045:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,045:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,071:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,072:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,072:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,499:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,499:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,515:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,515:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,531:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,531:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:56,546:INFO:Calculating mean and std
2024-01-09 10:50:56,546:INFO:Creating metrics dataframe
2024-01-09 10:50:56,560:INFO:Uploading results into container
2024-01-09 10:50:56,561:INFO:Uploading model into container now
2024-01-09 10:50:56,562:INFO:_master_model_container: 9
2024-01-09 10:50:56,562:INFO:_display_container: 2
2024-01-09 10:50:56,564:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=3642)
2024-01-09 10:50:56,564:INFO:create_model() successfully completed......................................
2024-01-09 10:50:57,019:INFO:SubProcess create_model() end ==================================
2024-01-09 10:50:57,019:INFO:Creating metrics dataframe
2024-01-09 10:50:57,042:INFO:Initializing Gradient Boosting Classifier
2024-01-09 10:50:57,042:INFO:Total runtime is 0.39899947643280026 minutes
2024-01-09 10:50:57,058:INFO:SubProcess create_model() called ==================================
2024-01-09 10:50:57,059:INFO:Initializing create_model()
2024-01-09 10:50:57,059:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:50:57,059:INFO:Checking exceptions
2024-01-09 10:50:57,059:INFO:Importing libraries
2024-01-09 10:50:57,059:INFO:Copying training dataset
2024-01-09 10:50:57,067:INFO:Defining folds
2024-01-09 10:50:57,068:INFO:Declaring metric variables
2024-01-09 10:50:57,077:INFO:Importing untrained model
2024-01-09 10:50:57,090:INFO:Gradient Boosting Classifier Imported successfully
2024-01-09 10:50:57,103:INFO:Starting cross validation
2024-01-09 10:50:57,103:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:50:58,336:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:58,352:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:58,352:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:58,352:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:58,352:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:58,368:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:58,368:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:58,368:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:58,385:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:58,385:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:58,400:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:59,593:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:59,602:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:59,604:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:59,618:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:59,619:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:59,635:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:59,651:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:59,651:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:59,651:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:59,651:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:50:59,666:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:00,685:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:00,694:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:00,694:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:00,694:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:00,703:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:00,703:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:00,719:INFO:Calculating mean and std
2024-01-09 10:51:00,719:INFO:Creating metrics dataframe
2024-01-09 10:51:00,719:INFO:Uploading results into container
2024-01-09 10:51:00,719:INFO:Uploading model into container now
2024-01-09 10:51:00,719:INFO:_master_model_container: 10
2024-01-09 10:51:00,719:INFO:_display_container: 2
2024-01-09 10:51:00,736:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3642, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-01-09 10:51:00,737:INFO:create_model() successfully completed......................................
2024-01-09 10:51:01,186:INFO:SubProcess create_model() end ==================================
2024-01-09 10:51:01,194:INFO:Creating metrics dataframe
2024-01-09 10:51:01,219:INFO:Initializing Linear Discriminant Analysis
2024-01-09 10:51:01,219:INFO:Total runtime is 0.46860556999842323 minutes
2024-01-09 10:51:01,229:INFO:SubProcess create_model() called ==================================
2024-01-09 10:51:01,234:INFO:Initializing create_model()
2024-01-09 10:51:01,235:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:51:01,235:INFO:Checking exceptions
2024-01-09 10:51:01,235:INFO:Importing libraries
2024-01-09 10:51:01,236:INFO:Copying training dataset
2024-01-09 10:51:01,237:INFO:Defining folds
2024-01-09 10:51:01,237:INFO:Declaring metric variables
2024-01-09 10:51:01,248:INFO:Importing untrained model
2024-01-09 10:51:01,253:INFO:Linear Discriminant Analysis Imported successfully
2024-01-09 10:51:01,271:INFO:Starting cross validation
2024-01-09 10:51:01,275:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:51:01,377:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,377:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,393:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,393:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,393:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,393:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,393:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,393:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,393:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,408:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,484:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,500:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,500:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,500:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,500:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,500:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,515:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,515:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,515:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,515:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,515:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,531:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,578:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,578:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,578:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,578:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,578:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,593:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:01,593:INFO:Calculating mean and std
2024-01-09 10:51:01,593:INFO:Creating metrics dataframe
2024-01-09 10:51:01,616:INFO:Uploading results into container
2024-01-09 10:51:01,618:INFO:Uploading model into container now
2024-01-09 10:51:01,619:INFO:_master_model_container: 11
2024-01-09 10:51:01,619:INFO:_display_container: 2
2024-01-09 10:51:01,620:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-01-09 10:51:01,621:INFO:create_model() successfully completed......................................
2024-01-09 10:51:02,073:INFO:SubProcess create_model() end ==================================
2024-01-09 10:51:02,073:INFO:Creating metrics dataframe
2024-01-09 10:51:02,089:INFO:Initializing Extra Trees Classifier
2024-01-09 10:51:02,104:INFO:Total runtime is 0.4833673119544983 minutes
2024-01-09 10:51:02,113:INFO:SubProcess create_model() called ==================================
2024-01-09 10:51:02,113:INFO:Initializing create_model()
2024-01-09 10:51:02,113:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:51:02,113:INFO:Checking exceptions
2024-01-09 10:51:02,117:INFO:Importing libraries
2024-01-09 10:51:02,118:INFO:Copying training dataset
2024-01-09 10:51:02,123:INFO:Defining folds
2024-01-09 10:51:02,123:INFO:Declaring metric variables
2024-01-09 10:51:02,136:INFO:Importing untrained model
2024-01-09 10:51:02,144:INFO:Extra Trees Classifier Imported successfully
2024-01-09 10:51:02,160:INFO:Starting cross validation
2024-01-09 10:51:02,162:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:51:02,803:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:02,803:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:02,808:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:02,815:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:02,815:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:02,820:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:02,820:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:02,820:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:02,820:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:02,867:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:02,867:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:02,882:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:03,465:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:03,465:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:03,471:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:03,471:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:03,471:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:03,486:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:03,500:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:03,500:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:03,525:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:03,580:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:03,580:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:03,580:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:04,057:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:04,057:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:04,073:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:04,073:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:04,073:INFO:Calculating mean and std
2024-01-09 10:51:04,088:INFO:Creating metrics dataframe
2024-01-09 10:51:04,100:INFO:Uploading results into container
2024-01-09 10:51:04,103:INFO:Uploading model into container now
2024-01-09 10:51:04,103:INFO:_master_model_container: 12
2024-01-09 10:51:04,104:INFO:_display_container: 2
2024-01-09 10:51:04,105:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=3642, verbose=0, warm_start=False)
2024-01-09 10:51:04,105:INFO:create_model() successfully completed......................................
2024-01-09 10:51:04,562:INFO:SubProcess create_model() end ==================================
2024-01-09 10:51:04,562:INFO:Creating metrics dataframe
2024-01-09 10:51:04,593:INFO:Initializing Extreme Gradient Boosting
2024-01-09 10:51:04,593:INFO:Total runtime is 0.5248461802800496 minutes
2024-01-09 10:51:04,602:INFO:SubProcess create_model() called ==================================
2024-01-09 10:51:04,602:INFO:Initializing create_model()
2024-01-09 10:51:04,602:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:51:04,602:INFO:Checking exceptions
2024-01-09 10:51:04,602:INFO:Importing libraries
2024-01-09 10:51:04,602:INFO:Copying training dataset
2024-01-09 10:51:04,607:INFO:Defining folds
2024-01-09 10:51:04,607:INFO:Declaring metric variables
2024-01-09 10:51:04,618:INFO:Importing untrained model
2024-01-09 10:51:04,623:INFO:Extreme Gradient Boosting Imported successfully
2024-01-09 10:51:04,637:INFO:Starting cross validation
2024-01-09 10:51:04,641:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:51:05,170:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,170:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,186:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,186:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,186:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,186:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,186:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,201:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,201:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,201:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,608:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,608:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,624:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,624:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,624:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,624:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,624:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,624:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,624:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,640:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,640:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,640:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,978:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,986:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,986:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,986:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,986:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:05,986:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:06,001:INFO:Calculating mean and std
2024-01-09 10:51:06,017:INFO:Creating metrics dataframe
2024-01-09 10:51:06,017:INFO:Uploading results into container
2024-01-09 10:51:06,017:INFO:Uploading model into container now
2024-01-09 10:51:06,017:INFO:_master_model_container: 13
2024-01-09 10:51:06,017:INFO:_display_container: 2
2024-01-09 10:51:06,030:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-01-09 10:51:06,031:INFO:create_model() successfully completed......................................
2024-01-09 10:51:06,489:INFO:SubProcess create_model() end ==================================
2024-01-09 10:51:06,489:INFO:Creating metrics dataframe
2024-01-09 10:51:06,503:INFO:Initializing Light Gradient Boosting Machine
2024-01-09 10:51:06,503:INFO:Total runtime is 0.556684406598409 minutes
2024-01-09 10:51:06,528:INFO:SubProcess create_model() called ==================================
2024-01-09 10:51:06,529:INFO:Initializing create_model()
2024-01-09 10:51:06,529:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:51:06,529:INFO:Checking exceptions
2024-01-09 10:51:06,530:INFO:Importing libraries
2024-01-09 10:51:06,530:INFO:Copying training dataset
2024-01-09 10:51:06,538:INFO:Defining folds
2024-01-09 10:51:06,539:INFO:Declaring metric variables
2024-01-09 10:51:06,549:INFO:Importing untrained model
2024-01-09 10:51:06,558:INFO:Light Gradient Boosting Machine Imported successfully
2024-01-09 10:51:06,574:INFO:Starting cross validation
2024-01-09 10:51:06,577:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:51:07,253:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,253:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,253:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,272:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,272:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,273:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,273:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,286:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,286:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,286:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,303:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,906:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,920:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,924:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,924:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,924:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,936:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,955:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,968:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,969:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,969:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:07,993:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:08,003:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:08,305:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:08,319:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:08,319:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:08,319:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:08,319:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:08,335:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:08,352:INFO:Calculating mean and std
2024-01-09 10:51:08,352:INFO:Creating metrics dataframe
2024-01-09 10:51:08,378:INFO:Uploading results into container
2024-01-09 10:51:08,378:INFO:Uploading model into container now
2024-01-09 10:51:08,378:INFO:_master_model_container: 14
2024-01-09 10:51:08,378:INFO:_display_container: 2
2024-01-09 10:51:08,378:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=3642, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-01-09 10:51:08,378:INFO:create_model() successfully completed......................................
2024-01-09 10:51:08,845:INFO:SubProcess create_model() end ==================================
2024-01-09 10:51:08,845:INFO:Creating metrics dataframe
2024-01-09 10:51:08,876:INFO:Initializing CatBoost Classifier
2024-01-09 10:51:08,876:INFO:Total runtime is 0.5962272644042969 minutes
2024-01-09 10:51:08,895:INFO:SubProcess create_model() called ==================================
2024-01-09 10:51:08,898:INFO:Initializing create_model()
2024-01-09 10:51:08,898:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:51:08,898:INFO:Checking exceptions
2024-01-09 10:51:08,898:INFO:Importing libraries
2024-01-09 10:51:08,898:INFO:Copying training dataset
2024-01-09 10:51:08,906:INFO:Defining folds
2024-01-09 10:51:08,907:INFO:Declaring metric variables
2024-01-09 10:51:08,920:INFO:Importing untrained model
2024-01-09 10:51:08,930:INFO:CatBoost Classifier Imported successfully
2024-01-09 10:51:08,945:INFO:Starting cross validation
2024-01-09 10:51:08,947:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:51:54,862:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:54,862:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:54,893:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:54,940:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:54,957:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:54,957:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:55,101:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:55,101:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:55,116:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:55,514:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:55,514:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:51:55,529:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:52:28,058:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:52:28,073:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:52:28,073:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:52:28,102:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:52:28,113:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:52:28,113:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:52:28,278:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:52:28,278:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:52:28,295:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:52:28,312:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py:378: FitFailedWarning: 
2024-01-09 10:52:28,313:WARNING:3 fits failed out of a total of 10.
2024-01-09 10:52:28,313:WARNING:The score on these train-test partitions for these parameters will be set to 0.0.
2024-01-09 10:52:28,314:WARNING:If these failures are not expected, you can try to debug them by setting error_score='raise'.
2024-01-09 10:52:28,314:WARNING:
2024-01-09 10:52:28,314:WARNING:Below are more details about the failures:
2024-01-09 10:52:28,314:WARNING:--------------------------------------------------------------------------------
2024-01-09 10:52:28,314:WARNING:3 fits failed with the following error:
2024-01-09 10:52:28,315:WARNING:Traceback (most recent call last):
2024-01-09 10:52:28,315:WARNING:  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 686, in _fit_and_score
2024-01-09 10:52:28,315:WARNING:    estimator.fit(X_train, y_train, **fit_params)
2024-01-09 10:52:28,315:WARNING:  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 275, in fit
2024-01-09 10:52:28,315:WARNING:    fitted_estimator = self._memory_fit(
2024-01-09 10:52:28,315:WARNING:                       ^^^^^^^^^^^^^^^^^
2024-01-09 10:52:28,315:WARNING:  File "C:\Users\HP\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
2024-01-09 10:52:28,315:WARNING:    return self.func(*args, **kwargs)
2024-01-09 10:52:28,315:WARNING:           ^^^^^^^^^^^^^^^^^^^^^^^^^^
2024-01-09 10:52:28,315:WARNING:  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 68, in _fit_one
2024-01-09 10:52:28,315:WARNING:    transformer.fit(*args, **fit_params)
2024-01-09 10:52:28,315:WARNING:  File "C:\Users\HP\anaconda3\Lib\site-packages\catboost\core.py", line 5100, in fit
2024-01-09 10:52:28,315:WARNING:    self._fit(X, y, cat_features, text_features, embedding_features, None, sample_weight, None, None, None, None, baseline, use_best_model,
2024-01-09 10:52:28,315:WARNING:  File "C:\Users\HP\anaconda3\Lib\site-packages\catboost\core.py", line 2319, in _fit
2024-01-09 10:52:28,315:WARNING:    self._train(
2024-01-09 10:52:28,315:WARNING:  File "C:\Users\HP\anaconda3\Lib\site-packages\catboost\core.py", line 1723, in _train
2024-01-09 10:52:28,315:WARNING:    self._object._train(train_pool, test_pool, params, allow_clear_pool, init_model._object if init_model else None)
2024-01-09 10:52:28,315:WARNING:  File "_catboost.pyx", line 4645, in _catboost._CatBoost._train
2024-01-09 10:52:28,319:WARNING:  File "_catboost.pyx", line 4694, in _catboost._CatBoost._train
2024-01-09 10:52:28,319:WARNING:_catboost.CatBoostError: C:/Go_Agent/pipelines/BuildMaster/catboost.git/catboost/libs/train_lib/dir_helper.cpp:20: Can't create train working dir: catboost_info
2024-01-09 10:52:28,319:WARNING:
2024-01-09 10:52:28,319:WARNING:  warnings.warn(some_fits_failed_message, FitFailedWarning)
2024-01-09 10:52:28,320:INFO:Calculating mean and std
2024-01-09 10:52:28,323:INFO:Creating metrics dataframe
2024-01-09 10:52:28,336:INFO:Uploading results into container
2024-01-09 10:52:28,338:INFO:Uploading model into container now
2024-01-09 10:52:28,339:INFO:_master_model_container: 15
2024-01-09 10:52:28,339:INFO:_display_container: 2
2024-01-09 10:52:28,339:INFO:<catboost.core.CatBoostClassifier object at 0x0000025FE6887310>
2024-01-09 10:52:28,340:INFO:create_model() successfully completed......................................
2024-01-09 10:52:28,834:WARNING:create_model() for <catboost.core.CatBoostClassifier object at 0x0000025FE6887310> raised an exception or returned all 0.0, trying without fit_kwargs:
2024-01-09 10:52:28,841:WARNING:Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 797, in compare_models
    np.sum(
AssertionError

2024-01-09 10:52:28,841:INFO:Initializing create_model()
2024-01-09 10:52:28,841:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:52:28,841:INFO:Checking exceptions
2024-01-09 10:52:28,841:INFO:Importing libraries
2024-01-09 10:52:28,841:INFO:Copying training dataset
2024-01-09 10:52:28,841:INFO:Defining folds
2024-01-09 10:52:28,841:INFO:Declaring metric variables
2024-01-09 10:52:28,862:INFO:Importing untrained model
2024-01-09 10:52:28,866:INFO:CatBoost Classifier Imported successfully
2024-01-09 10:52:28,878:INFO:Starting cross validation
2024-01-09 10:52:28,883:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:53:12,922:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:12,935:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:12,935:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:13,033:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:13,033:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:13,049:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:13,080:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:13,080:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:13,095:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:13,165:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:13,165:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:13,182:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:56,244:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:56,244:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:56,259:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:56,600:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:56,604:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:56,615:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:56,670:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:56,685:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:56,685:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:56,852:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:56,852:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:53:56,852:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:19,226:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:19,244:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:19,249:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:19,358:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:19,364:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:19,370:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:19,388:INFO:Calculating mean and std
2024-01-09 10:54:19,392:INFO:Creating metrics dataframe
2024-01-09 10:54:19,405:INFO:Uploading results into container
2024-01-09 10:54:19,406:INFO:Uploading model into container now
2024-01-09 10:54:19,408:INFO:_master_model_container: 16
2024-01-09 10:54:19,408:INFO:_display_container: 2
2024-01-09 10:54:19,408:INFO:<catboost.core.CatBoostClassifier object at 0x0000025FE863F550>
2024-01-09 10:54:19,408:INFO:create_model() successfully completed......................................
2024-01-09 10:54:20,039:INFO:SubProcess create_model() end ==================================
2024-01-09 10:54:20,039:INFO:Creating metrics dataframe
2024-01-09 10:54:20,071:INFO:Initializing Dummy Classifier
2024-01-09 10:54:20,071:INFO:Total runtime is 3.782806122303009 minutes
2024-01-09 10:54:20,078:INFO:SubProcess create_model() called ==================================
2024-01-09 10:54:20,081:INFO:Initializing create_model()
2024-01-09 10:54:20,081:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FE620F3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:54:20,081:INFO:Checking exceptions
2024-01-09 10:54:20,081:INFO:Importing libraries
2024-01-09 10:54:20,082:INFO:Copying training dataset
2024-01-09 10:54:20,090:INFO:Defining folds
2024-01-09 10:54:20,091:INFO:Declaring metric variables
2024-01-09 10:54:20,099:INFO:Importing untrained model
2024-01-09 10:54:20,106:INFO:Dummy Classifier Imported successfully
2024-01-09 10:54:20,126:INFO:Starting cross validation
2024-01-09 10:54:20,130:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 10:54:20,207:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,207:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,207:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,222:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:54:20,222:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,222:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,222:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,222:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:54:20,222:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,222:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,222:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:54:20,238:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,238:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,238:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,253:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:54:20,261:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,308:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,308:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,323:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,323:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,323:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:54:20,323:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,323:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,323:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:54:20,323:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,323:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:54:20,323:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,339:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,339:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,339:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,354:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:54:20,354:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,397:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,405:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,409:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,409:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:54:20,412:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,416:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,419:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 10:54:20,424:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 10:54:20,439:INFO:Calculating mean and std
2024-01-09 10:54:20,448:INFO:Creating metrics dataframe
2024-01-09 10:54:20,458:INFO:Uploading results into container
2024-01-09 10:54:20,458:INFO:Uploading model into container now
2024-01-09 10:54:20,463:INFO:_master_model_container: 17
2024-01-09 10:54:20,463:INFO:_display_container: 2
2024-01-09 10:54:20,464:INFO:DummyClassifier(constant=None, random_state=3642, strategy='prior')
2024-01-09 10:54:20,464:INFO:create_model() successfully completed......................................
2024-01-09 10:54:20,950:INFO:SubProcess create_model() end ==================================
2024-01-09 10:54:20,950:INFO:Creating metrics dataframe
2024-01-09 10:54:21,014:INFO:Initializing create_model()
2024-01-09 10:54:21,014:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE3799B50>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=3642, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 10:54:21,014:INFO:Checking exceptions
2024-01-09 10:54:21,019:INFO:Importing libraries
2024-01-09 10:54:21,019:INFO:Copying training dataset
2024-01-09 10:54:21,029:INFO:Defining folds
2024-01-09 10:54:21,029:INFO:Declaring metric variables
2024-01-09 10:54:21,030:INFO:Importing untrained model
2024-01-09 10:54:21,030:INFO:Declaring custom model
2024-01-09 10:54:21,032:INFO:Extra Trees Classifier Imported successfully
2024-01-09 10:54:21,035:INFO:Cross validation set to False
2024-01-09 10:54:21,035:INFO:Fitting Model
2024-01-09 10:54:21,443:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=3642, verbose=0, warm_start=False)
2024-01-09 10:54:21,443:INFO:create_model() successfully completed......................................
2024-01-09 10:54:21,968:INFO:_master_model_container: 17
2024-01-09 10:54:21,968:INFO:_display_container: 2
2024-01-09 10:54:21,969:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=3642, verbose=0, warm_start=False)
2024-01-09 10:54:21,969:INFO:compare_models() successfully completed......................................
2024-01-09 11:06:13,839:INFO:PyCaret ClassificationExperiment
2024-01-09 11:06:13,839:INFO:Logging name: clf-default-name
2024-01-09 11:06:13,839:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-01-09 11:06:13,839:INFO:version 3.2.0
2024-01-09 11:06:13,839:INFO:Initializing setup()
2024-01-09 11:06:13,839:INFO:self.USI: c61b
2024-01-09 11:06:13,839:INFO:self._variable_keys: {'n_jobs_param', 'logging_param', '_available_plots', 'target_param', 'seed', 'y', 'fold_shuffle_param', 'fix_imbalance', 'pipeline', 'is_multiclass', 'log_plots_param', 'exp_name_log', 'memory', 'USI', 'html_param', 'X', 'idx', 'data', 'fold_groups_param', '_ml_usecase', 'fold_generator', 'gpu_n_jobs_param', 'exp_id', 'y_test', 'y_train', 'X_test', 'X_train', 'gpu_param'}
2024-01-09 11:06:13,839:INFO:Checking environment
2024-01-09 11:06:13,839:INFO:python_version: 3.11.5
2024-01-09 11:06:13,839:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-01-09 11:06:13,839:INFO:machine: AMD64
2024-01-09 11:06:13,839:INFO:platform: Windows-10-10.0.19045-SP0
2024-01-09 11:06:13,839:INFO:Memory: svmem(total=8464732160, available=4599177216, percent=45.7, used=3865554944, free=4599177216)
2024-01-09 11:06:13,839:INFO:Physical Core: 2
2024-01-09 11:06:13,839:INFO:Logical Core: 4
2024-01-09 11:06:13,839:INFO:Checking libraries
2024-01-09 11:06:13,839:INFO:System:
2024-01-09 11:06:13,839:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-01-09 11:06:13,839:INFO:executable: C:\Users\HP\anaconda3\python.exe
2024-01-09 11:06:13,839:INFO:   machine: Windows-10-10.0.19045-SP0
2024-01-09 11:06:13,839:INFO:PyCaret required dependencies:
2024-01-09 11:06:13,839:INFO:                 pip: 23.2.1
2024-01-09 11:06:13,839:INFO:          setuptools: 68.0.0
2024-01-09 11:06:13,839:INFO:             pycaret: 3.2.0
2024-01-09 11:06:13,839:INFO:             IPython: 8.15.0
2024-01-09 11:06:13,839:INFO:          ipywidgets: 8.0.4
2024-01-09 11:06:13,839:INFO:                tqdm: 4.65.0
2024-01-09 11:06:13,839:INFO:               numpy: 1.24.3
2024-01-09 11:06:13,839:INFO:              pandas: 1.5.3
2024-01-09 11:06:13,839:INFO:              jinja2: 3.1.2
2024-01-09 11:06:13,839:INFO:               scipy: 1.11.1
2024-01-09 11:06:13,839:INFO:              joblib: 1.1.1
2024-01-09 11:06:13,839:INFO:             sklearn: 1.2.2
2024-01-09 11:06:13,839:INFO:                pyod: 1.1.2
2024-01-09 11:06:13,839:INFO:            imblearn: 0.11.0
2024-01-09 11:06:13,839:INFO:   category_encoders: 2.6.3
2024-01-09 11:06:13,839:INFO:            lightgbm: 4.2.0
2024-01-09 11:06:13,839:INFO:               numba: 0.57.1
2024-01-09 11:06:13,839:INFO:            requests: 2.31.0
2024-01-09 11:06:13,839:INFO:          matplotlib: 3.6.0
2024-01-09 11:06:13,839:INFO:          scikitplot: 0.3.7
2024-01-09 11:06:13,839:INFO:         yellowbrick: 1.5
2024-01-09 11:06:13,847:INFO:              plotly: 5.9.0
2024-01-09 11:06:13,847:INFO:    plotly-resampler: Not installed
2024-01-09 11:06:13,847:INFO:             kaleido: 0.2.1
2024-01-09 11:06:13,847:INFO:           schemdraw: 0.15
2024-01-09 11:06:13,847:INFO:         statsmodels: 0.14.0
2024-01-09 11:06:13,847:INFO:              sktime: 0.21.1
2024-01-09 11:06:13,847:INFO:               tbats: 1.1.3
2024-01-09 11:06:13,847:INFO:            pmdarima: 2.0.4
2024-01-09 11:06:13,847:INFO:              psutil: 5.9.0
2024-01-09 11:06:13,848:INFO:          markupsafe: 2.1.1
2024-01-09 11:06:13,848:INFO:             pickle5: Not installed
2024-01-09 11:06:13,848:INFO:         cloudpickle: 2.2.1
2024-01-09 11:06:13,848:INFO:         deprecation: 2.1.0
2024-01-09 11:06:13,848:INFO:              xxhash: 2.0.2
2024-01-09 11:06:13,848:INFO:           wurlitzer: Not installed
2024-01-09 11:06:13,848:INFO:PyCaret optional dependencies:
2024-01-09 11:06:13,848:INFO:                shap: 0.44.0
2024-01-09 11:06:13,848:INFO:           interpret: 0.5.0
2024-01-09 11:06:13,848:INFO:                umap: 0.5.5
2024-01-09 11:06:13,848:INFO:     ydata_profiling: 4.6.0
2024-01-09 11:06:13,848:INFO:  explainerdashboard: 0.4.5
2024-01-09 11:06:13,848:INFO:             autoviz: Not installed
2024-01-09 11:06:13,848:INFO:           fairlearn: 0.7.0
2024-01-09 11:06:13,848:INFO:          deepchecks: Not installed
2024-01-09 11:06:13,848:INFO:             xgboost: 2.0.3
2024-01-09 11:06:13,848:INFO:            catboost: 1.2.2
2024-01-09 11:06:13,848:INFO:              kmodes: 0.12.2
2024-01-09 11:06:13,848:INFO:             mlxtend: 0.23.0
2024-01-09 11:06:13,848:INFO:       statsforecast: 1.5.0
2024-01-09 11:06:13,848:INFO:        tune_sklearn: Not installed
2024-01-09 11:06:13,848:INFO:                 ray: Not installed
2024-01-09 11:06:13,848:INFO:            hyperopt: 0.2.7
2024-01-09 11:06:13,848:INFO:              optuna: 3.5.0
2024-01-09 11:06:13,848:INFO:               skopt: 0.9.0
2024-01-09 11:06:13,848:INFO:              mlflow: 1.30.1
2024-01-09 11:06:13,848:INFO:              gradio: 3.50.2
2024-01-09 11:06:13,848:INFO:             fastapi: 0.108.0
2024-01-09 11:06:13,848:INFO:             uvicorn: 0.25.0
2024-01-09 11:06:13,848:INFO:              m2cgen: 0.10.0
2024-01-09 11:06:13,848:INFO:           evidently: 0.2.8
2024-01-09 11:06:13,848:INFO:               fugue: 0.8.6
2024-01-09 11:06:13,848:INFO:           streamlit: Not installed
2024-01-09 11:06:13,848:INFO:             prophet: Not installed
2024-01-09 11:06:13,848:INFO:None
2024-01-09 11:06:13,848:INFO:Set up data.
2024-01-09 11:06:13,887:INFO:Set up folding strategy.
2024-01-09 11:06:13,887:INFO:Set up train/test split.
2024-01-09 11:06:13,887:INFO:Set up data.
2024-01-09 11:08:49,222:INFO:PyCaret ClassificationExperiment
2024-01-09 11:08:49,222:INFO:Logging name: clf-default-name
2024-01-09 11:08:49,222:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-01-09 11:08:49,222:INFO:version 3.2.0
2024-01-09 11:08:49,222:INFO:Initializing setup()
2024-01-09 11:08:49,222:INFO:self.USI: 253d
2024-01-09 11:08:49,222:INFO:self._variable_keys: {'n_jobs_param', 'logging_param', '_available_plots', 'target_param', 'seed', 'y', 'fold_shuffle_param', 'fix_imbalance', 'pipeline', 'is_multiclass', 'log_plots_param', 'exp_name_log', 'memory', 'USI', 'html_param', 'X', 'idx', 'data', 'fold_groups_param', '_ml_usecase', 'fold_generator', 'gpu_n_jobs_param', 'exp_id', 'y_test', 'y_train', 'X_test', 'X_train', 'gpu_param'}
2024-01-09 11:08:49,222:INFO:Checking environment
2024-01-09 11:08:49,222:INFO:python_version: 3.11.5
2024-01-09 11:08:49,229:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-01-09 11:08:49,229:INFO:machine: AMD64
2024-01-09 11:08:49,229:INFO:platform: Windows-10-10.0.19045-SP0
2024-01-09 11:08:49,229:INFO:Memory: svmem(total=8464732160, available=4637405184, percent=45.2, used=3827326976, free=4637405184)
2024-01-09 11:08:49,229:INFO:Physical Core: 2
2024-01-09 11:08:49,229:INFO:Logical Core: 4
2024-01-09 11:08:49,229:INFO:Checking libraries
2024-01-09 11:08:49,230:INFO:System:
2024-01-09 11:08:49,230:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-01-09 11:08:49,230:INFO:executable: C:\Users\HP\anaconda3\python.exe
2024-01-09 11:08:49,230:INFO:   machine: Windows-10-10.0.19045-SP0
2024-01-09 11:08:49,230:INFO:PyCaret required dependencies:
2024-01-09 11:08:49,230:INFO:                 pip: 23.2.1
2024-01-09 11:08:49,230:INFO:          setuptools: 68.0.0
2024-01-09 11:08:49,230:INFO:             pycaret: 3.2.0
2024-01-09 11:08:49,230:INFO:             IPython: 8.15.0
2024-01-09 11:08:49,230:INFO:          ipywidgets: 8.0.4
2024-01-09 11:08:49,230:INFO:                tqdm: 4.65.0
2024-01-09 11:08:49,230:INFO:               numpy: 1.24.3
2024-01-09 11:08:49,230:INFO:              pandas: 1.5.3
2024-01-09 11:08:49,230:INFO:              jinja2: 3.1.2
2024-01-09 11:08:49,230:INFO:               scipy: 1.11.1
2024-01-09 11:08:49,230:INFO:              joblib: 1.1.1
2024-01-09 11:08:49,230:INFO:             sklearn: 1.2.2
2024-01-09 11:08:49,230:INFO:                pyod: 1.1.2
2024-01-09 11:08:49,230:INFO:            imblearn: 0.11.0
2024-01-09 11:08:49,230:INFO:   category_encoders: 2.6.3
2024-01-09 11:08:49,230:INFO:            lightgbm: 4.2.0
2024-01-09 11:08:49,230:INFO:               numba: 0.57.1
2024-01-09 11:08:49,230:INFO:            requests: 2.31.0
2024-01-09 11:08:49,230:INFO:          matplotlib: 3.6.0
2024-01-09 11:08:49,230:INFO:          scikitplot: 0.3.7
2024-01-09 11:08:49,230:INFO:         yellowbrick: 1.5
2024-01-09 11:08:49,230:INFO:              plotly: 5.9.0
2024-01-09 11:08:49,230:INFO:    plotly-resampler: Not installed
2024-01-09 11:08:49,230:INFO:             kaleido: 0.2.1
2024-01-09 11:08:49,230:INFO:           schemdraw: 0.15
2024-01-09 11:08:49,230:INFO:         statsmodels: 0.14.0
2024-01-09 11:08:49,230:INFO:              sktime: 0.21.1
2024-01-09 11:08:49,230:INFO:               tbats: 1.1.3
2024-01-09 11:08:49,230:INFO:            pmdarima: 2.0.4
2024-01-09 11:08:49,230:INFO:              psutil: 5.9.0
2024-01-09 11:08:49,230:INFO:          markupsafe: 2.1.1
2024-01-09 11:08:49,230:INFO:             pickle5: Not installed
2024-01-09 11:08:49,230:INFO:         cloudpickle: 2.2.1
2024-01-09 11:08:49,230:INFO:         deprecation: 2.1.0
2024-01-09 11:08:49,230:INFO:              xxhash: 2.0.2
2024-01-09 11:08:49,230:INFO:           wurlitzer: Not installed
2024-01-09 11:08:49,230:INFO:PyCaret optional dependencies:
2024-01-09 11:08:49,230:INFO:                shap: 0.44.0
2024-01-09 11:08:49,230:INFO:           interpret: 0.5.0
2024-01-09 11:08:49,230:INFO:                umap: 0.5.5
2024-01-09 11:08:49,230:INFO:     ydata_profiling: 4.6.0
2024-01-09 11:08:49,230:INFO:  explainerdashboard: 0.4.5
2024-01-09 11:08:49,230:INFO:             autoviz: Not installed
2024-01-09 11:08:49,230:INFO:           fairlearn: 0.7.0
2024-01-09 11:08:49,230:INFO:          deepchecks: Not installed
2024-01-09 11:08:49,230:INFO:             xgboost: 2.0.3
2024-01-09 11:08:49,230:INFO:            catboost: 1.2.2
2024-01-09 11:08:49,230:INFO:              kmodes: 0.12.2
2024-01-09 11:08:49,230:INFO:             mlxtend: 0.23.0
2024-01-09 11:08:49,230:INFO:       statsforecast: 1.5.0
2024-01-09 11:08:49,230:INFO:        tune_sklearn: Not installed
2024-01-09 11:08:49,230:INFO:                 ray: Not installed
2024-01-09 11:08:49,230:INFO:            hyperopt: 0.2.7
2024-01-09 11:08:49,230:INFO:              optuna: 3.5.0
2024-01-09 11:08:49,230:INFO:               skopt: 0.9.0
2024-01-09 11:08:49,230:INFO:              mlflow: 1.30.1
2024-01-09 11:08:49,230:INFO:              gradio: 3.50.2
2024-01-09 11:08:49,230:INFO:             fastapi: 0.108.0
2024-01-09 11:08:49,230:INFO:             uvicorn: 0.25.0
2024-01-09 11:08:49,230:INFO:              m2cgen: 0.10.0
2024-01-09 11:08:49,230:INFO:           evidently: 0.2.8
2024-01-09 11:08:49,230:INFO:               fugue: 0.8.6
2024-01-09 11:08:49,230:INFO:           streamlit: Not installed
2024-01-09 11:08:49,230:INFO:             prophet: Not installed
2024-01-09 11:08:49,230:INFO:None
2024-01-09 11:08:49,238:INFO:Set up data.
2024-01-09 11:08:49,264:INFO:Set up folding strategy.
2024-01-09 11:08:49,264:INFO:Set up train/test split.
2024-01-09 11:08:49,264:INFO:Set up index.
2024-01-09 11:08:49,264:INFO:Assigning column types.
2024-01-09 11:08:49,281:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-01-09 11:08:49,382:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-09 11:08:49,382:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:08:49,449:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:08:49,449:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:08:49,558:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-09 11:08:49,558:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:08:49,621:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:08:49,636:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:08:49,636:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-01-09 11:08:49,731:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:08:49,794:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:08:49,810:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:08:49,905:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:08:49,969:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:08:49,985:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:08:49,985:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-01-09 11:08:50,143:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:08:50,163:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:08:50,449:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:08:50,452:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:08:50,452:INFO:Preparing preprocessing pipeline...
2024-01-09 11:08:50,460:INFO:Set up label encoding.
2024-01-09 11:08:50,460:INFO:Set up simple imputation.
2024-01-09 11:08:50,462:INFO:Set up removing multicollinearity.
2024-01-09 11:08:50,462:INFO:Set up removing outliers.
2024-01-09 11:08:50,462:INFO:Set up imbalanced handling.
2024-01-09 11:08:50,462:INFO:Set up feature selection.
2024-01-09 11:08:50,634:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:08:50,636:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:08:52,266:INFO:Finished creating preprocessing pipeline.
2024-01-09 11:08:52,319:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\HP\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21', '22...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=12,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2024-01-09 11:08:52,319:INFO:Creating final display dataframe.
2024-01-09 11:08:54,463:INFO:Setup _display_container:                     Description             Value
0                    Session id               932
1                        Target                60
2                   Target type            Binary
3                Target mapping        M: 0, R: 1
4           Original data shape         (208, 61)
5        Transformed data shape         (203, 13)
6   Transformed train set shape         (140, 13)
7    Transformed test set shape          (63, 13)
8              Numeric features                60
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Remove multicollinearity              True
14  Multicollinearity threshold               0.9
15              Remove outliers              True
16           Outliers threshold              0.05
17                Fix imbalance              True
18         Fix imbalance method             SMOTE
19            Feature selection              True
20     Feature selection method           classic
21  Feature selection estimator          lightgbm
22  Number of features selected               0.2
23               Fold Generator   StratifiedKFold
24                  Fold Number                10
25                     CPU Jobs                -1
26                      Use GPU             False
27               Log Experiment             False
28              Experiment Name  clf-default-name
29                          USI              253d
2024-01-09 11:08:54,659:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:08:54,659:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:08:54,840:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:08:54,840:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:08:54,840:INFO:setup() successfully completed in 5.69s...............
2024-01-09 11:08:59,507:INFO:Initializing compare_models()
2024-01-09 11:08:59,507:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-01-09 11:08:59,507:INFO:Checking exceptions
2024-01-09 11:08:59,513:INFO:Preparing display monitor
2024-01-09 11:08:59,566:INFO:Initializing Logistic Regression
2024-01-09 11:08:59,566:INFO:Total runtime is 0.0 minutes
2024-01-09 11:08:59,576:INFO:SubProcess create_model() called ==================================
2024-01-09 11:08:59,578:INFO:Initializing create_model()
2024-01-09 11:08:59,578:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:08:59,578:INFO:Checking exceptions
2024-01-09 11:08:59,578:INFO:Importing libraries
2024-01-09 11:08:59,579:INFO:Copying training dataset
2024-01-09 11:08:59,586:INFO:Defining folds
2024-01-09 11:08:59,586:INFO:Declaring metric variables
2024-01-09 11:08:59,599:INFO:Importing untrained model
2024-01-09 11:08:59,607:INFO:Logistic Regression Imported successfully
2024-01-09 11:08:59,620:INFO:Starting cross validation
2024-01-09 11:08:59,664:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:09:10,216:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:10,246:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:10,304:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:10,352:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:11,798:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:11,801:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:11,801:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:11,841:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:11,841:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:11,851:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:11,851:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:11,851:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:11,851:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:12,262:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:12,293:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:12,324:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:12,729:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:12,736:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:12,743:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:13,150:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:13,162:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:13,169:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:13,202:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:13,202:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:13,216:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:13,282:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:13,297:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:13,297:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:13,474:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:13,728:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:13,800:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:14,218:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:14,234:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:14,242:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:14,517:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:14,526:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:14,535:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:14,609:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:14,617:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:14,617:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:14,617:INFO:Calculating mean and std
2024-01-09 11:09:14,632:INFO:Creating metrics dataframe
2024-01-09 11:09:14,632:INFO:Uploading results into container
2024-01-09 11:09:14,645:INFO:Uploading model into container now
2024-01-09 11:09:14,646:INFO:_master_model_container: 1
2024-01-09 11:09:14,646:INFO:_display_container: 2
2024-01-09 11:09:14,649:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=932, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-01-09 11:09:14,649:INFO:create_model() successfully completed......................................
2024-01-09 11:09:15,190:INFO:SubProcess create_model() end ==================================
2024-01-09 11:09:15,191:INFO:Creating metrics dataframe
2024-01-09 11:09:15,207:INFO:Initializing K Neighbors Classifier
2024-01-09 11:09:15,207:INFO:Total runtime is 0.26067625284194945 minutes
2024-01-09 11:09:15,215:INFO:SubProcess create_model() called ==================================
2024-01-09 11:09:15,215:INFO:Initializing create_model()
2024-01-09 11:09:15,215:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:09:15,215:INFO:Checking exceptions
2024-01-09 11:09:15,215:INFO:Importing libraries
2024-01-09 11:09:15,215:INFO:Copying training dataset
2024-01-09 11:09:15,222:INFO:Defining folds
2024-01-09 11:09:15,222:INFO:Declaring metric variables
2024-01-09 11:09:15,236:INFO:Importing untrained model
2024-01-09 11:09:15,240:INFO:K Neighbors Classifier Imported successfully
2024-01-09 11:09:15,261:INFO:Starting cross validation
2024-01-09 11:09:15,291:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:09:15,925:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:15,925:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:15,942:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:15,942:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:17,190:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:17,198:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:17,198:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:17,205:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:17,205:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:17,205:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:17,205:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:17,205:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:17,224:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:17,224:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:17,240:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:17,240:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:17,809:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:17,809:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:17,809:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:17,858:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:19,043:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:19,046:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:19,046:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:19,046:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:19,061:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:19,061:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:19,061:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:19,078:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:19,078:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:19,109:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:19,109:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:19,125:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:19,582:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:19,614:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:20,424:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:20,440:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:20,440:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:20,466:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:20,466:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:20,466:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:20,482:INFO:Calculating mean and std
2024-01-09 11:09:20,482:INFO:Creating metrics dataframe
2024-01-09 11:09:20,502:INFO:Uploading results into container
2024-01-09 11:09:20,504:INFO:Uploading model into container now
2024-01-09 11:09:20,505:INFO:_master_model_container: 2
2024-01-09 11:09:20,505:INFO:_display_container: 2
2024-01-09 11:09:20,506:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-01-09 11:09:20,506:INFO:create_model() successfully completed......................................
2024-01-09 11:09:20,998:INFO:SubProcess create_model() end ==================================
2024-01-09 11:09:20,998:INFO:Creating metrics dataframe
2024-01-09 11:09:21,014:INFO:Initializing Naive Bayes
2024-01-09 11:09:21,014:INFO:Total runtime is 0.3574641187985738 minutes
2024-01-09 11:09:21,025:INFO:SubProcess create_model() called ==================================
2024-01-09 11:09:21,025:INFO:Initializing create_model()
2024-01-09 11:09:21,025:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:09:21,025:INFO:Checking exceptions
2024-01-09 11:09:21,025:INFO:Importing libraries
2024-01-09 11:09:21,025:INFO:Copying training dataset
2024-01-09 11:09:21,033:INFO:Defining folds
2024-01-09 11:09:21,033:INFO:Declaring metric variables
2024-01-09 11:09:21,043:INFO:Importing untrained model
2024-01-09 11:09:21,049:INFO:Naive Bayes Imported successfully
2024-01-09 11:09:21,068:INFO:Starting cross validation
2024-01-09 11:09:21,100:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:09:21,747:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:21,762:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:21,762:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:21,778:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:22,934:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:22,949:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:22,953:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:22,967:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:22,967:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:22,983:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:22,984:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:22,984:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:22,984:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:22,999:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:22,999:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:22,999:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:23,560:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:23,575:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:23,575:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:23,608:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:24,720:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:24,720:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:24,737:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:24,753:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:24,767:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:24,767:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:24,767:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:24,767:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:24,783:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:24,801:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:24,801:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:24,818:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:25,223:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:25,270:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:26,034:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:26,052:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:26,053:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:26,094:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:26,094:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:26,109:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:26,125:INFO:Calculating mean and std
2024-01-09 11:09:26,125:INFO:Creating metrics dataframe
2024-01-09 11:09:26,145:INFO:Uploading results into container
2024-01-09 11:09:26,148:INFO:Uploading model into container now
2024-01-09 11:09:26,150:INFO:_master_model_container: 3
2024-01-09 11:09:26,150:INFO:_display_container: 2
2024-01-09 11:09:26,150:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-01-09 11:09:26,151:INFO:create_model() successfully completed......................................
2024-01-09 11:09:26,633:INFO:SubProcess create_model() end ==================================
2024-01-09 11:09:26,633:INFO:Creating metrics dataframe
2024-01-09 11:09:26,665:INFO:Initializing Decision Tree Classifier
2024-01-09 11:09:26,665:INFO:Total runtime is 0.45164124568303426 minutes
2024-01-09 11:09:26,676:INFO:SubProcess create_model() called ==================================
2024-01-09 11:09:26,683:INFO:Initializing create_model()
2024-01-09 11:09:26,683:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:09:26,684:INFO:Checking exceptions
2024-01-09 11:09:26,684:INFO:Importing libraries
2024-01-09 11:09:26,684:INFO:Copying training dataset
2024-01-09 11:09:26,686:INFO:Defining folds
2024-01-09 11:09:26,686:INFO:Declaring metric variables
2024-01-09 11:09:26,704:INFO:Importing untrained model
2024-01-09 11:09:26,710:INFO:Decision Tree Classifier Imported successfully
2024-01-09 11:09:26,730:INFO:Starting cross validation
2024-01-09 11:09:26,767:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:09:27,386:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:27,402:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:27,402:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:27,417:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:28,601:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:28,601:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:28,618:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:28,618:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:28,618:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:28,618:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:28,633:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:28,634:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:28,634:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:28,634:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:28,651:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:28,667:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:29,219:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:29,236:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:29,236:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:29,267:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:30,385:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:30,385:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:30,401:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:30,401:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:30,418:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:30,418:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:30,418:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:30,418:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:30,437:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:30,451:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:30,468:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:30,468:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:30,955:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:30,971:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:31,720:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:31,735:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:31,735:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:31,750:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:31,767:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:31,767:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:31,767:INFO:Calculating mean and std
2024-01-09 11:09:31,783:INFO:Creating metrics dataframe
2024-01-09 11:09:31,798:INFO:Uploading results into container
2024-01-09 11:09:31,801:INFO:Uploading model into container now
2024-01-09 11:09:31,803:INFO:_master_model_container: 4
2024-01-09 11:09:31,803:INFO:_display_container: 2
2024-01-09 11:09:31,804:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=932, splitter='best')
2024-01-09 11:09:31,804:INFO:create_model() successfully completed......................................
2024-01-09 11:09:32,289:INFO:SubProcess create_model() end ==================================
2024-01-09 11:09:32,289:INFO:Creating metrics dataframe
2024-01-09 11:09:32,321:INFO:Initializing SVM - Linear Kernel
2024-01-09 11:09:32,321:INFO:Total runtime is 0.5459082841873169 minutes
2024-01-09 11:09:32,327:INFO:SubProcess create_model() called ==================================
2024-01-09 11:09:32,327:INFO:Initializing create_model()
2024-01-09 11:09:32,327:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:09:32,333:INFO:Checking exceptions
2024-01-09 11:09:32,333:INFO:Importing libraries
2024-01-09 11:09:32,334:INFO:Copying training dataset
2024-01-09 11:09:32,342:INFO:Defining folds
2024-01-09 11:09:32,342:INFO:Declaring metric variables
2024-01-09 11:09:32,350:INFO:Importing untrained model
2024-01-09 11:09:32,354:INFO:SVM - Linear Kernel Imported successfully
2024-01-09 11:09:32,373:INFO:Starting cross validation
2024-01-09 11:09:32,403:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:09:33,027:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:33,043:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:33,043:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:33,060:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:34,237:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:09:34,240:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:09:34,242:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:34,243:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:34,246:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:09:34,246:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:34,246:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:34,246:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:34,246:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:34,246:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:34,261:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:34,269:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:34,277:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:09:34,277:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:34,277:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:34,308:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:34,844:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:34,860:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:34,860:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:34,907:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:35,989:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:09:35,989:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:36,002:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:36,011:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:36,035:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:09:36,035:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:36,051:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:36,054:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:09:36,054:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:36,054:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:36,068:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:36,068:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:36,099:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:09:36,099:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:36,099:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:36,117:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:36,462:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:36,477:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:37,285:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:09:37,285:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:37,285:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:37,302:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:37,302:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:09:37,302:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:37,317:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:37,317:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:37,333:INFO:Calculating mean and std
2024-01-09 11:09:37,333:INFO:Creating metrics dataframe
2024-01-09 11:09:37,354:INFO:Uploading results into container
2024-01-09 11:09:37,355:INFO:Uploading model into container now
2024-01-09 11:09:37,356:INFO:_master_model_container: 5
2024-01-09 11:09:37,356:INFO:_display_container: 2
2024-01-09 11:09:37,357:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=932, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-01-09 11:09:37,357:INFO:create_model() successfully completed......................................
2024-01-09 11:09:37,859:INFO:SubProcess create_model() end ==================================
2024-01-09 11:09:37,859:INFO:Creating metrics dataframe
2024-01-09 11:09:37,891:INFO:Initializing Ridge Classifier
2024-01-09 11:09:37,891:INFO:Total runtime is 0.638741099834442 minutes
2024-01-09 11:09:37,900:INFO:SubProcess create_model() called ==================================
2024-01-09 11:09:37,901:INFO:Initializing create_model()
2024-01-09 11:09:37,901:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:09:37,903:INFO:Checking exceptions
2024-01-09 11:09:37,903:INFO:Importing libraries
2024-01-09 11:09:37,903:INFO:Copying training dataset
2024-01-09 11:09:37,904:INFO:Defining folds
2024-01-09 11:09:37,904:INFO:Declaring metric variables
2024-01-09 11:09:37,918:INFO:Importing untrained model
2024-01-09 11:09:37,926:INFO:Ridge Classifier Imported successfully
2024-01-09 11:09:37,944:INFO:Starting cross validation
2024-01-09 11:09:37,984:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:09:38,587:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:38,603:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:38,618:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:38,618:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:39,769:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:09:39,769:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:39,784:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:39,784:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:39,800:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:09:39,815:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:39,815:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:09:39,815:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:39,815:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:09:39,815:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:39,815:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:39,831:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:39,831:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:39,831:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:39,831:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:39,831:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:40,389:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:40,420:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:40,420:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:40,436:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:41,571:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:09:41,571:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:41,585:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:41,585:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:41,585:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:09:41,601:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:41,601:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:09:41,601:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:41,617:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:41,617:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:41,617:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:41,617:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:41,632:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:09:41,632:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:41,648:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:41,648:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:42,040:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:42,071:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:42,785:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:09:42,801:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:42,802:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:42,818:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:42,837:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:09:42,837:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:42,837:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:42,853:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:42,853:INFO:Calculating mean and std
2024-01-09 11:09:42,868:INFO:Creating metrics dataframe
2024-01-09 11:09:42,870:INFO:Uploading results into container
2024-01-09 11:09:42,885:INFO:Uploading model into container now
2024-01-09 11:09:42,885:INFO:_master_model_container: 6
2024-01-09 11:09:42,885:INFO:_display_container: 2
2024-01-09 11:09:42,887:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=932, solver='auto',
                tol=0.0001)
2024-01-09 11:09:42,889:INFO:create_model() successfully completed......................................
2024-01-09 11:09:43,373:INFO:SubProcess create_model() end ==================================
2024-01-09 11:09:43,373:INFO:Creating metrics dataframe
2024-01-09 11:09:43,389:INFO:Initializing Random Forest Classifier
2024-01-09 11:09:43,389:INFO:Total runtime is 0.7303743362426757 minutes
2024-01-09 11:09:43,409:INFO:SubProcess create_model() called ==================================
2024-01-09 11:09:43,409:INFO:Initializing create_model()
2024-01-09 11:09:43,409:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:09:43,409:INFO:Checking exceptions
2024-01-09 11:09:43,409:INFO:Importing libraries
2024-01-09 11:09:43,409:INFO:Copying training dataset
2024-01-09 11:09:43,419:INFO:Defining folds
2024-01-09 11:09:43,419:INFO:Declaring metric variables
2024-01-09 11:09:43,430:INFO:Importing untrained model
2024-01-09 11:09:43,436:INFO:Random Forest Classifier Imported successfully
2024-01-09 11:09:43,457:INFO:Starting cross validation
2024-01-09 11:09:43,488:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:09:44,117:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:44,132:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:44,132:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:44,148:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:45,997:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:46,006:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:46,018:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:46,018:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:46,018:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:46,018:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:46,035:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:46,035:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:46,035:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:46,035:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:46,050:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:46,050:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:46,615:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:46,615:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:46,647:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:46,662:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:48,465:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:48,478:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:48,492:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:48,492:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:48,492:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:48,507:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:48,532:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:48,548:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:48,558:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:48,558:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:48,558:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:48,578:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:49,018:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:49,049:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:50,550:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:50,565:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:50,565:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:50,578:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:50,578:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:50,593:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:50,593:INFO:Calculating mean and std
2024-01-09 11:09:50,593:INFO:Creating metrics dataframe
2024-01-09 11:09:50,621:INFO:Uploading results into container
2024-01-09 11:09:50,624:INFO:Uploading model into container now
2024-01-09 11:09:50,625:INFO:_master_model_container: 7
2024-01-09 11:09:50,625:INFO:_display_container: 2
2024-01-09 11:09:50,628:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=932, verbose=0, warm_start=False)
2024-01-09 11:09:50,628:INFO:create_model() successfully completed......................................
2024-01-09 11:09:51,111:INFO:SubProcess create_model() end ==================================
2024-01-09 11:09:51,111:INFO:Creating metrics dataframe
2024-01-09 11:09:51,127:INFO:Initializing Quadratic Discriminant Analysis
2024-01-09 11:09:51,127:INFO:Total runtime is 0.8593426386515298 minutes
2024-01-09 11:09:51,146:INFO:SubProcess create_model() called ==================================
2024-01-09 11:09:51,146:INFO:Initializing create_model()
2024-01-09 11:09:51,146:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:09:51,146:INFO:Checking exceptions
2024-01-09 11:09:51,146:INFO:Importing libraries
2024-01-09 11:09:51,146:INFO:Copying training dataset
2024-01-09 11:09:51,155:INFO:Defining folds
2024-01-09 11:09:51,155:INFO:Declaring metric variables
2024-01-09 11:09:51,164:INFO:Importing untrained model
2024-01-09 11:09:51,171:INFO:Quadratic Discriminant Analysis Imported successfully
2024-01-09 11:09:51,191:INFO:Starting cross validation
2024-01-09 11:09:51,221:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:09:51,842:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:51,858:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:51,858:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:51,873:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:53,036:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:53,036:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:53,053:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:53,053:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:53,053:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:53,053:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:53,053:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:53,053:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:53,070:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:53,070:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:53,070:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:53,085:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:53,660:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:53,661:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:53,661:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:53,677:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:54,520:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:54,520:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:54,520:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:54,537:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:54,537:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:54,537:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:54,537:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:54,552:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:54,552:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:54,552:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:54,568:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:54,568:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:55,023:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:55,038:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:55,736:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:55,752:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:55,752:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:55,752:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:55,752:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:55,767:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:55,783:INFO:Calculating mean and std
2024-01-09 11:09:55,783:INFO:Creating metrics dataframe
2024-01-09 11:09:55,783:INFO:Uploading results into container
2024-01-09 11:09:55,797:INFO:Uploading model into container now
2024-01-09 11:09:55,798:INFO:_master_model_container: 8
2024-01-09 11:09:55,798:INFO:_display_container: 2
2024-01-09 11:09:55,798:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-01-09 11:09:55,798:INFO:create_model() successfully completed......................................
2024-01-09 11:09:56,278:INFO:SubProcess create_model() end ==================================
2024-01-09 11:09:56,278:INFO:Creating metrics dataframe
2024-01-09 11:09:56,310:INFO:Initializing Ada Boost Classifier
2024-01-09 11:09:56,310:INFO:Total runtime is 0.9457241217295328 minutes
2024-01-09 11:09:56,321:INFO:SubProcess create_model() called ==================================
2024-01-09 11:09:56,321:INFO:Initializing create_model()
2024-01-09 11:09:56,321:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:09:56,321:INFO:Checking exceptions
2024-01-09 11:09:56,321:INFO:Importing libraries
2024-01-09 11:09:56,321:INFO:Copying training dataset
2024-01-09 11:09:56,329:INFO:Defining folds
2024-01-09 11:09:56,329:INFO:Declaring metric variables
2024-01-09 11:09:56,339:INFO:Importing untrained model
2024-01-09 11:09:56,346:INFO:Ada Boost Classifier Imported successfully
2024-01-09 11:09:56,363:INFO:Starting cross validation
2024-01-09 11:09:56,392:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:09:57,040:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:57,040:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:57,040:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:57,056:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:58,204:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:58,212:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:58,220:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:58,238:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:58,238:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:58,238:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:58,238:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:58,254:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:58,254:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:58,270:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:58,286:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:58,286:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:58,830:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:58,830:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:58,861:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:58,892:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:09:59,966:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:59,981:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:59,981:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:59,997:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:09:59,997:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:00,013:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:00,044:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:00,077:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:00,077:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:00,077:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:00,093:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:00,093:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:00,519:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:00,537:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:01,483:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:01,487:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:01,487:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:01,518:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:01,518:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:01,518:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:01,534:INFO:Calculating mean and std
2024-01-09 11:10:01,534:INFO:Creating metrics dataframe
2024-01-09 11:10:01,534:INFO:Uploading results into container
2024-01-09 11:10:01,550:INFO:Uploading model into container now
2024-01-09 11:10:01,551:INFO:_master_model_container: 9
2024-01-09 11:10:01,552:INFO:_display_container: 2
2024-01-09 11:10:01,553:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=932)
2024-01-09 11:10:01,553:INFO:create_model() successfully completed......................................
2024-01-09 11:10:02,036:INFO:SubProcess create_model() end ==================================
2024-01-09 11:10:02,036:INFO:Creating metrics dataframe
2024-01-09 11:10:02,067:INFO:Initializing Gradient Boosting Classifier
2024-01-09 11:10:02,067:INFO:Total runtime is 1.0416884104410806 minutes
2024-01-09 11:10:02,076:INFO:SubProcess create_model() called ==================================
2024-01-09 11:10:02,076:INFO:Initializing create_model()
2024-01-09 11:10:02,076:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:10:02,082:INFO:Checking exceptions
2024-01-09 11:10:02,082:INFO:Importing libraries
2024-01-09 11:10:02,082:INFO:Copying training dataset
2024-01-09 11:10:02,087:INFO:Defining folds
2024-01-09 11:10:02,087:INFO:Declaring metric variables
2024-01-09 11:10:02,098:INFO:Importing untrained model
2024-01-09 11:10:02,105:INFO:Gradient Boosting Classifier Imported successfully
2024-01-09 11:10:02,125:INFO:Starting cross validation
2024-01-09 11:10:02,157:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:10:02,788:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:02,804:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:02,804:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:02,804:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:04,056:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:04,073:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:04,073:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:04,073:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:04,073:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:04,073:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:04,089:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:04,089:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:04,089:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:04,089:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:04,104:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:04,104:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:04,686:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:04,686:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:04,686:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:04,719:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:05,926:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:05,926:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:05,942:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:05,942:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:05,942:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:05,942:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:05,942:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:05,957:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:05,957:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:06,005:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:06,006:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:06,006:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:06,478:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:06,494:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:07,634:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:07,649:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:07,649:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:07,649:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:07,666:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:07,666:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:07,682:INFO:Calculating mean and std
2024-01-09 11:10:07,682:INFO:Creating metrics dataframe
2024-01-09 11:10:07,697:INFO:Uploading results into container
2024-01-09 11:10:07,699:INFO:Uploading model into container now
2024-01-09 11:10:07,701:INFO:_master_model_container: 10
2024-01-09 11:10:07,701:INFO:_display_container: 2
2024-01-09 11:10:07,702:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=932, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-01-09 11:10:07,702:INFO:create_model() successfully completed......................................
2024-01-09 11:10:08,181:INFO:SubProcess create_model() end ==================================
2024-01-09 11:10:08,181:INFO:Creating metrics dataframe
2024-01-09 11:10:08,197:INFO:Initializing Linear Discriminant Analysis
2024-01-09 11:10:08,197:INFO:Total runtime is 1.1438419103622435 minutes
2024-01-09 11:10:08,220:INFO:SubProcess create_model() called ==================================
2024-01-09 11:10:08,220:INFO:Initializing create_model()
2024-01-09 11:10:08,220:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:10:08,220:INFO:Checking exceptions
2024-01-09 11:10:08,220:INFO:Importing libraries
2024-01-09 11:10:08,220:INFO:Copying training dataset
2024-01-09 11:10:08,224:INFO:Defining folds
2024-01-09 11:10:08,224:INFO:Declaring metric variables
2024-01-09 11:10:08,235:INFO:Importing untrained model
2024-01-09 11:10:08,241:INFO:Linear Discriminant Analysis Imported successfully
2024-01-09 11:10:08,265:INFO:Starting cross validation
2024-01-09 11:10:08,307:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:10:08,923:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:08,939:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:08,954:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:08,954:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:09,772:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:09,787:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:09,788:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:09,788:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:09,805:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:09,807:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:09,807:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:09,807:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:09,823:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:09,838:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:09,838:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:10,392:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:10,408:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:10,424:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:10,455:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:11,245:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:11,255:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:11,255:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:11,290:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:11,308:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:11,308:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:11,324:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:11,340:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:11,349:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:11,781:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:11,797:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:12,454:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:12,470:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:12,470:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:12,470:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:12,470:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:12,486:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:12,501:INFO:Calculating mean and std
2024-01-09 11:10:12,501:INFO:Creating metrics dataframe
2024-01-09 11:10:12,517:INFO:Uploading results into container
2024-01-09 11:10:12,519:INFO:Uploading model into container now
2024-01-09 11:10:12,520:INFO:_master_model_container: 11
2024-01-09 11:10:12,520:INFO:_display_container: 2
2024-01-09 11:10:12,520:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-01-09 11:10:12,520:INFO:create_model() successfully completed......................................
2024-01-09 11:10:12,998:INFO:SubProcess create_model() end ==================================
2024-01-09 11:10:12,998:INFO:Creating metrics dataframe
2024-01-09 11:10:13,029:INFO:Initializing Extra Trees Classifier
2024-01-09 11:10:13,029:INFO:Total runtime is 1.2243851701418558 minutes
2024-01-09 11:10:13,041:INFO:SubProcess create_model() called ==================================
2024-01-09 11:10:13,041:INFO:Initializing create_model()
2024-01-09 11:10:13,041:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:10:13,041:INFO:Checking exceptions
2024-01-09 11:10:13,041:INFO:Importing libraries
2024-01-09 11:10:13,041:INFO:Copying training dataset
2024-01-09 11:10:13,047:INFO:Defining folds
2024-01-09 11:10:13,047:INFO:Declaring metric variables
2024-01-09 11:10:13,057:INFO:Importing untrained model
2024-01-09 11:10:13,060:INFO:Extra Trees Classifier Imported successfully
2024-01-09 11:10:13,079:INFO:Starting cross validation
2024-01-09 11:10:13,122:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:10:13,745:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:13,745:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:13,762:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:13,762:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:15,129:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:15,136:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:15,136:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:15,145:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:15,145:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:15,145:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:15,145:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:15,161:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:15,161:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:15,192:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:15,209:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:15,209:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:15,744:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:15,760:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:15,760:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:15,822:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:17,206:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:17,206:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:17,222:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:17,222:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:17,235:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:17,235:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:17,235:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:17,251:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:17,251:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:17,429:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:17,447:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:17,452:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:17,836:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:17,836:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:18,931:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:18,931:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:18,931:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:18,947:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:18,947:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:18,947:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:18,947:INFO:Calculating mean and std
2024-01-09 11:10:18,963:INFO:Creating metrics dataframe
2024-01-09 11:10:18,963:INFO:Uploading results into container
2024-01-09 11:10:18,974:INFO:Uploading model into container now
2024-01-09 11:10:18,976:INFO:_master_model_container: 12
2024-01-09 11:10:18,976:INFO:_display_container: 2
2024-01-09 11:10:18,977:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=932, verbose=0, warm_start=False)
2024-01-09 11:10:18,977:INFO:create_model() successfully completed......................................
2024-01-09 11:10:19,466:INFO:SubProcess create_model() end ==================================
2024-01-09 11:10:19,466:INFO:Creating metrics dataframe
2024-01-09 11:10:19,497:INFO:Initializing Extreme Gradient Boosting
2024-01-09 11:10:19,497:INFO:Total runtime is 1.3321785171826679 minutes
2024-01-09 11:10:19,504:INFO:SubProcess create_model() called ==================================
2024-01-09 11:10:19,504:INFO:Initializing create_model()
2024-01-09 11:10:19,504:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:10:19,504:INFO:Checking exceptions
2024-01-09 11:10:19,504:INFO:Importing libraries
2024-01-09 11:10:19,504:INFO:Copying training dataset
2024-01-09 11:10:19,512:INFO:Defining folds
2024-01-09 11:10:19,512:INFO:Declaring metric variables
2024-01-09 11:10:19,522:INFO:Importing untrained model
2024-01-09 11:10:19,527:INFO:Extreme Gradient Boosting Imported successfully
2024-01-09 11:10:19,545:INFO:Starting cross validation
2024-01-09 11:10:19,573:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:10:20,313:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:20,313:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:20,313:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:20,328:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:21,287:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:21,287:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:21,302:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:21,302:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:21,302:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:21,314:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:21,315:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:21,331:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:21,331:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:21,362:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:21,362:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:21,378:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:21,913:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:21,913:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:21,913:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:21,976:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:22,866:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:22,881:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:22,881:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:22,881:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:22,881:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:22,897:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:22,897:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:22,913:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:22,913:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:22,945:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:22,961:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:22,961:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:23,346:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:23,377:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:24,166:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:24,166:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:24,181:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:24,181:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:24,181:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:24,181:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:24,197:INFO:Calculating mean and std
2024-01-09 11:10:24,197:INFO:Creating metrics dataframe
2024-01-09 11:10:24,218:INFO:Uploading results into container
2024-01-09 11:10:24,220:INFO:Uploading model into container now
2024-01-09 11:10:24,222:INFO:_master_model_container: 13
2024-01-09 11:10:24,222:INFO:_display_container: 2
2024-01-09 11:10:24,224:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-01-09 11:10:24,224:INFO:create_model() successfully completed......................................
2024-01-09 11:10:24,710:INFO:SubProcess create_model() end ==================================
2024-01-09 11:10:24,711:INFO:Creating metrics dataframe
2024-01-09 11:10:24,727:INFO:Initializing Light Gradient Boosting Machine
2024-01-09 11:10:24,727:INFO:Total runtime is 1.4193513472874957 minutes
2024-01-09 11:10:24,745:INFO:SubProcess create_model() called ==================================
2024-01-09 11:10:24,745:INFO:Initializing create_model()
2024-01-09 11:10:24,746:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:10:24,746:INFO:Checking exceptions
2024-01-09 11:10:24,746:INFO:Importing libraries
2024-01-09 11:10:24,746:INFO:Copying training dataset
2024-01-09 11:10:24,746:INFO:Defining folds
2024-01-09 11:10:24,754:INFO:Declaring metric variables
2024-01-09 11:10:24,760:INFO:Importing untrained model
2024-01-09 11:10:24,768:INFO:Light Gradient Boosting Machine Imported successfully
2024-01-09 11:10:24,785:INFO:Starting cross validation
2024-01-09 11:10:24,823:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:10:25,437:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:25,453:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:25,453:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:25,468:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:26,506:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:26,509:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:26,523:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:26,525:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:26,539:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:26,540:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:26,540:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:26,540:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:26,557:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:26,578:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:26,594:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:26,594:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:27,129:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:27,145:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:27,145:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:27,191:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:28,209:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:28,209:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:28,226:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:28,226:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:28,239:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:28,239:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:28,239:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:28,259:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:28,259:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:28,324:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:28,339:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:28,339:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:28,813:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:28,845:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:29,823:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:29,823:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:29,839:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:29,839:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:29,855:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:29,868:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:29,880:INFO:Calculating mean and std
2024-01-09 11:10:29,880:INFO:Creating metrics dataframe
2024-01-09 11:10:29,906:INFO:Uploading results into container
2024-01-09 11:10:29,906:INFO:Uploading model into container now
2024-01-09 11:10:29,908:INFO:_master_model_container: 14
2024-01-09 11:10:29,909:INFO:_display_container: 2
2024-01-09 11:10:29,910:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=932, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-01-09 11:10:29,910:INFO:create_model() successfully completed......................................
2024-01-09 11:10:30,467:INFO:SubProcess create_model() end ==================================
2024-01-09 11:10:30,467:INFO:Creating metrics dataframe
2024-01-09 11:10:30,500:INFO:Initializing CatBoost Classifier
2024-01-09 11:10:30,500:INFO:Total runtime is 1.5155588746070858 minutes
2024-01-09 11:10:30,517:INFO:SubProcess create_model() called ==================================
2024-01-09 11:10:30,517:INFO:Initializing create_model()
2024-01-09 11:10:30,517:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:10:30,517:INFO:Checking exceptions
2024-01-09 11:10:30,517:INFO:Importing libraries
2024-01-09 11:10:30,517:INFO:Copying training dataset
2024-01-09 11:10:30,525:INFO:Defining folds
2024-01-09 11:10:30,525:INFO:Declaring metric variables
2024-01-09 11:10:30,534:INFO:Importing untrained model
2024-01-09 11:10:30,540:INFO:CatBoost Classifier Imported successfully
2024-01-09 11:10:30,559:INFO:Starting cross validation
2024-01-09 11:10:30,600:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:10:33,035:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:33,051:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:33,051:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:33,082:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:45,621:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:45,621:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:45,621:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:45,662:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:45,666:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:45,666:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:45,837:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:45,852:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:45,852:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:46,000:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:46,000:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:46,017:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:46,284:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:46,299:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:46,456:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:46,666:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:58,387:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:58,387:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:58,402:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:58,657:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:58,657:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:58,672:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:58,986:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:59,233:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:10:59,594:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:59,613:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:59,613:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:59,775:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:59,779:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:10:59,792:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:06,589:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:06,589:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:06,605:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:06,777:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:06,777:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:06,777:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:06,792:INFO:Calculating mean and std
2024-01-09 11:11:06,792:INFO:Creating metrics dataframe
2024-01-09 11:11:06,807:INFO:Uploading results into container
2024-01-09 11:11:06,811:INFO:Uploading model into container now
2024-01-09 11:11:06,812:INFO:_master_model_container: 15
2024-01-09 11:11:06,812:INFO:_display_container: 2
2024-01-09 11:11:06,812:INFO:<catboost.core.CatBoostClassifier object at 0x0000025FE9EED010>
2024-01-09 11:11:06,812:INFO:create_model() successfully completed......................................
2024-01-09 11:11:07,290:INFO:SubProcess create_model() end ==================================
2024-01-09 11:11:07,290:INFO:Creating metrics dataframe
2024-01-09 11:11:07,336:INFO:Initializing Dummy Classifier
2024-01-09 11:11:07,336:INFO:Total runtime is 2.1295051932334896 minutes
2024-01-09 11:11:07,345:INFO:SubProcess create_model() called ==================================
2024-01-09 11:11:07,345:INFO:Initializing create_model()
2024-01-09 11:11:07,345:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0109D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:11:07,345:INFO:Checking exceptions
2024-01-09 11:11:07,345:INFO:Importing libraries
2024-01-09 11:11:07,345:INFO:Copying training dataset
2024-01-09 11:11:07,353:INFO:Defining folds
2024-01-09 11:11:07,353:INFO:Declaring metric variables
2024-01-09 11:11:07,360:INFO:Importing untrained model
2024-01-09 11:11:07,365:INFO:Dummy Classifier Imported successfully
2024-01-09 11:11:07,381:INFO:Starting cross validation
2024-01-09 11:11:07,427:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:11:08,044:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:11:08,060:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:11:08,076:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:11:08,091:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:11:08,917:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:08,928:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:08,928:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:11:08,945:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:08,946:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:08,946:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:08,962:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:08,962:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:11:08,962:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:08,962:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:08,962:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:11:08,978:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:09,013:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:09,013:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:09,029:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:11:09,030:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:09,558:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:11:09,558:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:11:09,621:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:11:10,412:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:10,431:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:10,434:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:10,435:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:11:10,435:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:10,444:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:10,445:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:11:10,445:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:10,445:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:10,445:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:10,461:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:11:10,463:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:10,531:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:10,546:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:10,546:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:11:10,562:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:10,894:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:11:10,894:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
  warnings.warn(

2024-01-09 11:11:11,528:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:11,528:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:11,528:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:11,528:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:11:11,544:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:11,544:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:11,544:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:11:11,544:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:11:11,561:INFO:Calculating mean and std
2024-01-09 11:11:11,577:INFO:Creating metrics dataframe
2024-01-09 11:11:11,589:INFO:Uploading results into container
2024-01-09 11:11:11,592:INFO:Uploading model into container now
2024-01-09 11:11:11,593:INFO:_master_model_container: 16
2024-01-09 11:11:11,593:INFO:_display_container: 2
2024-01-09 11:11:11,594:INFO:DummyClassifier(constant=None, random_state=932, strategy='prior')
2024-01-09 11:11:11,594:INFO:create_model() successfully completed......................................
2024-01-09 11:11:12,073:INFO:SubProcess create_model() end ==================================
2024-01-09 11:11:12,073:INFO:Creating metrics dataframe
2024-01-09 11:11:12,133:INFO:Initializing create_model()
2024-01-09 11:11:12,133:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE86B8710>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=932, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:11:12,133:INFO:Checking exceptions
2024-01-09 11:11:12,141:INFO:Importing libraries
2024-01-09 11:11:12,141:INFO:Copying training dataset
2024-01-09 11:11:12,144:INFO:Defining folds
2024-01-09 11:11:12,144:INFO:Declaring metric variables
2024-01-09 11:11:12,144:INFO:Importing untrained model
2024-01-09 11:11:12,144:INFO:Declaring custom model
2024-01-09 11:11:12,148:INFO:Extra Trees Classifier Imported successfully
2024-01-09 11:11:12,183:INFO:Cross validation set to False
2024-01-09 11:11:12,183:INFO:Fitting Model
2024-01-09 11:11:12,535:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names
2024-01-09 11:11:12,535:WARNING:  warnings.warn(
2024-01-09 11:11:12,996:INFO:[LightGBM] [Info] Number of positive: 70, number of negative: 70
2024-01-09 11:11:12,996:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000550 seconds.
2024-01-09 11:11:12,996:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-01-09 11:11:12,996:INFO:[LightGBM] [Info] Total Bins 2705
2024-01-09 11:11:12,996:INFO:[LightGBM] [Info] Number of data points in the train set: 140, number of used features: 58
2024-01-09 11:11:12,996:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2024-01-09 11:11:12,996:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:12,996:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:12,996:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:12,996:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,043:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,074:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:11:13,473:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=932, verbose=0, warm_start=False)
2024-01-09 11:11:13,474:INFO:create_model() successfully completed......................................
2024-01-09 11:11:14,036:INFO:_master_model_container: 16
2024-01-09 11:11:14,036:INFO:_display_container: 2
2024-01-09 11:11:14,039:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=932, verbose=0, warm_start=False)
2024-01-09 11:11:14,039:INFO:compare_models() successfully completed......................................
2024-01-09 11:22:18,763:INFO:PyCaret ClassificationExperiment
2024-01-09 11:22:18,763:INFO:Logging name: clf-default-name
2024-01-09 11:22:18,763:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-01-09 11:22:18,763:INFO:version 3.2.0
2024-01-09 11:22:18,763:INFO:Initializing setup()
2024-01-09 11:22:18,763:INFO:self.USI: 7759
2024-01-09 11:22:18,763:INFO:self._variable_keys: {'n_jobs_param', 'logging_param', '_available_plots', 'target_param', 'seed', 'y', 'fold_shuffle_param', 'fix_imbalance', 'pipeline', 'is_multiclass', 'log_plots_param', 'exp_name_log', 'memory', 'USI', 'html_param', 'X', 'idx', 'data', 'fold_groups_param', '_ml_usecase', 'fold_generator', 'gpu_n_jobs_param', 'exp_id', 'y_test', 'y_train', 'X_test', 'X_train', 'gpu_param'}
2024-01-09 11:22:18,763:INFO:Checking environment
2024-01-09 11:22:18,763:INFO:python_version: 3.11.5
2024-01-09 11:22:18,763:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-01-09 11:22:18,763:INFO:machine: AMD64
2024-01-09 11:22:18,763:INFO:platform: Windows-10-10.0.19045-SP0
2024-01-09 11:22:18,763:INFO:Memory: svmem(total=8464732160, available=4748754944, percent=43.9, used=3715977216, free=4748754944)
2024-01-09 11:22:18,763:INFO:Physical Core: 2
2024-01-09 11:22:18,763:INFO:Logical Core: 4
2024-01-09 11:22:18,763:INFO:Checking libraries
2024-01-09 11:22:18,763:INFO:System:
2024-01-09 11:22:18,763:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-01-09 11:22:18,763:INFO:executable: C:\Users\HP\anaconda3\python.exe
2024-01-09 11:22:18,763:INFO:   machine: Windows-10-10.0.19045-SP0
2024-01-09 11:22:18,763:INFO:PyCaret required dependencies:
2024-01-09 11:22:18,763:INFO:                 pip: 23.2.1
2024-01-09 11:22:18,763:INFO:          setuptools: 68.0.0
2024-01-09 11:22:18,763:INFO:             pycaret: 3.2.0
2024-01-09 11:22:18,763:INFO:             IPython: 8.15.0
2024-01-09 11:22:18,763:INFO:          ipywidgets: 8.0.4
2024-01-09 11:22:18,763:INFO:                tqdm: 4.65.0
2024-01-09 11:22:18,763:INFO:               numpy: 1.24.3
2024-01-09 11:22:18,763:INFO:              pandas: 1.5.3
2024-01-09 11:22:18,763:INFO:              jinja2: 3.1.2
2024-01-09 11:22:18,763:INFO:               scipy: 1.11.1
2024-01-09 11:22:18,763:INFO:              joblib: 1.1.1
2024-01-09 11:22:18,771:INFO:             sklearn: 1.2.2
2024-01-09 11:22:18,771:INFO:                pyod: 1.1.2
2024-01-09 11:22:18,771:INFO:            imblearn: 0.11.0
2024-01-09 11:22:18,771:INFO:   category_encoders: 2.6.3
2024-01-09 11:22:18,771:INFO:            lightgbm: 4.2.0
2024-01-09 11:22:18,771:INFO:               numba: 0.57.1
2024-01-09 11:22:18,771:INFO:            requests: 2.31.0
2024-01-09 11:22:18,771:INFO:          matplotlib: 3.6.0
2024-01-09 11:22:18,771:INFO:          scikitplot: 0.3.7
2024-01-09 11:22:18,771:INFO:         yellowbrick: 1.5
2024-01-09 11:22:18,771:INFO:              plotly: 5.9.0
2024-01-09 11:22:18,771:INFO:    plotly-resampler: Not installed
2024-01-09 11:22:18,771:INFO:             kaleido: 0.2.1
2024-01-09 11:22:18,771:INFO:           schemdraw: 0.15
2024-01-09 11:22:18,771:INFO:         statsmodels: 0.14.0
2024-01-09 11:22:18,771:INFO:              sktime: 0.21.1
2024-01-09 11:22:18,771:INFO:               tbats: 1.1.3
2024-01-09 11:22:18,771:INFO:            pmdarima: 2.0.4
2024-01-09 11:22:18,771:INFO:              psutil: 5.9.0
2024-01-09 11:22:18,771:INFO:          markupsafe: 2.1.1
2024-01-09 11:22:18,771:INFO:             pickle5: Not installed
2024-01-09 11:22:18,771:INFO:         cloudpickle: 2.2.1
2024-01-09 11:22:18,771:INFO:         deprecation: 2.1.0
2024-01-09 11:22:18,771:INFO:              xxhash: 2.0.2
2024-01-09 11:22:18,771:INFO:           wurlitzer: Not installed
2024-01-09 11:22:18,771:INFO:PyCaret optional dependencies:
2024-01-09 11:22:18,771:INFO:                shap: 0.44.0
2024-01-09 11:22:18,771:INFO:           interpret: 0.5.0
2024-01-09 11:22:18,771:INFO:                umap: 0.5.5
2024-01-09 11:22:18,771:INFO:     ydata_profiling: 4.6.0
2024-01-09 11:22:18,771:INFO:  explainerdashboard: 0.4.5
2024-01-09 11:22:18,771:INFO:             autoviz: Not installed
2024-01-09 11:22:18,771:INFO:           fairlearn: 0.7.0
2024-01-09 11:22:18,771:INFO:          deepchecks: Not installed
2024-01-09 11:22:18,771:INFO:             xgboost: 2.0.3
2024-01-09 11:22:18,771:INFO:            catboost: 1.2.2
2024-01-09 11:22:18,771:INFO:              kmodes: 0.12.2
2024-01-09 11:22:18,771:INFO:             mlxtend: 0.23.0
2024-01-09 11:22:18,771:INFO:       statsforecast: 1.5.0
2024-01-09 11:22:18,771:INFO:        tune_sklearn: Not installed
2024-01-09 11:22:18,771:INFO:                 ray: Not installed
2024-01-09 11:22:18,771:INFO:            hyperopt: 0.2.7
2024-01-09 11:22:18,771:INFO:              optuna: 3.5.0
2024-01-09 11:22:18,771:INFO:               skopt: 0.9.0
2024-01-09 11:22:18,771:INFO:              mlflow: 1.30.1
2024-01-09 11:22:18,771:INFO:              gradio: 3.50.2
2024-01-09 11:22:18,771:INFO:             fastapi: 0.108.0
2024-01-09 11:22:18,771:INFO:             uvicorn: 0.25.0
2024-01-09 11:22:18,771:INFO:              m2cgen: 0.10.0
2024-01-09 11:22:18,771:INFO:           evidently: 0.2.8
2024-01-09 11:22:18,771:INFO:               fugue: 0.8.6
2024-01-09 11:22:18,771:INFO:           streamlit: Not installed
2024-01-09 11:22:18,771:INFO:             prophet: Not installed
2024-01-09 11:22:18,771:INFO:None
2024-01-09 11:22:18,771:INFO:Set up data.
2024-01-09 11:22:18,797:INFO:Set up folding strategy.
2024-01-09 11:22:18,797:INFO:Set up train/test split.
2024-01-09 11:22:18,812:INFO:Set up index.
2024-01-09 11:22:18,812:INFO:Assigning column types.
2024-01-09 11:22:18,812:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-01-09 11:22:18,917:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-09 11:22:18,917:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:22:18,999:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:22:18,999:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:22:19,110:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-09 11:22:19,110:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:22:19,173:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:22:19,188:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:22:19,188:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-01-09 11:22:19,285:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:22:19,347:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:22:19,364:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:22:19,474:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:22:19,539:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:22:19,539:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:22:19,539:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-01-09 11:22:19,717:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:22:19,732:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:22:19,996:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:22:20,004:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:22:20,004:INFO:Preparing preprocessing pipeline...
2024-01-09 11:22:20,004:INFO:Set up label encoding.
2024-01-09 11:22:20,004:INFO:Set up simple imputation.
2024-01-09 11:22:20,004:INFO:Set up removing multicollinearity.
2024-01-09 11:22:20,004:INFO:Set up feature selection.
2024-01-09 11:22:20,173:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:22:20,189:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:22:20,382:INFO:Finished creating preprocessing pipeline.
2024-01-09 11:22:20,445:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\HP\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21', '22...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=12,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2024-01-09 11:22:20,445:INFO:Creating final display dataframe.
2024-01-09 11:22:21,035:INFO:Setup _display_container:                     Description             Value
0                    Session id              7136
1                        Target                60
2                   Target type            Binary
3                Target mapping        M: 0, R: 1
4           Original data shape         (208, 61)
5        Transformed data shape         (208, 13)
6   Transformed train set shape         (145, 13)
7    Transformed test set shape          (63, 13)
8              Numeric features                60
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Remove multicollinearity              True
14  Multicollinearity threshold               0.9
15            Feature selection              True
16     Feature selection method           classic
17  Feature selection estimator          lightgbm
18  Number of features selected               0.2
19               Fold Generator   StratifiedKFold
20                  Fold Number                10
21                     CPU Jobs                -1
22                      Use GPU             False
23               Log Experiment             False
24              Experiment Name  clf-default-name
25                          USI              7759
2024-01-09 11:22:21,241:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:22:21,241:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:22:21,414:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:22:21,414:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:22:21,430:INFO:setup() successfully completed in 2.74s...............
2024-01-09 11:22:36,158:INFO:Initializing compare_models()
2024-01-09 11:22:36,158:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-01-09 11:22:36,159:INFO:Checking exceptions
2024-01-09 11:22:36,164:INFO:Preparing display monitor
2024-01-09 11:22:36,236:INFO:Initializing Logistic Regression
2024-01-09 11:22:36,236:INFO:Total runtime is 0.0 minutes
2024-01-09 11:22:36,248:INFO:SubProcess create_model() called ==================================
2024-01-09 11:22:36,249:INFO:Initializing create_model()
2024-01-09 11:22:36,249:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:22:36,249:INFO:Checking exceptions
2024-01-09 11:22:36,249:INFO:Importing libraries
2024-01-09 11:22:36,250:INFO:Copying training dataset
2024-01-09 11:22:36,257:INFO:Defining folds
2024-01-09 11:22:36,257:INFO:Declaring metric variables
2024-01-09 11:22:36,269:INFO:Importing untrained model
2024-01-09 11:22:36,275:INFO:Logistic Regression Imported successfully
2024-01-09 11:22:36,300:INFO:Starting cross validation
2024-01-09 11:22:36,314:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:22:46,656:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:46,656:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:46,666:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:46,666:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:46,666:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:46,666:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:46,681:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:46,694:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:46,699:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:46,785:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:46,785:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:46,801:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,200:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,205:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,218:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,219:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,222:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,232:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,232:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,250:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,250:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,294:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,309:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,309:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,499:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,515:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,515:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,530:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,530:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,546:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:47,548:INFO:Calculating mean and std
2024-01-09 11:22:47,548:INFO:Creating metrics dataframe
2024-01-09 11:22:47,564:INFO:Uploading results into container
2024-01-09 11:22:47,569:INFO:Uploading model into container now
2024-01-09 11:22:47,570:INFO:_master_model_container: 1
2024-01-09 11:22:47,570:INFO:_display_container: 2
2024-01-09 11:22:47,572:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7136, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-01-09 11:22:47,572:INFO:create_model() successfully completed......................................
2024-01-09 11:22:48,082:INFO:SubProcess create_model() end ==================================
2024-01-09 11:22:48,082:INFO:Creating metrics dataframe
2024-01-09 11:22:48,098:INFO:Initializing K Neighbors Classifier
2024-01-09 11:22:48,098:INFO:Total runtime is 0.19769529501597086 minutes
2024-01-09 11:22:48,115:INFO:SubProcess create_model() called ==================================
2024-01-09 11:22:48,115:INFO:Initializing create_model()
2024-01-09 11:22:48,115:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:22:48,115:INFO:Checking exceptions
2024-01-09 11:22:48,115:INFO:Importing libraries
2024-01-09 11:22:48,115:INFO:Copying training dataset
2024-01-09 11:22:48,122:INFO:Defining folds
2024-01-09 11:22:48,122:INFO:Declaring metric variables
2024-01-09 11:22:48,132:INFO:Importing untrained model
2024-01-09 11:22:48,138:INFO:K Neighbors Classifier Imported successfully
2024-01-09 11:22:48,159:INFO:Starting cross validation
2024-01-09 11:22:48,171:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:22:48,629:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:48,629:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:48,629:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:48,629:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:48,642:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:48,644:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:48,646:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:48,650:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:48,650:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:48,682:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:48,695:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:48,695:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,091:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,098:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,099:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,099:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,099:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,116:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,117:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,134:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,135:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,186:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,186:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,204:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,453:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,467:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,467:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,467:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,482:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,482:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:49,498:INFO:Calculating mean and std
2024-01-09 11:22:49,498:INFO:Creating metrics dataframe
2024-01-09 11:22:49,512:INFO:Uploading results into container
2024-01-09 11:22:49,513:INFO:Uploading model into container now
2024-01-09 11:22:49,514:INFO:_master_model_container: 2
2024-01-09 11:22:49,514:INFO:_display_container: 2
2024-01-09 11:22:49,515:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-01-09 11:22:49,516:INFO:create_model() successfully completed......................................
2024-01-09 11:22:50,010:INFO:SubProcess create_model() end ==================================
2024-01-09 11:22:50,010:INFO:Creating metrics dataframe
2024-01-09 11:22:50,025:INFO:Initializing Naive Bayes
2024-01-09 11:22:50,025:INFO:Total runtime is 0.22982162237167358 minutes
2024-01-09 11:22:50,041:INFO:SubProcess create_model() called ==================================
2024-01-09 11:22:50,041:INFO:Initializing create_model()
2024-01-09 11:22:50,041:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:22:50,041:INFO:Checking exceptions
2024-01-09 11:22:50,041:INFO:Importing libraries
2024-01-09 11:22:50,041:INFO:Copying training dataset
2024-01-09 11:22:50,054:INFO:Defining folds
2024-01-09 11:22:50,055:INFO:Declaring metric variables
2024-01-09 11:22:50,061:INFO:Importing untrained model
2024-01-09 11:22:50,075:INFO:Naive Bayes Imported successfully
2024-01-09 11:22:50,089:INFO:Starting cross validation
2024-01-09 11:22:50,105:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:22:50,502:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,502:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,516:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,516:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,516:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,516:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,516:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,533:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,533:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,567:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,582:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,582:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,906:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,916:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,916:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,916:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,916:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,932:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,934:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,935:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,935:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,983:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,999:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:50,999:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:51,218:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:51,219:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:51,233:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:51,249:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:51,249:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:51,264:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:51,264:INFO:Calculating mean and std
2024-01-09 11:22:51,264:INFO:Creating metrics dataframe
2024-01-09 11:22:51,290:INFO:Uploading results into container
2024-01-09 11:22:51,291:INFO:Uploading model into container now
2024-01-09 11:22:51,291:INFO:_master_model_container: 3
2024-01-09 11:22:51,291:INFO:_display_container: 2
2024-01-09 11:22:51,291:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-01-09 11:22:51,291:INFO:create_model() successfully completed......................................
2024-01-09 11:22:51,783:INFO:SubProcess create_model() end ==================================
2024-01-09 11:22:51,783:INFO:Creating metrics dataframe
2024-01-09 11:22:51,814:INFO:Initializing Decision Tree Classifier
2024-01-09 11:22:51,814:INFO:Total runtime is 0.2596291343371073 minutes
2024-01-09 11:22:51,825:INFO:SubProcess create_model() called ==================================
2024-01-09 11:22:51,825:INFO:Initializing create_model()
2024-01-09 11:22:51,825:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:22:51,825:INFO:Checking exceptions
2024-01-09 11:22:51,825:INFO:Importing libraries
2024-01-09 11:22:51,825:INFO:Copying training dataset
2024-01-09 11:22:51,838:INFO:Defining folds
2024-01-09 11:22:51,839:INFO:Declaring metric variables
2024-01-09 11:22:51,846:INFO:Importing untrained model
2024-01-09 11:22:51,859:INFO:Decision Tree Classifier Imported successfully
2024-01-09 11:22:51,875:INFO:Starting cross validation
2024-01-09 11:22:51,887:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:22:52,300:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,300:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,315:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,315:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,315:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,315:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,315:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,331:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,331:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,331:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,347:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,347:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,700:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,700:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,700:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,716:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,716:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,716:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,716:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,732:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,732:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,749:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,765:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:52,765:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:53,032:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:53,033:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:53,033:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:53,050:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:53,050:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:53,066:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:53,066:INFO:Calculating mean and std
2024-01-09 11:22:53,066:INFO:Creating metrics dataframe
2024-01-09 11:22:53,089:INFO:Uploading results into container
2024-01-09 11:22:53,091:INFO:Uploading model into container now
2024-01-09 11:22:53,092:INFO:_master_model_container: 4
2024-01-09 11:22:53,092:INFO:_display_container: 2
2024-01-09 11:22:53,093:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7136, splitter='best')
2024-01-09 11:22:53,093:INFO:create_model() successfully completed......................................
2024-01-09 11:22:53,614:INFO:SubProcess create_model() end ==================================
2024-01-09 11:22:53,614:INFO:Creating metrics dataframe
2024-01-09 11:22:53,645:INFO:Initializing SVM - Linear Kernel
2024-01-09 11:22:53,645:INFO:Total runtime is 0.2901482423146566 minutes
2024-01-09 11:22:53,661:INFO:SubProcess create_model() called ==================================
2024-01-09 11:22:53,661:INFO:Initializing create_model()
2024-01-09 11:22:53,661:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:22:53,661:INFO:Checking exceptions
2024-01-09 11:22:53,661:INFO:Importing libraries
2024-01-09 11:22:53,661:INFO:Copying training dataset
2024-01-09 11:22:53,673:INFO:Defining folds
2024-01-09 11:22:53,674:INFO:Declaring metric variables
2024-01-09 11:22:53,684:INFO:Importing untrained model
2024-01-09 11:22:53,694:INFO:SVM - Linear Kernel Imported successfully
2024-01-09 11:22:53,708:INFO:Starting cross validation
2024-01-09 11:22:53,722:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:22:54,129:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:22:54,133:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:22:54,133:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,142:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,146:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,146:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,146:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:22:54,146:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,146:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,162:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,166:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,180:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:22:54,180:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,196:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,196:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,517:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:22:54,517:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:22:54,517:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,517:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,535:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,535:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,535:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,535:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:22:54,549:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,551:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,552:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,569:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,616:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:22:54,616:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,633:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,633:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,817:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:22:54,833:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,833:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,850:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,850:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:22:54,850:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,867:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,867:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:22:54,883:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:54,898:INFO:Calculating mean and std
2024-01-09 11:22:54,898:INFO:Creating metrics dataframe
2024-01-09 11:22:54,915:INFO:Uploading results into container
2024-01-09 11:22:54,917:INFO:Uploading model into container now
2024-01-09 11:22:54,918:INFO:_master_model_container: 5
2024-01-09 11:22:54,918:INFO:_display_container: 2
2024-01-09 11:22:54,920:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=7136, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-01-09 11:22:54,920:INFO:create_model() successfully completed......................................
2024-01-09 11:22:55,409:INFO:SubProcess create_model() end ==================================
2024-01-09 11:22:55,409:INFO:Creating metrics dataframe
2024-01-09 11:22:55,441:INFO:Initializing Ridge Classifier
2024-01-09 11:22:55,441:INFO:Total runtime is 0.32007710536321005 minutes
2024-01-09 11:22:55,454:INFO:SubProcess create_model() called ==================================
2024-01-09 11:22:55,454:INFO:Initializing create_model()
2024-01-09 11:22:55,454:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:22:55,454:INFO:Checking exceptions
2024-01-09 11:22:55,454:INFO:Importing libraries
2024-01-09 11:22:55,454:INFO:Copying training dataset
2024-01-09 11:22:55,465:INFO:Defining folds
2024-01-09 11:22:55,465:INFO:Declaring metric variables
2024-01-09 11:22:55,474:INFO:Importing untrained model
2024-01-09 11:22:55,485:INFO:Ridge Classifier Imported successfully
2024-01-09 11:22:55,501:INFO:Starting cross validation
2024-01-09 11:22:55,512:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:22:56,033:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:22:56,050:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,057:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,061:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:22:56,064:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,064:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,064:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,064:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,064:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,080:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,086:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,117:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:22:56,133:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,133:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,148:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,471:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:22:56,473:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,473:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:22:56,483:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,484:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,484:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:22:56,484:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,484:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,484:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,501:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,502:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,502:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,555:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:22:56,557:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,557:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,573:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,771:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:22:56,771:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,787:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,787:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,802:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:22:56,802:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,802:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,818:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:56,818:INFO:Calculating mean and std
2024-01-09 11:22:56,818:INFO:Creating metrics dataframe
2024-01-09 11:22:56,833:INFO:Uploading results into container
2024-01-09 11:22:56,840:INFO:Uploading model into container now
2024-01-09 11:22:56,841:INFO:_master_model_container: 6
2024-01-09 11:22:56,842:INFO:_display_container: 2
2024-01-09 11:22:56,842:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=7136, solver='auto',
                tol=0.0001)
2024-01-09 11:22:56,843:INFO:create_model() successfully completed......................................
2024-01-09 11:22:57,342:INFO:SubProcess create_model() end ==================================
2024-01-09 11:22:57,342:INFO:Creating metrics dataframe
2024-01-09 11:22:57,358:INFO:Initializing Random Forest Classifier
2024-01-09 11:22:57,358:INFO:Total runtime is 0.35202820698420206 minutes
2024-01-09 11:22:57,380:INFO:SubProcess create_model() called ==================================
2024-01-09 11:22:57,381:INFO:Initializing create_model()
2024-01-09 11:22:57,381:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:22:57,381:INFO:Checking exceptions
2024-01-09 11:22:57,382:INFO:Importing libraries
2024-01-09 11:22:57,382:INFO:Copying training dataset
2024-01-09 11:22:57,389:INFO:Defining folds
2024-01-09 11:22:57,389:INFO:Declaring metric variables
2024-01-09 11:22:57,399:INFO:Importing untrained model
2024-01-09 11:22:57,409:INFO:Random Forest Classifier Imported successfully
2024-01-09 11:22:57,429:INFO:Starting cross validation
2024-01-09 11:22:57,442:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:22:58,507:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:58,525:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:58,532:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:58,533:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:58,548:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:58,565:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:58,565:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:58,576:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:58,576:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:58,634:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:58,651:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:58,651:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:59,608:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:59,618:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:59,641:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:59,657:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:59,657:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:59,679:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:59,681:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:59,681:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:59,697:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:59,836:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:59,841:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:22:59,851:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:00,538:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:00,538:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:00,554:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:00,578:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:00,578:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:00,578:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:00,594:INFO:Calculating mean and std
2024-01-09 11:23:00,594:INFO:Creating metrics dataframe
2024-01-09 11:23:00,609:INFO:Uploading results into container
2024-01-09 11:23:00,613:INFO:Uploading model into container now
2024-01-09 11:23:00,615:INFO:_master_model_container: 7
2024-01-09 11:23:00,616:INFO:_display_container: 2
2024-01-09 11:23:00,617:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=7136, verbose=0, warm_start=False)
2024-01-09 11:23:00,618:INFO:create_model() successfully completed......................................
2024-01-09 11:23:01,128:INFO:SubProcess create_model() end ==================================
2024-01-09 11:23:01,128:INFO:Creating metrics dataframe
2024-01-09 11:23:01,143:INFO:Initializing Quadratic Discriminant Analysis
2024-01-09 11:23:01,143:INFO:Total runtime is 0.4151236971219381 minutes
2024-01-09 11:23:01,167:INFO:SubProcess create_model() called ==================================
2024-01-09 11:23:01,167:INFO:Initializing create_model()
2024-01-09 11:23:01,167:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:23:01,167:INFO:Checking exceptions
2024-01-09 11:23:01,167:INFO:Importing libraries
2024-01-09 11:23:01,167:INFO:Copying training dataset
2024-01-09 11:23:01,175:INFO:Defining folds
2024-01-09 11:23:01,175:INFO:Declaring metric variables
2024-01-09 11:23:01,182:INFO:Importing untrained model
2024-01-09 11:23:01,185:INFO:Quadratic Discriminant Analysis Imported successfully
2024-01-09 11:23:01,206:INFO:Starting cross validation
2024-01-09 11:23:01,219:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:23:01,706:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:01,717:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:01,717:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:01,717:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:01,733:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:01,733:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:01,733:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:01,733:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:01,749:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:01,749:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:01,764:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:01,764:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,136:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,136:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,151:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,152:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,152:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,152:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,152:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,152:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,167:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,183:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,200:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,201:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,434:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,435:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,450:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:02,466:INFO:Calculating mean and std
2024-01-09 11:23:02,466:INFO:Creating metrics dataframe
2024-01-09 11:23:02,483:INFO:Uploading results into container
2024-01-09 11:23:02,491:INFO:Uploading model into container now
2024-01-09 11:23:02,493:INFO:_master_model_container: 8
2024-01-09 11:23:02,493:INFO:_display_container: 2
2024-01-09 11:23:02,494:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-01-09 11:23:02,494:INFO:create_model() successfully completed......................................
2024-01-09 11:23:02,991:INFO:SubProcess create_model() end ==================================
2024-01-09 11:23:02,991:INFO:Creating metrics dataframe
2024-01-09 11:23:03,007:INFO:Initializing Ada Boost Classifier
2024-01-09 11:23:03,007:INFO:Total runtime is 0.44618178606033326 minutes
2024-01-09 11:23:03,028:INFO:SubProcess create_model() called ==================================
2024-01-09 11:23:03,029:INFO:Initializing create_model()
2024-01-09 11:23:03,029:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:23:03,029:INFO:Checking exceptions
2024-01-09 11:23:03,029:INFO:Importing libraries
2024-01-09 11:23:03,029:INFO:Copying training dataset
2024-01-09 11:23:03,039:INFO:Defining folds
2024-01-09 11:23:03,042:INFO:Declaring metric variables
2024-01-09 11:23:03,066:INFO:Importing untrained model
2024-01-09 11:23:03,082:INFO:Ada Boost Classifier Imported successfully
2024-01-09 11:23:03,094:INFO:Starting cross validation
2024-01-09 11:23:03,112:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:23:03,811:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:03,826:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:03,826:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:03,826:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:03,848:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:03,848:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:03,848:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:03,865:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:03,865:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:03,865:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:03,884:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:03,885:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:04,532:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:04,532:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:04,548:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:04,548:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:04,548:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:04,548:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:04,579:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:04,595:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:04,595:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:04,612:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:04,628:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:04,628:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:05,054:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:05,054:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:05,069:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:05,069:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:05,069:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:05,085:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:05,085:INFO:Calculating mean and std
2024-01-09 11:23:05,101:INFO:Creating metrics dataframe
2024-01-09 11:23:05,101:INFO:Uploading results into container
2024-01-09 11:23:05,101:INFO:Uploading model into container now
2024-01-09 11:23:05,112:INFO:_master_model_container: 9
2024-01-09 11:23:05,113:INFO:_display_container: 2
2024-01-09 11:23:05,113:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=7136)
2024-01-09 11:23:05,113:INFO:create_model() successfully completed......................................
2024-01-09 11:23:05,598:INFO:SubProcess create_model() end ==================================
2024-01-09 11:23:05,598:INFO:Creating metrics dataframe
2024-01-09 11:23:05,630:INFO:Initializing Gradient Boosting Classifier
2024-01-09 11:23:05,630:INFO:Total runtime is 0.48989252249399823 minutes
2024-01-09 11:23:05,639:INFO:SubProcess create_model() called ==================================
2024-01-09 11:23:05,640:INFO:Initializing create_model()
2024-01-09 11:23:05,640:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:23:05,640:INFO:Checking exceptions
2024-01-09 11:23:05,640:INFO:Importing libraries
2024-01-09 11:23:05,640:INFO:Copying training dataset
2024-01-09 11:23:05,650:INFO:Defining folds
2024-01-09 11:23:05,650:INFO:Declaring metric variables
2024-01-09 11:23:05,661:INFO:Importing untrained model
2024-01-09 11:23:05,667:INFO:Gradient Boosting Classifier Imported successfully
2024-01-09 11:23:05,688:INFO:Starting cross validation
2024-01-09 11:23:05,703:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:23:06,537:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:06,537:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:06,537:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:06,537:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:06,537:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:06,553:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:06,553:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:06,569:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:06,605:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:06,605:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:06,622:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:07,344:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:07,344:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:07,359:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:07,359:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:07,375:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:07,375:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:07,375:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:07,390:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:07,390:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:07,406:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:07,422:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:07,424:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:08,052:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:08,064:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:08,064:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:08,071:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:08,071:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:08,079:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:08,093:INFO:Calculating mean and std
2024-01-09 11:23:08,093:INFO:Creating metrics dataframe
2024-01-09 11:23:08,110:INFO:Uploading results into container
2024-01-09 11:23:08,111:INFO:Uploading model into container now
2024-01-09 11:23:08,111:INFO:_master_model_container: 10
2024-01-09 11:23:08,112:INFO:_display_container: 2
2024-01-09 11:23:08,114:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=7136, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-01-09 11:23:08,114:INFO:create_model() successfully completed......................................
2024-01-09 11:23:08,592:INFO:SubProcess create_model() end ==================================
2024-01-09 11:23:08,592:INFO:Creating metrics dataframe
2024-01-09 11:23:08,623:INFO:Initializing Linear Discriminant Analysis
2024-01-09 11:23:08,623:INFO:Total runtime is 0.5397881905237834 minutes
2024-01-09 11:23:08,634:INFO:SubProcess create_model() called ==================================
2024-01-09 11:23:08,634:INFO:Initializing create_model()
2024-01-09 11:23:08,634:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:23:08,634:INFO:Checking exceptions
2024-01-09 11:23:08,634:INFO:Importing libraries
2024-01-09 11:23:08,634:INFO:Copying training dataset
2024-01-09 11:23:08,634:INFO:Defining folds
2024-01-09 11:23:08,634:INFO:Declaring metric variables
2024-01-09 11:23:08,651:INFO:Importing untrained model
2024-01-09 11:23:08,657:INFO:Linear Discriminant Analysis Imported successfully
2024-01-09 11:23:08,672:INFO:Starting cross validation
2024-01-09 11:23:08,687:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:23:09,104:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,104:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,104:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,118:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,118:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,118:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,118:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,134:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,149:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,149:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,165:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,167:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,504:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,520:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,520:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,520:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,536:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,536:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,536:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,552:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,552:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,569:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,582:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,582:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,836:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,852:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,856:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,872:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,872:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,887:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:09,903:INFO:Calculating mean and std
2024-01-09 11:23:09,903:INFO:Creating metrics dataframe
2024-01-09 11:23:09,919:INFO:Uploading results into container
2024-01-09 11:23:09,924:INFO:Uploading model into container now
2024-01-09 11:23:09,926:INFO:_master_model_container: 11
2024-01-09 11:23:09,926:INFO:_display_container: 2
2024-01-09 11:23:09,927:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-01-09 11:23:09,927:INFO:create_model() successfully completed......................................
2024-01-09 11:23:10,411:INFO:SubProcess create_model() end ==================================
2024-01-09 11:23:10,411:INFO:Creating metrics dataframe
2024-01-09 11:23:10,442:INFO:Initializing Extra Trees Classifier
2024-01-09 11:23:10,442:INFO:Total runtime is 0.5700978557268779 minutes
2024-01-09 11:23:10,452:INFO:SubProcess create_model() called ==================================
2024-01-09 11:23:10,452:INFO:Initializing create_model()
2024-01-09 11:23:10,453:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:23:10,453:INFO:Checking exceptions
2024-01-09 11:23:10,453:INFO:Importing libraries
2024-01-09 11:23:10,453:INFO:Copying training dataset
2024-01-09 11:23:10,460:INFO:Defining folds
2024-01-09 11:23:10,460:INFO:Declaring metric variables
2024-01-09 11:23:10,473:INFO:Importing untrained model
2024-01-09 11:23:10,486:INFO:Extra Trees Classifier Imported successfully
2024-01-09 11:23:10,498:INFO:Starting cross validation
2024-01-09 11:23:10,512:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:23:11,457:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:11,457:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:11,470:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:11,470:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:11,470:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:11,482:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:11,483:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:11,483:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:11,483:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:11,543:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:11,543:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:11,559:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:12,415:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:12,434:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:12,440:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:12,447:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:12,454:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:12,454:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:12,454:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:12,454:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:12,469:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:12,655:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:12,659:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:12,670:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:13,240:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:13,252:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:13,252:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:13,267:INFO:Calculating mean and std
2024-01-09 11:23:13,283:INFO:Creating metrics dataframe
2024-01-09 11:23:13,283:INFO:Uploading results into container
2024-01-09 11:23:13,292:INFO:Uploading model into container now
2024-01-09 11:23:13,294:INFO:_master_model_container: 12
2024-01-09 11:23:13,294:INFO:_display_container: 2
2024-01-09 11:23:13,296:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=7136, verbose=0, warm_start=False)
2024-01-09 11:23:13,296:INFO:create_model() successfully completed......................................
2024-01-09 11:23:13,777:INFO:SubProcess create_model() end ==================================
2024-01-09 11:23:13,777:INFO:Creating metrics dataframe
2024-01-09 11:23:13,810:INFO:Initializing Extreme Gradient Boosting
2024-01-09 11:23:13,810:INFO:Total runtime is 0.6262305577596029 minutes
2024-01-09 11:23:13,822:INFO:SubProcess create_model() called ==================================
2024-01-09 11:23:13,825:INFO:Initializing create_model()
2024-01-09 11:23:13,825:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:23:13,825:INFO:Checking exceptions
2024-01-09 11:23:13,827:INFO:Importing libraries
2024-01-09 11:23:13,827:INFO:Copying training dataset
2024-01-09 11:23:13,834:INFO:Defining folds
2024-01-09 11:23:13,834:INFO:Declaring metric variables
2024-01-09 11:23:13,846:INFO:Importing untrained model
2024-01-09 11:23:13,859:INFO:Extreme Gradient Boosting Imported successfully
2024-01-09 11:23:13,874:INFO:Starting cross validation
2024-01-09 11:23:13,885:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:23:14,483:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:14,483:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:14,483:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:14,498:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:14,498:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:14,498:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:14,498:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:14,498:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:14,498:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:14,514:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:14,514:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:14,514:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:14,993:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:14,993:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,008:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,008:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,008:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,008:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,024:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,024:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,024:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,024:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,040:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,040:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,410:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,426:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,426:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,426:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,426:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,442:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:15,442:INFO:Calculating mean and std
2024-01-09 11:23:15,442:INFO:Creating metrics dataframe
2024-01-09 11:23:15,464:INFO:Uploading results into container
2024-01-09 11:23:15,468:INFO:Uploading model into container now
2024-01-09 11:23:15,469:INFO:_master_model_container: 13
2024-01-09 11:23:15,470:INFO:_display_container: 2
2024-01-09 11:23:15,472:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-01-09 11:23:15,472:INFO:create_model() successfully completed......................................
2024-01-09 11:23:15,959:INFO:SubProcess create_model() end ==================================
2024-01-09 11:23:15,959:INFO:Creating metrics dataframe
2024-01-09 11:23:15,978:INFO:Initializing Light Gradient Boosting Machine
2024-01-09 11:23:15,994:INFO:Total runtime is 0.6626356879870097 minutes
2024-01-09 11:23:16,002:INFO:SubProcess create_model() called ==================================
2024-01-09 11:23:16,006:INFO:Initializing create_model()
2024-01-09 11:23:16,006:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:23:16,007:INFO:Checking exceptions
2024-01-09 11:23:16,007:INFO:Importing libraries
2024-01-09 11:23:16,007:INFO:Copying training dataset
2024-01-09 11:23:16,016:INFO:Defining folds
2024-01-09 11:23:16,017:INFO:Declaring metric variables
2024-01-09 11:23:16,025:INFO:Importing untrained model
2024-01-09 11:23:16,035:INFO:Light Gradient Boosting Machine Imported successfully
2024-01-09 11:23:16,052:INFO:Starting cross validation
2024-01-09 11:23:16,062:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:23:16,688:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:16,688:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:16,688:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:16,688:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:16,704:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:16,704:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:16,719:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:16,719:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:16,735:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:16,767:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:16,767:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:16,782:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,302:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,302:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,302:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,320:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,321:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,321:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,352:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,371:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,371:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,461:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,469:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,469:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,785:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,801:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,801:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,801:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,801:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,817:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:17,841:INFO:Calculating mean and std
2024-01-09 11:23:17,841:INFO:Creating metrics dataframe
2024-01-09 11:23:17,858:INFO:Uploading results into container
2024-01-09 11:23:17,863:INFO:Uploading model into container now
2024-01-09 11:23:17,865:INFO:_master_model_container: 14
2024-01-09 11:23:17,866:INFO:_display_container: 2
2024-01-09 11:23:17,868:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=7136, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-01-09 11:23:17,868:INFO:create_model() successfully completed......................................
2024-01-09 11:23:18,370:INFO:SubProcess create_model() end ==================================
2024-01-09 11:23:18,370:INFO:Creating metrics dataframe
2024-01-09 11:23:18,401:INFO:Initializing CatBoost Classifier
2024-01-09 11:23:18,401:INFO:Total runtime is 0.702750289440155 minutes
2024-01-09 11:23:18,407:INFO:SubProcess create_model() called ==================================
2024-01-09 11:23:18,407:INFO:Initializing create_model()
2024-01-09 11:23:18,407:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:23:18,407:INFO:Checking exceptions
2024-01-09 11:23:18,407:INFO:Importing libraries
2024-01-09 11:23:18,407:INFO:Copying training dataset
2024-01-09 11:23:18,418:INFO:Defining folds
2024-01-09 11:23:18,418:INFO:Declaring metric variables
2024-01-09 11:23:18,425:INFO:Importing untrained model
2024-01-09 11:23:18,429:INFO:CatBoost Classifier Imported successfully
2024-01-09 11:23:18,449:INFO:Starting cross validation
2024-01-09 11:23:18,460:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:23:31,805:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:31,819:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:31,821:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:32,090:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:32,097:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:32,108:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:32,175:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:32,181:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:32,190:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:32,190:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:32,205:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:32,214:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:43,552:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:43,552:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:43,567:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:44,037:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:44,042:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:44,055:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:44,489:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:44,489:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:44,507:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:44,644:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:44,644:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:44,644:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:51,307:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:51,318:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:51,318:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:51,349:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:51,349:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:51,365:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:51,365:INFO:Calculating mean and std
2024-01-09 11:23:51,365:INFO:Creating metrics dataframe
2024-01-09 11:23:51,381:INFO:Uploading results into container
2024-01-09 11:23:51,390:INFO:Uploading model into container now
2024-01-09 11:23:51,391:INFO:_master_model_container: 15
2024-01-09 11:23:51,392:INFO:_display_container: 2
2024-01-09 11:23:51,392:INFO:<catboost.core.CatBoostClassifier object at 0x0000025FD0334610>
2024-01-09 11:23:51,392:INFO:create_model() successfully completed......................................
2024-01-09 11:23:51,878:INFO:SubProcess create_model() end ==================================
2024-01-09 11:23:51,878:INFO:Creating metrics dataframe
2024-01-09 11:23:51,909:INFO:Initializing Dummy Classifier
2024-01-09 11:23:51,909:INFO:Total runtime is 1.2612213095029197 minutes
2024-01-09 11:23:51,917:INFO:SubProcess create_model() called ==================================
2024-01-09 11:23:51,917:INFO:Initializing create_model()
2024-01-09 11:23:51,921:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000025FEA0154D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:23:51,921:INFO:Checking exceptions
2024-01-09 11:23:51,921:INFO:Importing libraries
2024-01-09 11:23:51,922:INFO:Copying training dataset
2024-01-09 11:23:51,923:INFO:Defining folds
2024-01-09 11:23:51,923:INFO:Declaring metric variables
2024-01-09 11:23:51,932:INFO:Importing untrained model
2024-01-09 11:23:51,939:INFO:Dummy Classifier Imported successfully
2024-01-09 11:23:51,955:INFO:Starting cross validation
2024-01-09 11:23:51,969:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:23:52,358:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,358:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,372:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,372:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,372:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:23:52,372:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:23:52,372:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,372:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,372:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,389:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,389:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:23:52,389:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,406:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,406:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,406:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:23:52,422:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,746:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,755:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,756:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,756:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,756:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:23:52,756:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:23:52,756:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,773:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,808:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,829:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,829:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:23:52,838:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,924:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,945:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:52,945:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:23:52,956:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:53,089:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:53,089:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:53,089:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:53,089:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:53,105:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:23:53,106:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-09 11:23:53,106:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:53,106:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:23:53,123:INFO:Calculating mean and std
2024-01-09 11:23:53,123:INFO:Creating metrics dataframe
2024-01-09 11:23:53,139:INFO:Uploading results into container
2024-01-09 11:23:53,150:INFO:Uploading model into container now
2024-01-09 11:23:53,150:INFO:_master_model_container: 16
2024-01-09 11:23:53,151:INFO:_display_container: 2
2024-01-09 11:23:53,152:INFO:DummyClassifier(constant=None, random_state=7136, strategy='prior')
2024-01-09 11:23:53,152:INFO:create_model() successfully completed......................................
2024-01-09 11:23:53,674:INFO:SubProcess create_model() end ==================================
2024-01-09 11:23:53,674:INFO:Creating metrics dataframe
2024-01-09 11:23:53,732:INFO:Initializing create_model()
2024-01-09 11:23:53,732:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=<catboost.core.CatBoostClassifier object at 0x0000025FD0334610>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:23:53,733:INFO:Checking exceptions
2024-01-09 11:23:53,735:INFO:Importing libraries
2024-01-09 11:23:53,735:INFO:Copying training dataset
2024-01-09 11:23:53,741:INFO:Defining folds
2024-01-09 11:23:53,741:INFO:Declaring metric variables
2024-01-09 11:23:53,741:INFO:Importing untrained model
2024-01-09 11:23:53,741:INFO:Declaring custom model
2024-01-09 11:23:53,743:INFO:CatBoost Classifier Imported successfully
2024-01-09 11:23:53,754:INFO:Cross validation set to False
2024-01-09 11:23:53,754:INFO:Fitting Model
2024-01-09 11:23:53,831:INFO:[LightGBM] [Info] Number of positive: 68, number of negative: 77
2024-01-09 11:23:53,831:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000540 seconds.
2024-01-09 11:23:53,831:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-01-09 11:23:53,831:INFO:[LightGBM] [Info] Total Bins 2731
2024-01-09 11:23:53,831:INFO:[LightGBM] [Info] Number of data points in the train set: 145, number of used features: 57
2024-01-09 11:23:53,831:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.468966 -> initscore=-0.124298
2024-01-09 11:23:53,831:INFO:[LightGBM] [Info] Start training from score -0.124298
2024-01-09 11:23:53,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,862:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,871:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,871:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,871:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,871:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,871:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,871:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,871:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,871:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,877:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,878:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,878:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,878:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,878:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,878:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,878:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,878:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,878:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,878:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,886:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,886:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,886:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,886:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,886:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,886:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,886:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,886:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,886:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,892:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,892:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,893:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,893:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,893:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,893:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,893:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:23:53,893:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:24:00,484:INFO:<catboost.core.CatBoostClassifier object at 0x0000025FEA007C10>
2024-01-09 11:24:00,484:INFO:create_model() successfully completed......................................
2024-01-09 11:24:01,107:INFO:_master_model_container: 16
2024-01-09 11:24:01,108:INFO:_display_container: 2
2024-01-09 11:24:01,108:INFO:<catboost.core.CatBoostClassifier object at 0x0000025FEA007C10>
2024-01-09 11:24:01,108:INFO:compare_models() successfully completed......................................
2024-01-09 11:25:36,115:INFO:Initializing plot_model()
2024-01-09 11:25:36,115:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=catboost, plot=confusion matric, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 11:25:36,117:INFO:Checking exceptions
2024-01-09 11:26:16,835:INFO:Initializing plot_model()
2024-01-09 11:26:16,836:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025FE9E89E90>, estimator=catboost, plot=Confusion matric, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 11:26:16,836:INFO:Checking exceptions
2024-01-09 11:29:44,025:INFO:PyCaret ClassificationExperiment
2024-01-09 11:29:44,025:INFO:Logging name: clf-default-name
2024-01-09 11:29:44,025:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-01-09 11:29:44,025:INFO:version 3.2.0
2024-01-09 11:29:44,025:INFO:Initializing setup()
2024-01-09 11:29:44,025:INFO:self.USI: 54dc
2024-01-09 11:29:44,025:INFO:self._variable_keys: {'n_jobs_param', 'logging_param', '_available_plots', 'target_param', 'seed', 'y', 'fold_shuffle_param', 'fix_imbalance', 'pipeline', 'is_multiclass', 'log_plots_param', 'exp_name_log', 'memory', 'USI', 'html_param', 'X', 'idx', 'data', 'fold_groups_param', '_ml_usecase', 'fold_generator', 'gpu_n_jobs_param', 'exp_id', 'y_test', 'y_train', 'X_test', 'X_train', 'gpu_param'}
2024-01-09 11:29:44,025:INFO:Checking environment
2024-01-09 11:29:44,025:INFO:python_version: 3.11.5
2024-01-09 11:29:44,025:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-01-09 11:29:44,025:INFO:machine: AMD64
2024-01-09 11:29:44,025:INFO:platform: Windows-10-10.0.19045-SP0
2024-01-09 11:29:44,025:INFO:Memory: svmem(total=8464732160, available=4730908672, percent=44.1, used=3733823488, free=4730908672)
2024-01-09 11:29:44,025:INFO:Physical Core: 2
2024-01-09 11:29:44,025:INFO:Logical Core: 4
2024-01-09 11:29:44,025:INFO:Checking libraries
2024-01-09 11:29:44,025:INFO:System:
2024-01-09 11:29:44,025:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-01-09 11:29:44,025:INFO:executable: C:\Users\HP\anaconda3\python.exe
2024-01-09 11:29:44,025:INFO:   machine: Windows-10-10.0.19045-SP0
2024-01-09 11:29:44,025:INFO:PyCaret required dependencies:
2024-01-09 11:29:44,025:INFO:                 pip: 23.2.1
2024-01-09 11:29:44,025:INFO:          setuptools: 68.0.0
2024-01-09 11:29:44,025:INFO:             pycaret: 3.2.0
2024-01-09 11:29:44,025:INFO:             IPython: 8.15.0
2024-01-09 11:29:44,025:INFO:          ipywidgets: 8.0.4
2024-01-09 11:29:44,025:INFO:                tqdm: 4.65.0
2024-01-09 11:29:44,025:INFO:               numpy: 1.24.3
2024-01-09 11:29:44,025:INFO:              pandas: 1.5.3
2024-01-09 11:29:44,025:INFO:              jinja2: 3.1.2
2024-01-09 11:29:44,025:INFO:               scipy: 1.11.1
2024-01-09 11:29:44,025:INFO:              joblib: 1.1.1
2024-01-09 11:29:44,025:INFO:             sklearn: 1.2.2
2024-01-09 11:29:44,025:INFO:                pyod: 1.1.2
2024-01-09 11:29:44,025:INFO:            imblearn: 0.11.0
2024-01-09 11:29:44,025:INFO:   category_encoders: 2.6.3
2024-01-09 11:29:44,025:INFO:            lightgbm: 4.2.0
2024-01-09 11:29:44,025:INFO:               numba: 0.57.1
2024-01-09 11:29:44,034:INFO:            requests: 2.31.0
2024-01-09 11:29:44,034:INFO:          matplotlib: 3.6.0
2024-01-09 11:29:44,034:INFO:          scikitplot: 0.3.7
2024-01-09 11:29:44,034:INFO:         yellowbrick: 1.5
2024-01-09 11:29:44,034:INFO:              plotly: 5.9.0
2024-01-09 11:29:44,034:INFO:    plotly-resampler: Not installed
2024-01-09 11:29:44,034:INFO:             kaleido: 0.2.1
2024-01-09 11:29:44,034:INFO:           schemdraw: 0.15
2024-01-09 11:29:44,034:INFO:         statsmodels: 0.14.0
2024-01-09 11:29:44,034:INFO:              sktime: 0.21.1
2024-01-09 11:29:44,034:INFO:               tbats: 1.1.3
2024-01-09 11:29:44,034:INFO:            pmdarima: 2.0.4
2024-01-09 11:29:44,034:INFO:              psutil: 5.9.0
2024-01-09 11:29:44,034:INFO:          markupsafe: 2.1.1
2024-01-09 11:29:44,034:INFO:             pickle5: Not installed
2024-01-09 11:29:44,034:INFO:         cloudpickle: 2.2.1
2024-01-09 11:29:44,034:INFO:         deprecation: 2.1.0
2024-01-09 11:29:44,034:INFO:              xxhash: 2.0.2
2024-01-09 11:29:44,034:INFO:           wurlitzer: Not installed
2024-01-09 11:29:44,034:INFO:PyCaret optional dependencies:
2024-01-09 11:29:44,034:INFO:                shap: 0.44.0
2024-01-09 11:29:44,034:INFO:           interpret: 0.5.0
2024-01-09 11:29:44,034:INFO:                umap: 0.5.5
2024-01-09 11:29:44,034:INFO:     ydata_profiling: 4.6.0
2024-01-09 11:29:44,034:INFO:  explainerdashboard: 0.4.5
2024-01-09 11:29:44,034:INFO:             autoviz: Not installed
2024-01-09 11:29:44,034:INFO:           fairlearn: 0.7.0
2024-01-09 11:29:44,034:INFO:          deepchecks: Not installed
2024-01-09 11:29:44,034:INFO:             xgboost: 2.0.3
2024-01-09 11:29:44,034:INFO:            catboost: 1.2.2
2024-01-09 11:29:44,034:INFO:              kmodes: 0.12.2
2024-01-09 11:29:44,034:INFO:             mlxtend: 0.23.0
2024-01-09 11:29:44,034:INFO:       statsforecast: 1.5.0
2024-01-09 11:29:44,034:INFO:        tune_sklearn: Not installed
2024-01-09 11:29:44,034:INFO:                 ray: Not installed
2024-01-09 11:29:44,034:INFO:            hyperopt: 0.2.7
2024-01-09 11:29:44,034:INFO:              optuna: 3.5.0
2024-01-09 11:29:44,034:INFO:               skopt: 0.9.0
2024-01-09 11:29:44,034:INFO:              mlflow: 1.30.1
2024-01-09 11:29:44,034:INFO:              gradio: 3.50.2
2024-01-09 11:29:44,034:INFO:             fastapi: 0.108.0
2024-01-09 11:29:44,034:INFO:             uvicorn: 0.25.0
2024-01-09 11:29:44,034:INFO:              m2cgen: 0.10.0
2024-01-09 11:29:44,034:INFO:           evidently: 0.2.8
2024-01-09 11:29:44,034:INFO:               fugue: 0.8.6
2024-01-09 11:29:44,034:INFO:           streamlit: Not installed
2024-01-09 11:29:44,034:INFO:             prophet: Not installed
2024-01-09 11:29:44,034:INFO:None
2024-01-09 11:29:44,034:INFO:Set up data.
2024-01-09 11:29:44,060:INFO:Set up folding strategy.
2024-01-09 11:29:44,060:INFO:Set up train/test split.
2024-01-09 11:29:44,075:INFO:Set up index.
2024-01-09 11:29:44,075:INFO:Assigning column types.
2024-01-09 11:29:44,075:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-01-09 11:29:44,199:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-09 11:29:44,199:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:29:44,264:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:29:44,280:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:29:44,374:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-09 11:29:44,374:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:29:44,438:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:29:44,454:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:29:44,454:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-01-09 11:29:44,548:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:29:44,626:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:29:44,626:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:29:44,721:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:29:44,801:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:29:44,801:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:29:44,801:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-01-09 11:29:44,984:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:29:44,984:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:29:45,293:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:29:45,304:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:29:45,307:INFO:Preparing preprocessing pipeline...
2024-01-09 11:29:45,308:INFO:Set up label encoding.
2024-01-09 11:29:45,308:INFO:Set up simple imputation.
2024-01-09 11:29:45,308:INFO:Set up removing multicollinearity.
2024-01-09 11:29:45,308:INFO:Set up feature selection.
2024-01-09 11:29:45,469:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:29:45,485:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:29:45,675:INFO:Finished creating preprocessing pipeline.
2024-01-09 11:29:45,739:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\HP\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21', '22...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=12,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2024-01-09 11:29:45,739:INFO:Creating final display dataframe.
2024-01-09 11:29:46,337:INFO:Setup _display_container:                     Description             Value
0                    Session id              6096
1                        Target                60
2                   Target type            Binary
3                Target mapping        M: 0, R: 1
4           Original data shape         (208, 61)
5        Transformed data shape         (208, 13)
6   Transformed train set shape         (145, 13)
7    Transformed test set shape          (63, 13)
8              Numeric features                60
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Remove multicollinearity              True
14  Multicollinearity threshold               0.9
15            Feature selection              True
16     Feature selection method           classic
17  Feature selection estimator          lightgbm
18  Number of features selected               0.2
19               Fold Generator   StratifiedKFold
20                  Fold Number                10
21                     CPU Jobs                -1
22                      Use GPU             False
23               Log Experiment             False
24              Experiment Name  clf-default-name
25                          USI              54dc
2024-01-09 11:29:46,555:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:29:46,559:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:29:46,760:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:29:46,766:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:29:46,767:INFO:setup() successfully completed in 2.81s...............
2024-01-09 11:31:30,357:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-09 11:31:30,357:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-09 11:31:30,357:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-09 11:31:30,357:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-09 11:31:34,129:INFO:PyCaret ClassificationExperiment
2024-01-09 11:31:34,129:INFO:Logging name: clf-default-name
2024-01-09 11:31:34,129:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-01-09 11:31:34,129:INFO:version 3.2.0
2024-01-09 11:31:34,129:INFO:Initializing setup()
2024-01-09 11:31:34,129:INFO:self.USI: 7efc
2024-01-09 11:31:34,129:INFO:self._variable_keys: {'log_plots_param', '_available_plots', 'seed', 'is_multiclass', 'USI', 'idx', '_ml_usecase', 'y', 'X_test', 'y_test', 'exp_name_log', 'memory', 'fold_groups_param', 'data', 'fold_generator', 'n_jobs_param', 'logging_param', 'pipeline', 'gpu_n_jobs_param', 'exp_id', 'fold_shuffle_param', 'y_train', 'fix_imbalance', 'html_param', 'gpu_param', 'X', 'X_train', 'target_param'}
2024-01-09 11:31:34,129:INFO:Checking environment
2024-01-09 11:31:34,129:INFO:python_version: 3.11.5
2024-01-09 11:31:34,129:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-01-09 11:31:34,129:INFO:machine: AMD64
2024-01-09 11:31:34,129:INFO:platform: Windows-10-10.0.19045-SP0
2024-01-09 11:31:34,129:INFO:Memory: svmem(total=8464732160, available=5003223040, percent=40.9, used=3461509120, free=5003223040)
2024-01-09 11:31:34,129:INFO:Physical Core: 2
2024-01-09 11:31:34,129:INFO:Logical Core: 4
2024-01-09 11:31:34,129:INFO:Checking libraries
2024-01-09 11:31:34,129:INFO:System:
2024-01-09 11:31:34,129:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-01-09 11:31:34,129:INFO:executable: C:\Users\HP\anaconda3\python.exe
2024-01-09 11:31:34,129:INFO:   machine: Windows-10-10.0.19045-SP0
2024-01-09 11:31:34,129:INFO:PyCaret required dependencies:
2024-01-09 11:31:36,034:INFO:                 pip: 23.2.1
2024-01-09 11:31:36,034:INFO:          setuptools: 68.0.0
2024-01-09 11:31:36,035:INFO:             pycaret: 3.2.0
2024-01-09 11:31:36,035:INFO:             IPython: 8.15.0
2024-01-09 11:31:36,035:INFO:          ipywidgets: 8.0.4
2024-01-09 11:31:36,035:INFO:                tqdm: 4.65.0
2024-01-09 11:31:36,035:INFO:               numpy: 1.24.3
2024-01-09 11:31:36,035:INFO:              pandas: 1.5.3
2024-01-09 11:31:36,035:INFO:              jinja2: 3.1.2
2024-01-09 11:31:36,036:INFO:               scipy: 1.11.1
2024-01-09 11:31:36,036:INFO:              joblib: 1.1.1
2024-01-09 11:31:36,036:INFO:             sklearn: 1.2.2
2024-01-09 11:31:36,036:INFO:                pyod: 1.1.2
2024-01-09 11:31:36,036:INFO:            imblearn: 0.11.0
2024-01-09 11:31:36,036:INFO:   category_encoders: 2.6.3
2024-01-09 11:31:36,036:INFO:            lightgbm: 4.2.0
2024-01-09 11:31:36,036:INFO:               numba: 0.57.1
2024-01-09 11:31:36,036:INFO:            requests: 2.31.0
2024-01-09 11:31:36,036:INFO:          matplotlib: 3.6.0
2024-01-09 11:31:36,036:INFO:          scikitplot: 0.3.7
2024-01-09 11:31:36,037:INFO:         yellowbrick: 1.5
2024-01-09 11:31:36,037:INFO:              plotly: 5.9.0
2024-01-09 11:31:36,037:INFO:    plotly-resampler: Not installed
2024-01-09 11:31:36,037:INFO:             kaleido: 0.2.1
2024-01-09 11:31:36,037:INFO:           schemdraw: 0.15
2024-01-09 11:31:36,037:INFO:         statsmodels: 0.14.0
2024-01-09 11:31:36,037:INFO:              sktime: 0.21.1
2024-01-09 11:31:36,037:INFO:               tbats: 1.1.3
2024-01-09 11:31:36,037:INFO:            pmdarima: 2.0.4
2024-01-09 11:31:36,037:INFO:              psutil: 5.9.0
2024-01-09 11:31:36,037:INFO:          markupsafe: 2.1.1
2024-01-09 11:31:36,037:INFO:             pickle5: Not installed
2024-01-09 11:31:36,037:INFO:         cloudpickle: 2.2.1
2024-01-09 11:31:36,037:INFO:         deprecation: 2.1.0
2024-01-09 11:31:36,037:INFO:              xxhash: 2.0.2
2024-01-09 11:31:36,037:INFO:           wurlitzer: Not installed
2024-01-09 11:31:36,037:INFO:PyCaret optional dependencies:
2024-01-09 11:31:41,189:INFO:                shap: 0.44.0
2024-01-09 11:31:41,189:INFO:           interpret: 0.5.0
2024-01-09 11:31:41,189:INFO:                umap: 0.5.5
2024-01-09 11:31:41,189:INFO:     ydata_profiling: 4.6.0
2024-01-09 11:31:41,189:INFO:  explainerdashboard: 0.4.5
2024-01-09 11:31:41,189:INFO:             autoviz: Not installed
2024-01-09 11:31:41,189:INFO:           fairlearn: 0.7.0
2024-01-09 11:31:41,189:INFO:          deepchecks: Not installed
2024-01-09 11:31:41,189:INFO:             xgboost: 2.0.3
2024-01-09 11:31:41,189:INFO:            catboost: 1.2.2
2024-01-09 11:31:41,189:INFO:              kmodes: 0.12.2
2024-01-09 11:31:41,189:INFO:             mlxtend: 0.23.0
2024-01-09 11:31:41,189:INFO:       statsforecast: 1.5.0
2024-01-09 11:31:41,189:INFO:        tune_sklearn: Not installed
2024-01-09 11:31:41,189:INFO:                 ray: Not installed
2024-01-09 11:31:41,189:INFO:            hyperopt: 0.2.7
2024-01-09 11:31:41,189:INFO:              optuna: 3.5.0
2024-01-09 11:31:41,195:INFO:               skopt: 0.9.0
2024-01-09 11:31:41,195:INFO:              mlflow: 1.30.1
2024-01-09 11:31:41,195:INFO:              gradio: 3.50.2
2024-01-09 11:31:41,195:INFO:             fastapi: 0.108.0
2024-01-09 11:31:41,196:INFO:             uvicorn: 0.25.0
2024-01-09 11:31:41,196:INFO:              m2cgen: 0.10.0
2024-01-09 11:31:41,196:INFO:           evidently: 0.2.8
2024-01-09 11:31:41,196:INFO:               fugue: 0.8.6
2024-01-09 11:31:41,196:INFO:           streamlit: Not installed
2024-01-09 11:31:41,196:INFO:             prophet: Not installed
2024-01-09 11:31:41,196:INFO:None
2024-01-09 11:31:41,196:INFO:Set up data.
2024-01-09 11:31:41,229:INFO:Set up folding strategy.
2024-01-09 11:31:41,234:INFO:Set up train/test split.
2024-01-09 11:31:41,242:INFO:Set up index.
2024-01-09 11:31:41,242:INFO:Assigning column types.
2024-01-09 11:31:41,252:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-01-09 11:31:41,370:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-09 11:31:41,373:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:31:41,453:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:31:41,460:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:31:41,648:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-09 11:31:41,650:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:31:41,721:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:31:41,727:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:31:41,727:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-01-09 11:31:41,853:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:31:41,922:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:31:41,929:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:31:42,058:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:31:42,132:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:31:42,141:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:31:42,142:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-01-09 11:31:42,327:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:31:42,338:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:31:42,521:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:31:42,521:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:31:42,536:INFO:Preparing preprocessing pipeline...
2024-01-09 11:31:42,536:INFO:Set up label encoding.
2024-01-09 11:31:42,536:INFO:Set up simple imputation.
2024-01-09 11:31:42,536:INFO:Set up removing multicollinearity.
2024-01-09 11:31:42,536:INFO:Set up feature selection.
2024-01-09 11:31:42,704:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:31:42,719:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:31:43,169:INFO:Finished creating preprocessing pipeline.
2024-01-09 11:31:43,208:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\HP\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21', '22...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=12,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2024-01-09 11:31:43,208:INFO:Creating final display dataframe.
2024-01-09 11:31:43,730:INFO:Setup _display_container:                     Description             Value
0                    Session id              5041
1                        Target                60
2                   Target type            Binary
3                Target mapping        M: 0, R: 1
4           Original data shape         (208, 61)
5        Transformed data shape         (208, 13)
6   Transformed train set shape         (145, 13)
7    Transformed test set shape          (63, 13)
8              Numeric features                60
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Remove multicollinearity              True
14  Multicollinearity threshold               0.9
15            Feature selection              True
16     Feature selection method           classic
17  Feature selection estimator          lightgbm
18  Number of features selected               0.2
19               Fold Generator   StratifiedKFold
20                  Fold Number                10
21                     CPU Jobs                -1
22                      Use GPU             False
23               Log Experiment             False
24              Experiment Name  clf-default-name
25                          USI              7efc
2024-01-09 11:31:43,957:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:31:43,957:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:31:44,134:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:31:44,142:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:31:44,149:INFO:setup() successfully completed in 10.1s...............
2024-01-09 11:31:44,167:INFO:Initializing compare_models()
2024-01-09 11:31:44,168:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-01-09 11:31:44,168:INFO:Checking exceptions
2024-01-09 11:31:44,182:INFO:Preparing display monitor
2024-01-09 11:31:44,252:INFO:Initializing Logistic Regression
2024-01-09 11:31:44,252:INFO:Total runtime is 0.0 minutes
2024-01-09 11:31:44,261:INFO:SubProcess create_model() called ==================================
2024-01-09 11:31:44,261:INFO:Initializing create_model()
2024-01-09 11:31:44,261:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:31:44,263:INFO:Checking exceptions
2024-01-09 11:31:44,263:INFO:Importing libraries
2024-01-09 11:31:44,264:INFO:Copying training dataset
2024-01-09 11:31:44,270:INFO:Defining folds
2024-01-09 11:31:44,270:INFO:Declaring metric variables
2024-01-09 11:31:44,279:INFO:Importing untrained model
2024-01-09 11:31:44,283:INFO:Logistic Regression Imported successfully
2024-01-09 11:31:44,303:INFO:Starting cross validation
2024-01-09 11:31:44,312:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:31:57,264:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,273:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,273:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,290:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,307:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,309:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,309:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,324:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,324:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,367:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,367:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,383:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,789:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,795:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,806:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,824:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,845:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,856:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,856:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,876:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,876:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,939:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,941:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:57,956:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,107:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,126:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,126:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,156:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,156:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,171:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,171:INFO:Calculating mean and std
2024-01-09 11:31:58,187:INFO:Creating metrics dataframe
2024-01-09 11:31:58,187:INFO:Uploading results into container
2024-01-09 11:31:58,187:INFO:Uploading model into container now
2024-01-09 11:31:58,200:INFO:_master_model_container: 1
2024-01-09 11:31:58,200:INFO:_display_container: 2
2024-01-09 11:31:58,201:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5041, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-01-09 11:31:58,201:INFO:create_model() successfully completed......................................
2024-01-09 11:31:58,355:INFO:SubProcess create_model() end ==================================
2024-01-09 11:31:58,355:INFO:Creating metrics dataframe
2024-01-09 11:31:58,371:INFO:Initializing K Neighbors Classifier
2024-01-09 11:31:58,386:INFO:Total runtime is 0.2355768084526062 minutes
2024-01-09 11:31:58,390:INFO:SubProcess create_model() called ==================================
2024-01-09 11:31:58,390:INFO:Initializing create_model()
2024-01-09 11:31:58,390:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:31:58,390:INFO:Checking exceptions
2024-01-09 11:31:58,390:INFO:Importing libraries
2024-01-09 11:31:58,390:INFO:Copying training dataset
2024-01-09 11:31:58,398:INFO:Defining folds
2024-01-09 11:31:58,398:INFO:Declaring metric variables
2024-01-09 11:31:58,414:INFO:Importing untrained model
2024-01-09 11:31:58,417:INFO:K Neighbors Classifier Imported successfully
2024-01-09 11:31:58,430:INFO:Starting cross validation
2024-01-09 11:31:58,444:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:31:58,933:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,933:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,933:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,948:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,948:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,948:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,948:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,964:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,964:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,964:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,964:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:58,995:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,373:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,383:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,383:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,415:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,423:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,423:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,427:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,427:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,439:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,468:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,468:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,485:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,708:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,724:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,731:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,752:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,752:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,752:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:31:59,772:INFO:Calculating mean and std
2024-01-09 11:31:59,772:INFO:Creating metrics dataframe
2024-01-09 11:31:59,772:INFO:Uploading results into container
2024-01-09 11:31:59,788:INFO:Uploading model into container now
2024-01-09 11:31:59,790:INFO:_master_model_container: 2
2024-01-09 11:31:59,790:INFO:_display_container: 2
2024-01-09 11:31:59,790:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-01-09 11:31:59,790:INFO:create_model() successfully completed......................................
2024-01-09 11:31:59,946:INFO:SubProcess create_model() end ==================================
2024-01-09 11:31:59,946:INFO:Creating metrics dataframe
2024-01-09 11:31:59,962:INFO:Initializing Naive Bayes
2024-01-09 11:31:59,962:INFO:Total runtime is 0.2618339697519938 minutes
2024-01-09 11:31:59,975:INFO:SubProcess create_model() called ==================================
2024-01-09 11:31:59,975:INFO:Initializing create_model()
2024-01-09 11:31:59,975:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:31:59,975:INFO:Checking exceptions
2024-01-09 11:31:59,975:INFO:Importing libraries
2024-01-09 11:31:59,975:INFO:Copying training dataset
2024-01-09 11:31:59,984:INFO:Defining folds
2024-01-09 11:31:59,984:INFO:Declaring metric variables
2024-01-09 11:31:59,994:INFO:Importing untrained model
2024-01-09 11:32:00,012:INFO:Naive Bayes Imported successfully
2024-01-09 11:32:00,031:INFO:Starting cross validation
2024-01-09 11:32:00,048:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:32:00,605:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:00,611:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:00,613:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:00,613:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:00,626:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:00,626:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:00,656:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:00,662:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:00,674:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:00,814:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:00,822:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:00,822:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,056:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,075:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,075:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,075:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,091:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,109:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,109:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,110:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,129:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,325:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,351:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,365:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,514:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,525:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,537:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,541:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,550:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,558:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:01,577:INFO:Calculating mean and std
2024-01-09 11:32:01,581:INFO:Creating metrics dataframe
2024-01-09 11:32:01,592:INFO:Uploading results into container
2024-01-09 11:32:01,593:INFO:Uploading model into container now
2024-01-09 11:32:01,594:INFO:_master_model_container: 3
2024-01-09 11:32:01,594:INFO:_display_container: 2
2024-01-09 11:32:01,594:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-01-09 11:32:01,594:INFO:create_model() successfully completed......................................
2024-01-09 11:32:01,931:INFO:SubProcess create_model() end ==================================
2024-01-09 11:32:01,931:INFO:Creating metrics dataframe
2024-01-09 11:32:02,045:INFO:Initializing Decision Tree Classifier
2024-01-09 11:32:02,045:INFO:Total runtime is 0.2965549031893412 minutes
2024-01-09 11:32:02,054:INFO:SubProcess create_model() called ==================================
2024-01-09 11:32:02,055:INFO:Initializing create_model()
2024-01-09 11:32:02,055:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:32:02,056:INFO:Checking exceptions
2024-01-09 11:32:02,056:INFO:Importing libraries
2024-01-09 11:32:02,056:INFO:Copying training dataset
2024-01-09 11:32:02,068:INFO:Defining folds
2024-01-09 11:32:02,069:INFO:Declaring metric variables
2024-01-09 11:32:02,089:INFO:Importing untrained model
2024-01-09 11:32:02,099:INFO:Decision Tree Classifier Imported successfully
2024-01-09 11:32:02,119:INFO:Starting cross validation
2024-01-09 11:32:02,137:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:32:03,704:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:03,704:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:03,715:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:03,712:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:03,715:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:03,722:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:03,722:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:03,726:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:03,729:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:03,909:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:03,930:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:03,939:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,115:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,123:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,135:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,135:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,138:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,154:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,166:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,174:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,178:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,364:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,376:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,385:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,480:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,487:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,492:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,492:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,497:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,504:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:04,522:INFO:Calculating mean and std
2024-01-09 11:32:04,525:INFO:Creating metrics dataframe
2024-01-09 11:32:04,536:INFO:Uploading results into container
2024-01-09 11:32:04,538:INFO:Uploading model into container now
2024-01-09 11:32:04,539:INFO:_master_model_container: 4
2024-01-09 11:32:04,539:INFO:_display_container: 2
2024-01-09 11:32:04,540:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=5041, splitter='best')
2024-01-09 11:32:04,541:INFO:create_model() successfully completed......................................
2024-01-09 11:32:04,847:INFO:SubProcess create_model() end ==================================
2024-01-09 11:32:04,849:INFO:Creating metrics dataframe
2024-01-09 11:32:04,865:INFO:Initializing SVM - Linear Kernel
2024-01-09 11:32:04,865:INFO:Total runtime is 0.3435513059298197 minutes
2024-01-09 11:32:04,885:INFO:SubProcess create_model() called ==================================
2024-01-09 11:32:04,886:INFO:Initializing create_model()
2024-01-09 11:32:04,886:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:32:04,886:INFO:Checking exceptions
2024-01-09 11:32:04,886:INFO:Importing libraries
2024-01-09 11:32:04,886:INFO:Copying training dataset
2024-01-09 11:32:04,901:INFO:Defining folds
2024-01-09 11:32:04,901:INFO:Declaring metric variables
2024-01-09 11:32:04,917:INFO:Importing untrained model
2024-01-09 11:32:04,929:INFO:SVM - Linear Kernel Imported successfully
2024-01-09 11:32:04,957:INFO:Starting cross validation
2024-01-09 11:32:04,985:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:32:05,589:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:32:05,591:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:05,597:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:05,614:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:05,615:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:32:05,615:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:05,615:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:05,627:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:05,654:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:32:05,654:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:05,654:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:05,654:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:05,910:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:32:05,910:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:05,930:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:05,942:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,108:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:32:06,108:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,108:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:32:06,126:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,130:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,130:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,130:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,145:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,145:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:32:06,145:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,167:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,184:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,426:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:32:06,427:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,439:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,450:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,620:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:32:06,625:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,630:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,630:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-09 11:32:06,630:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,630:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,650:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,656:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:06,675:INFO:Calculating mean and std
2024-01-09 11:32:06,675:INFO:Creating metrics dataframe
2024-01-09 11:32:06,697:INFO:Uploading results into container
2024-01-09 11:32:06,699:INFO:Uploading model into container now
2024-01-09 11:32:06,700:INFO:_master_model_container: 5
2024-01-09 11:32:06,700:INFO:_display_container: 2
2024-01-09 11:32:06,700:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=5041, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-01-09 11:32:06,700:INFO:create_model() successfully completed......................................
2024-01-09 11:32:06,943:INFO:SubProcess create_model() end ==================================
2024-01-09 11:32:06,943:INFO:Creating metrics dataframe
2024-01-09 11:32:06,978:INFO:Initializing Ridge Classifier
2024-01-09 11:32:06,979:INFO:Total runtime is 0.3787784059842427 minutes
2024-01-09 11:32:06,987:INFO:SubProcess create_model() called ==================================
2024-01-09 11:32:06,988:INFO:Initializing create_model()
2024-01-09 11:32:06,988:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:32:06,989:INFO:Checking exceptions
2024-01-09 11:32:06,989:INFO:Importing libraries
2024-01-09 11:32:06,989:INFO:Copying training dataset
2024-01-09 11:32:07,001:INFO:Defining folds
2024-01-09 11:32:07,001:INFO:Declaring metric variables
2024-01-09 11:32:07,010:INFO:Importing untrained model
2024-01-09 11:32:07,023:INFO:Ridge Classifier Imported successfully
2024-01-09 11:32:07,042:INFO:Starting cross validation
2024-01-09 11:32:07,063:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:32:07,726:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:32:07,728:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:07,730:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:32:07,733:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:07,738:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:07,741:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:07,744:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:07,760:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:07,760:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:32:07,760:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:07,782:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:07,790:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:07,883:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:32:07,899:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:07,899:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:07,922:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,222:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:32:08,226:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,226:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

m metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:32:08,239:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,240:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,268:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:32:08,268:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,268:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,268:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,268:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,283:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,464:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:32:08,467:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,476:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,478:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,601:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:32:08,604:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,609:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,615:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,624:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-09 11:32:08,625:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,634:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,643:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:08,656:INFO:Calculating mean and std
2024-01-09 11:32:08,660:INFO:Creating metrics dataframe
2024-01-09 11:32:08,669:INFO:Uploading results into container
2024-01-09 11:32:08,671:INFO:Uploading model into container now
2024-01-09 11:32:08,672:INFO:_master_model_container: 6
2024-01-09 11:32:08,673:INFO:_display_container: 2
2024-01-09 11:32:08,673:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=5041, solver='auto',
                tol=0.0001)
2024-01-09 11:32:08,673:INFO:create_model() successfully completed......................................
2024-01-09 11:32:08,894:INFO:SubProcess create_model() end ==================================
2024-01-09 11:32:08,894:INFO:Creating metrics dataframe
2024-01-09 11:32:08,928:INFO:Initializing Random Forest Classifier
2024-01-09 11:32:08,928:INFO:Total runtime is 0.41127117077509556 minutes
2024-01-09 11:32:08,936:INFO:SubProcess create_model() called ==================================
2024-01-09 11:32:08,937:INFO:Initializing create_model()
2024-01-09 11:32:08,937:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:32:08,937:INFO:Checking exceptions
2024-01-09 11:32:08,938:INFO:Importing libraries
2024-01-09 11:32:08,938:INFO:Copying training dataset
2024-01-09 11:32:08,950:INFO:Defining folds
2024-01-09 11:32:08,950:INFO:Declaring metric variables
2024-01-09 11:32:08,956:INFO:Importing untrained model
2024-01-09 11:32:08,964:INFO:Random Forest Classifier Imported successfully
2024-01-09 11:32:08,976:INFO:Starting cross validation
2024-01-09 11:32:08,989:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:32:09,999:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:09,999:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:10,014:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:10,014:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:10,014:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:10,014:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:10,014:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:10,014:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:10,030:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:10,533:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:10,541:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:10,556:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,082:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,089:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,098:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,111:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,121:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,134:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,141:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,142:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,916:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,916:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,940:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,976:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,976:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:11,988:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,042:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,050:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,057:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,066:INFO:Calculating mean and std
2024-01-09 11:32:12,066:INFO:Creating metrics dataframe
2024-01-09 11:32:12,074:INFO:Uploading results into container
2024-01-09 11:32:12,080:INFO:Uploading model into container now
2024-01-09 11:32:12,082:INFO:_master_model_container: 7
2024-01-09 11:32:12,082:INFO:_display_container: 2
2024-01-09 11:32:12,083:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=5041, verbose=0, warm_start=False)
2024-01-09 11:32:12,084:INFO:create_model() successfully completed......................................
2024-01-09 11:32:12,231:INFO:SubProcess create_model() end ==================================
2024-01-09 11:32:12,231:INFO:Creating metrics dataframe
2024-01-09 11:32:12,267:INFO:Initializing Quadratic Discriminant Analysis
2024-01-09 11:32:12,267:INFO:Total runtime is 0.46691567897796626 minutes
2024-01-09 11:32:12,279:INFO:SubProcess create_model() called ==================================
2024-01-09 11:32:12,279:INFO:Initializing create_model()
2024-01-09 11:32:12,279:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:32:12,279:INFO:Checking exceptions
2024-01-09 11:32:12,279:INFO:Importing libraries
2024-01-09 11:32:12,279:INFO:Copying training dataset
2024-01-09 11:32:12,287:INFO:Defining folds
2024-01-09 11:32:12,287:INFO:Declaring metric variables
2024-01-09 11:32:12,305:INFO:Importing untrained model
2024-01-09 11:32:12,309:INFO:Quadratic Discriminant Analysis Imported successfully
2024-01-09 11:32:12,328:INFO:Starting cross validation
2024-01-09 11:32:12,332:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:32:12,757:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,774:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,774:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,774:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,774:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,791:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,791:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,791:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,791:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,808:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,808:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:12,808:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,163:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,163:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,175:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,176:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,176:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,176:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,207:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,207:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,224:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,240:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,240:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,252:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,474:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,474:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,474:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,491:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,491:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,491:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:13,508:INFO:Calculating mean and std
2024-01-09 11:32:13,508:INFO:Creating metrics dataframe
2024-01-09 11:32:13,523:INFO:Uploading results into container
2024-01-09 11:32:13,525:INFO:Uploading model into container now
2024-01-09 11:32:13,526:INFO:_master_model_container: 8
2024-01-09 11:32:13,526:INFO:_display_container: 2
2024-01-09 11:32:13,526:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-01-09 11:32:13,527:INFO:create_model() successfully completed......................................
2024-01-09 11:32:13,682:INFO:SubProcess create_model() end ==================================
2024-01-09 11:32:13,691:INFO:Creating metrics dataframe
2024-01-09 11:32:13,708:INFO:Initializing Ada Boost Classifier
2024-01-09 11:32:13,708:INFO:Total runtime is 0.49094076951344806 minutes
2024-01-09 11:32:13,721:INFO:SubProcess create_model() called ==================================
2024-01-09 11:32:13,721:INFO:Initializing create_model()
2024-01-09 11:32:13,721:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:32:13,721:INFO:Checking exceptions
2024-01-09 11:32:13,721:INFO:Importing libraries
2024-01-09 11:32:13,721:INFO:Copying training dataset
2024-01-09 11:32:13,729:INFO:Defining folds
2024-01-09 11:32:13,729:INFO:Declaring metric variables
2024-01-09 11:32:13,746:INFO:Importing untrained model
2024-01-09 11:32:13,747:INFO:Ada Boost Classifier Imported successfully
2024-01-09 11:32:13,763:INFO:Starting cross validation
2024-01-09 11:32:13,778:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:32:14,495:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:14,510:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:14,510:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:14,510:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:14,526:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:14,526:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:14,557:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:14,573:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:14,573:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:14,573:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:14,588:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:14,604:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,213:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,231:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,239:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,241:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,249:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,258:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,292:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,309:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,309:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,346:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,346:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,364:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,832:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,847:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,847:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,847:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,847:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,863:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:15,880:INFO:Calculating mean and std
2024-01-09 11:32:15,880:INFO:Creating metrics dataframe
2024-01-09 11:32:15,880:INFO:Uploading results into container
2024-01-09 11:32:15,895:INFO:Uploading model into container now
2024-01-09 11:32:15,896:INFO:_master_model_container: 9
2024-01-09 11:32:15,896:INFO:_display_container: 2
2024-01-09 11:32:15,897:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=5041)
2024-01-09 11:32:15,897:INFO:create_model() successfully completed......................................
2024-01-09 11:32:16,044:INFO:SubProcess create_model() end ==================================
2024-01-09 11:32:16,044:INFO:Creating metrics dataframe
2024-01-09 11:32:16,079:INFO:Initializing Gradient Boosting Classifier
2024-01-09 11:32:16,079:INFO:Total runtime is 0.5304488221804301 minutes
2024-01-09 11:32:16,086:INFO:SubProcess create_model() called ==================================
2024-01-09 11:32:16,086:INFO:Initializing create_model()
2024-01-09 11:32:16,086:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:32:16,086:INFO:Checking exceptions
2024-01-09 11:32:16,086:INFO:Importing libraries
2024-01-09 11:32:16,086:INFO:Copying training dataset
2024-01-09 11:32:16,096:INFO:Defining folds
2024-01-09 11:32:16,096:INFO:Declaring metric variables
2024-01-09 11:32:16,113:INFO:Importing untrained model
2024-01-09 11:32:16,121:INFO:Gradient Boosting Classifier Imported successfully
2024-01-09 11:32:16,137:INFO:Starting cross validation
2024-01-09 11:32:16,144:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:32:16,973:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:16,989:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:16,989:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,004:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,020:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,020:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,035:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,035:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,051:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,098:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,114:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,114:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,808:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,808:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,824:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,875:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,877:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,885:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,907:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,915:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,925:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,980:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,997:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:17,997:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:18,512:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:18,528:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:18,528:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:18,570:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:18,570:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:18,570:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:18,594:INFO:Calculating mean and std
2024-01-09 11:32:18,596:INFO:Creating metrics dataframe
2024-01-09 11:32:18,597:INFO:Uploading results into container
2024-01-09 11:32:18,608:INFO:Uploading model into container now
2024-01-09 11:32:18,609:INFO:_master_model_container: 10
2024-01-09 11:32:18,609:INFO:_display_container: 2
2024-01-09 11:32:18,611:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=5041, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-01-09 11:32:18,611:INFO:create_model() successfully completed......................................
2024-01-09 11:32:18,781:INFO:SubProcess create_model() end ==================================
2024-01-09 11:32:18,781:INFO:Creating metrics dataframe
2024-01-09 11:32:18,814:INFO:Initializing Linear Discriminant Analysis
2024-01-09 11:32:18,814:INFO:Total runtime is 0.5760297417640686 minutes
2024-01-09 11:32:18,818:INFO:SubProcess create_model() called ==================================
2024-01-09 11:32:18,818:INFO:Initializing create_model()
2024-01-09 11:32:18,818:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:32:18,818:INFO:Checking exceptions
2024-01-09 11:32:18,818:INFO:Importing libraries
2024-01-09 11:32:18,818:INFO:Copying training dataset
2024-01-09 11:32:18,825:INFO:Defining folds
2024-01-09 11:32:18,825:INFO:Declaring metric variables
2024-01-09 11:32:18,844:INFO:Importing untrained model
2024-01-09 11:32:18,846:INFO:Linear Discriminant Analysis Imported successfully
2024-01-09 11:32:18,858:INFO:Starting cross validation
2024-01-09 11:32:18,874:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:32:19,291:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,291:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,308:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,308:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,308:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,308:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,308:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,308:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,325:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,341:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,358:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,358:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,725:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,725:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,725:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,725:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,743:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,743:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,743:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,743:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,760:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,809:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,826:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:19,826:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:20,042:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:20,042:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:20,059:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:20,059:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:20,059:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:20,059:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:20,075:INFO:Calculating mean and std
2024-01-09 11:32:20,091:INFO:Creating metrics dataframe
2024-01-09 11:32:20,095:INFO:Uploading results into container
2024-01-09 11:32:20,102:INFO:Uploading model into container now
2024-01-09 11:32:20,103:INFO:_master_model_container: 11
2024-01-09 11:32:20,103:INFO:_display_container: 2
2024-01-09 11:32:20,104:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-01-09 11:32:20,104:INFO:create_model() successfully completed......................................
2024-01-09 11:32:20,261:INFO:SubProcess create_model() end ==================================
2024-01-09 11:32:20,261:INFO:Creating metrics dataframe
2024-01-09 11:32:20,276:INFO:Initializing Extra Trees Classifier
2024-01-09 11:32:20,276:INFO:Total runtime is 0.600408693154653 minutes
2024-01-09 11:32:20,294:INFO:SubProcess create_model() called ==================================
2024-01-09 11:32:20,294:INFO:Initializing create_model()
2024-01-09 11:32:20,294:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:32:20,294:INFO:Checking exceptions
2024-01-09 11:32:20,294:INFO:Importing libraries
2024-01-09 11:32:20,294:INFO:Copying training dataset
2024-01-09 11:32:20,301:INFO:Defining folds
2024-01-09 11:32:20,301:INFO:Declaring metric variables
2024-01-09 11:32:20,311:INFO:Importing untrained model
2024-01-09 11:32:20,322:INFO:Extra Trees Classifier Imported successfully
2024-01-09 11:32:20,340:INFO:Starting cross validation
2024-01-09 11:32:20,347:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:32:21,324:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:21,324:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:21,324:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:21,340:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:21,340:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:21,340:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:21,340:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:21,367:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:21,367:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:21,435:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:21,435:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:21,451:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:22,278:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:22,278:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:22,294:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:22,301:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:22,301:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:22,301:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:22,373:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:22,373:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:22,388:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:22,526:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:22,531:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:22,550:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:23,132:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:23,148:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:23,148:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:23,148:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:23,148:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:23,164:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:23,180:INFO:Calculating mean and std
2024-01-09 11:32:23,183:INFO:Creating metrics dataframe
2024-01-09 11:32:23,191:INFO:Uploading results into container
2024-01-09 11:32:23,194:INFO:Uploading model into container now
2024-01-09 11:32:23,196:INFO:_master_model_container: 12
2024-01-09 11:32:23,196:INFO:_display_container: 2
2024-01-09 11:32:23,197:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=5041, verbose=0, warm_start=False)
2024-01-09 11:32:23,198:INFO:create_model() successfully completed......................................
2024-01-09 11:32:23,353:INFO:SubProcess create_model() end ==================================
2024-01-09 11:32:23,353:INFO:Creating metrics dataframe
2024-01-09 11:32:23,369:INFO:Initializing Extreme Gradient Boosting
2024-01-09 11:32:23,369:INFO:Total runtime is 0.6519448598225912 minutes
2024-01-09 11:32:23,385:INFO:SubProcess create_model() called ==================================
2024-01-09 11:32:23,385:INFO:Initializing create_model()
2024-01-09 11:32:23,385:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:32:23,385:INFO:Checking exceptions
2024-01-09 11:32:23,385:INFO:Importing libraries
2024-01-09 11:32:23,385:INFO:Copying training dataset
2024-01-09 11:32:23,394:INFO:Defining folds
2024-01-09 11:32:23,394:INFO:Declaring metric variables
2024-01-09 11:32:23,409:INFO:Importing untrained model
2024-01-09 11:32:23,411:INFO:Extreme Gradient Boosting Imported successfully
2024-01-09 11:32:23,436:INFO:Starting cross validation
2024-01-09 11:32:23,442:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:32:24,026:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,042:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,042:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,042:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,058:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,058:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,058:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,073:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,073:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,089:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,105:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,120:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,558:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,558:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,574:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,590:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,590:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,606:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,606:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,606:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,621:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,639:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,655:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,655:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,971:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,971:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,971:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,987:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,988:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:24,988:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:25,004:INFO:Calculating mean and std
2024-01-09 11:32:25,004:INFO:Creating metrics dataframe
2024-01-09 11:32:25,019:INFO:Uploading results into container
2024-01-09 11:32:25,022:INFO:Uploading model into container now
2024-01-09 11:32:25,023:INFO:_master_model_container: 13
2024-01-09 11:32:25,023:INFO:_display_container: 2
2024-01-09 11:32:25,025:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-01-09 11:32:25,025:INFO:create_model() successfully completed......................................
2024-01-09 11:32:25,174:INFO:SubProcess create_model() end ==================================
2024-01-09 11:32:25,174:INFO:Creating metrics dataframe
2024-01-09 11:32:25,208:INFO:Initializing Light Gradient Boosting Machine
2024-01-09 11:32:25,208:INFO:Total runtime is 0.6826029300689698 minutes
2024-01-09 11:32:25,215:INFO:SubProcess create_model() called ==================================
2024-01-09 11:32:25,215:INFO:Initializing create_model()
2024-01-09 11:32:25,215:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:32:25,215:INFO:Checking exceptions
2024-01-09 11:32:25,215:INFO:Importing libraries
2024-01-09 11:32:25,215:INFO:Copying training dataset
2024-01-09 11:32:25,223:INFO:Defining folds
2024-01-09 11:32:25,223:INFO:Declaring metric variables
2024-01-09 11:32:25,238:INFO:Importing untrained model
2024-01-09 11:32:25,241:INFO:Light Gradient Boosting Machine Imported successfully
2024-01-09 11:32:25,264:INFO:Starting cross validation
2024-01-09 11:32:25,269:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:32:25,908:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:25,910:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:25,924:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:25,926:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:25,933:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:25,942:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:25,942:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:25,942:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:25,959:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:25,977:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:25,977:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:25,992:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:26,530:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:26,537:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:26,546:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:26,562:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:26,569:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:26,577:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:26,595:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:26,600:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:26,614:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:26,670:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:26,678:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:26,694:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:27,020:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:27,027:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:27,027:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:27,042:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:27,059:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:27,066:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:32:27,081:INFO:Calculating mean and std
2024-01-09 11:32:27,090:INFO:Creating metrics dataframe
2024-01-09 11:32:27,106:INFO:Uploading results into container
2024-01-09 11:32:27,108:INFO:Uploading model into container now
2024-01-09 11:32:27,110:INFO:_master_model_container: 14
2024-01-09 11:32:27,110:INFO:_display_container: 2
2024-01-09 11:32:27,112:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=5041, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-01-09 11:32:27,113:INFO:create_model() successfully completed......................................
2024-01-09 11:32:27,285:INFO:SubProcess create_model() end ==================================
2024-01-09 11:32:27,285:INFO:Creating metrics dataframe
2024-01-09 11:32:27,326:INFO:Initializing CatBoost Classifier
2024-01-09 11:32:27,326:INFO:Total runtime is 0.7178956349690756 minutes
2024-01-09 11:32:27,332:INFO:SubProcess create_model() called ==================================
2024-01-09 11:32:27,332:INFO:Initializing create_model()
2024-01-09 11:32:27,332:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DFC7B5D4D0>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DFCC756510>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:32:27,332:INFO:Checking exceptions
2024-01-09 11:32:27,337:INFO:Importing libraries
2024-01-09 11:32:27,338:INFO:Copying training dataset
2024-01-09 11:32:27,348:INFO:Defining folds
2024-01-09 11:32:27,348:INFO:Declaring metric variables
2024-01-09 11:32:27,363:INFO:Importing untrained model
2024-01-09 11:32:27,374:INFO:CatBoost Classifier Imported successfully
2024-01-09 11:32:27,391:INFO:Starting cross validation
2024-01-09 11:32:27,402:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:33:12,865:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-09 11:33:12,865:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-09 11:33:12,865:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-09 11:33:12,865:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-09 11:33:16,508:INFO:PyCaret ClassificationExperiment
2024-01-09 11:33:16,508:INFO:Logging name: clf-default-name
2024-01-09 11:33:16,508:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-01-09 11:33:16,508:INFO:version 3.2.0
2024-01-09 11:33:16,508:INFO:Initializing setup()
2024-01-09 11:33:16,508:INFO:self.USI: 55f3
2024-01-09 11:33:16,508:INFO:self._variable_keys: {'exp_name_log', '_available_plots', 'USI', 'memory', 'is_multiclass', 'fix_imbalance', 'target_param', 'X_train', 'fold_shuffle_param', 'pipeline', 'html_param', 'fold_groups_param', 'logging_param', 'seed', 'y_train', 'data', 'fold_generator', 'y', 'log_plots_param', 'X_test', 'gpu_param', 'idx', 'exp_id', 'y_test', '_ml_usecase', 'n_jobs_param', 'X', 'gpu_n_jobs_param'}
2024-01-09 11:33:16,508:INFO:Checking environment
2024-01-09 11:33:16,508:INFO:python_version: 3.11.5
2024-01-09 11:33:16,508:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-01-09 11:33:16,512:INFO:machine: AMD64
2024-01-09 11:33:16,512:INFO:platform: Windows-10-10.0.19045-SP0
2024-01-09 11:33:16,512:INFO:Memory: svmem(total=8464732160, available=4944068608, percent=41.6, used=3520663552, free=4944068608)
2024-01-09 11:33:16,512:INFO:Physical Core: 2
2024-01-09 11:33:16,512:INFO:Logical Core: 4
2024-01-09 11:33:16,512:INFO:Checking libraries
2024-01-09 11:33:16,513:INFO:System:
2024-01-09 11:33:16,513:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-01-09 11:33:16,513:INFO:executable: C:\Users\HP\anaconda3\python.exe
2024-01-09 11:33:16,513:INFO:   machine: Windows-10-10.0.19045-SP0
2024-01-09 11:33:16,513:INFO:PyCaret required dependencies:
2024-01-09 11:33:18,417:INFO:                 pip: 23.2.1
2024-01-09 11:33:18,417:INFO:          setuptools: 68.0.0
2024-01-09 11:33:18,417:INFO:             pycaret: 3.2.0
2024-01-09 11:33:18,417:INFO:             IPython: 8.15.0
2024-01-09 11:33:18,417:INFO:          ipywidgets: 8.0.4
2024-01-09 11:33:18,417:INFO:                tqdm: 4.65.0
2024-01-09 11:33:18,417:INFO:               numpy: 1.24.3
2024-01-09 11:33:18,424:INFO:              pandas: 1.5.3
2024-01-09 11:33:18,424:INFO:              jinja2: 3.1.2
2024-01-09 11:33:18,424:INFO:               scipy: 1.11.1
2024-01-09 11:33:18,424:INFO:              joblib: 1.1.1
2024-01-09 11:33:18,424:INFO:             sklearn: 1.2.2
2024-01-09 11:33:18,424:INFO:                pyod: 1.1.2
2024-01-09 11:33:18,424:INFO:            imblearn: 0.11.0
2024-01-09 11:33:18,424:INFO:   category_encoders: 2.6.3
2024-01-09 11:33:18,424:INFO:            lightgbm: 4.2.0
2024-01-09 11:33:18,424:INFO:               numba: 0.57.1
2024-01-09 11:33:18,424:INFO:            requests: 2.31.0
2024-01-09 11:33:18,424:INFO:          matplotlib: 3.6.0
2024-01-09 11:33:18,424:INFO:          scikitplot: 0.3.7
2024-01-09 11:33:18,424:INFO:         yellowbrick: 1.5
2024-01-09 11:33:18,424:INFO:              plotly: 5.9.0
2024-01-09 11:33:18,424:INFO:    plotly-resampler: Not installed
2024-01-09 11:33:18,424:INFO:             kaleido: 0.2.1
2024-01-09 11:33:18,424:INFO:           schemdraw: 0.15
2024-01-09 11:33:18,424:INFO:         statsmodels: 0.14.0
2024-01-09 11:33:18,424:INFO:              sktime: 0.21.1
2024-01-09 11:33:18,424:INFO:               tbats: 1.1.3
2024-01-09 11:33:18,424:INFO:            pmdarima: 2.0.4
2024-01-09 11:33:18,424:INFO:              psutil: 5.9.0
2024-01-09 11:33:18,424:INFO:          markupsafe: 2.1.1
2024-01-09 11:33:18,424:INFO:             pickle5: Not installed
2024-01-09 11:33:18,424:INFO:         cloudpickle: 2.2.1
2024-01-09 11:33:18,424:INFO:         deprecation: 2.1.0
2024-01-09 11:33:18,424:INFO:              xxhash: 2.0.2
2024-01-09 11:33:18,424:INFO:           wurlitzer: Not installed
2024-01-09 11:33:18,424:INFO:PyCaret optional dependencies:
2024-01-09 11:33:23,532:INFO:                shap: 0.44.0
2024-01-09 11:33:23,532:INFO:           interpret: 0.5.0
2024-01-09 11:33:23,532:INFO:                umap: 0.5.5
2024-01-09 11:33:23,532:INFO:     ydata_profiling: 4.6.0
2024-01-09 11:33:23,532:INFO:  explainerdashboard: 0.4.5
2024-01-09 11:33:23,532:INFO:             autoviz: Not installed
2024-01-09 11:33:23,532:INFO:           fairlearn: 0.7.0
2024-01-09 11:33:23,532:INFO:          deepchecks: Not installed
2024-01-09 11:33:23,532:INFO:             xgboost: 2.0.3
2024-01-09 11:33:23,532:INFO:            catboost: 1.2.2
2024-01-09 11:33:23,532:INFO:              kmodes: 0.12.2
2024-01-09 11:33:23,532:INFO:             mlxtend: 0.23.0
2024-01-09 11:33:23,532:INFO:       statsforecast: 1.5.0
2024-01-09 11:33:23,532:INFO:        tune_sklearn: Not installed
2024-01-09 11:33:23,532:INFO:                 ray: Not installed
2024-01-09 11:33:23,532:INFO:            hyperopt: 0.2.7
2024-01-09 11:33:23,532:INFO:              optuna: 3.5.0
2024-01-09 11:33:23,532:INFO:               skopt: 0.9.0
2024-01-09 11:33:23,532:INFO:              mlflow: 1.30.1
2024-01-09 11:33:23,532:INFO:              gradio: 3.50.2
2024-01-09 11:33:23,532:INFO:             fastapi: 0.108.0
2024-01-09 11:33:23,532:INFO:             uvicorn: 0.25.0
2024-01-09 11:33:23,532:INFO:              m2cgen: 0.10.0
2024-01-09 11:33:23,532:INFO:           evidently: 0.2.8
2024-01-09 11:33:23,532:INFO:               fugue: 0.8.6
2024-01-09 11:33:23,532:INFO:           streamlit: Not installed
2024-01-09 11:33:23,532:INFO:             prophet: Not installed
2024-01-09 11:33:23,532:INFO:None
2024-01-09 11:33:23,532:INFO:Set up data.
2024-01-09 11:33:23,565:INFO:Set up folding strategy.
2024-01-09 11:33:23,565:INFO:Set up train/test split.
2024-01-09 11:33:23,565:INFO:Set up index.
2024-01-09 11:33:23,565:INFO:Assigning column types.
2024-01-09 11:33:23,581:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-01-09 11:33:23,677:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-09 11:33:23,691:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:33:23,799:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:33:23,799:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:33:23,960:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-09 11:33:23,960:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:33:24,032:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:33:24,040:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:33:24,046:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-01-09 11:33:24,143:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:33:24,209:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:33:24,225:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:33:24,336:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-09 11:33:24,403:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:33:24,403:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:33:24,403:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-01-09 11:33:24,582:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:33:24,582:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:33:24,759:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:33:24,759:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:33:24,774:INFO:Preparing preprocessing pipeline...
2024-01-09 11:33:24,774:INFO:Set up label encoding.
2024-01-09 11:33:24,774:INFO:Set up simple imputation.
2024-01-09 11:33:24,774:INFO:Set up removing multicollinearity.
2024-01-09 11:33:24,774:INFO:Set up feature selection.
2024-01-09 11:33:24,946:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:33:24,946:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:33:25,395:INFO:Finished creating preprocessing pipeline.
2024-01-09 11:33:25,412:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\HP\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21', '22...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=12,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2024-01-09 11:33:25,412:INFO:Creating final display dataframe.
2024-01-09 11:33:25,873:INFO:Setup _display_container:                     Description             Value
0                    Session id              1572
1                        Target                60
2                   Target type            Binary
3                Target mapping        M: 0, R: 1
4           Original data shape         (208, 61)
5        Transformed data shape         (208, 13)
6   Transformed train set shape         (145, 13)
7    Transformed test set shape          (63, 13)
8              Numeric features                60
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Remove multicollinearity              True
14  Multicollinearity threshold               0.9
15            Feature selection              True
16     Feature selection method           classic
17  Feature selection estimator          lightgbm
18  Number of features selected               0.2
19               Fold Generator   StratifiedKFold
20                  Fold Number                10
21                     CPU Jobs                -1
22                      Use GPU             False
23               Log Experiment             False
24              Experiment Name  clf-default-name
25                          USI              55f3
2024-01-09 11:33:26,102:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:33:26,102:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:33:26,282:INFO:Soft dependency imported: xgboost: 2.0.3
2024-01-09 11:33:26,282:INFO:Soft dependency imported: catboost: 1.2.2
2024-01-09 11:33:26,298:INFO:setup() successfully completed in 9.88s...............
2024-01-09 11:33:26,329:INFO:Initializing create_model()
2024-01-09 11:33:26,329:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=catboost, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 11:33:26,331:INFO:Checking exceptions
2024-01-09 11:33:26,386:INFO:Importing libraries
2024-01-09 11:33:26,386:INFO:Copying training dataset
2024-01-09 11:33:26,399:INFO:Defining folds
2024-01-09 11:33:26,399:INFO:Declaring metric variables
2024-01-09 11:33:26,405:INFO:Importing untrained model
2024-01-09 11:33:26,414:INFO:CatBoost Classifier Imported successfully
2024-01-09 11:33:26,429:INFO:Starting cross validation
2024-01-09 11:33:26,444:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 11:33:51,396:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:33:51,396:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:33:51,412:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:33:51,628:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:33:51,635:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:33:51,635:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:33:51,952:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:33:51,952:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:33:51,970:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:33:52,030:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:33:52,040:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:33:52,050:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:03,519:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:03,519:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:03,535:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:03,938:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:03,953:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:03,954:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:04,769:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:04,788:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:04,788:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:05,115:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:05,115:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:05,131:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:11,613:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:11,621:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:11,630:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:11,671:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:11,676:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:11,685:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 11:34:11,694:INFO:Calculating mean and std
2024-01-09 11:34:11,703:INFO:Creating metrics dataframe
2024-01-09 11:34:11,721:INFO:Finalizing model
2024-01-09 11:34:11,823:INFO:[LightGBM] [Info] Number of positive: 68, number of negative: 77
2024-01-09 11:34:11,823:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000230 seconds.
2024-01-09 11:34:11,823:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-01-09 11:34:11,828:INFO:[LightGBM] [Info] Total Bins 2741
2024-01-09 11:34:11,828:INFO:[LightGBM] [Info] Number of data points in the train set: 145, number of used features: 57
2024-01-09 11:34:11,829:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.468966 -> initscore=-0.124298
2024-01-09 11:34:11,829:INFO:[LightGBM] [Info] Start training from score -0.124298
2024-01-09 11:34:11,829:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,829:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,829:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,829:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,832:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,832:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,833:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,833:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,834:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,835:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,836:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,853:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,868:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,869:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:11,885:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 11:34:18,360:INFO:Uploading results into container
2024-01-09 11:34:18,362:INFO:Uploading model into container now
2024-01-09 11:34:18,396:INFO:_master_model_container: 1
2024-01-09 11:34:18,396:INFO:_display_container: 2
2024-01-09 11:34:18,396:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>
2024-01-09 11:34:18,396:INFO:create_model() successfully completed......................................
2024-01-09 11:34:18,586:INFO:Initializing plot_model()
2024-01-09 11:34:18,587:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=catboost, plot=Confusion matric, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 11:34:18,587:INFO:Checking exceptions
2024-01-09 11:34:38,004:INFO:Initializing plot_model()
2024-01-09 11:34:38,004:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, plot=Confusion matric, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 11:34:38,005:INFO:Checking exceptions
2024-01-09 11:34:45,117:INFO:Initializing plot_model()
2024-01-09 11:34:45,117:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, plot=confusion matric, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 11:34:45,118:INFO:Checking exceptions
2024-01-09 11:36:29,517:INFO:Initializing plot_model()
2024-01-09 11:36:29,517:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, plot=confusion_matric, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 11:36:29,517:INFO:Checking exceptions
2024-01-09 11:37:04,275:INFO:Initializing plot_model()
2024-01-09 11:37:04,275:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 11:37:04,275:INFO:Checking exceptions
2024-01-09 11:37:04,289:INFO:Preloading libraries
2024-01-09 11:37:04,292:INFO:Copying training dataset
2024-01-09 11:37:04,292:INFO:Plot type: confusion_matrix
2024-01-09 11:37:04,896:INFO:Fitting Model
2024-01-09 11:37:04,912:INFO:Scoring test/hold-out set
2024-01-09 11:37:05,205:INFO:Visual Rendered Successfully
2024-01-09 11:37:05,466:INFO:plot_model() successfully completed......................................
2024-01-09 11:38:35,351:INFO:Initializing plot_model()
2024-01-09 11:38:35,351:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, plot=learning, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 11:38:35,351:INFO:Checking exceptions
2024-01-09 11:38:35,359:INFO:Preloading libraries
2024-01-09 11:38:35,362:INFO:Copying training dataset
2024-01-09 11:38:35,363:INFO:Plot type: learning
2024-01-09 11:38:35,672:INFO:Fitting Model
2024-01-09 11:40:29,067:INFO:Initializing plot_model()
2024-01-09 11:40:29,068:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 11:40:29,068:INFO:Checking exceptions
2024-01-09 11:40:29,074:INFO:Preloading libraries
2024-01-09 11:40:29,080:INFO:Copying training dataset
2024-01-09 11:40:29,080:INFO:Plot type: auc
2024-01-09 11:40:29,486:INFO:Fitting Model
2024-01-09 11:40:29,486:INFO:Scoring test/hold-out set
2024-01-09 11:40:29,930:INFO:Visual Rendered Successfully
2024-01-09 11:40:30,199:INFO:plot_model() successfully completed......................................
2024-01-09 11:41:30,959:INFO:Initializing plot_model()
2024-01-09 11:41:30,959:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, plot=learning, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 11:41:30,959:INFO:Checking exceptions
2024-01-09 11:41:30,970:INFO:Preloading libraries
2024-01-09 11:41:30,974:INFO:Copying training dataset
2024-01-09 11:41:30,974:INFO:Plot type: learning
2024-01-09 11:41:31,148:INFO:Fitting Model
2024-01-09 11:45:18,179:INFO:Visual Rendered Successfully
2024-01-09 11:45:18,450:INFO:plot_model() successfully completed......................................
2024-01-09 12:13:21,380:INFO:Initializing tune_model()
2024-01-09 12:13:21,380:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2024-01-09 12:13:21,380:INFO:Checking exceptions
2024-01-09 12:13:21,466:INFO:Copying training dataset
2024-01-09 12:13:21,471:INFO:Checking base model
2024-01-09 12:13:21,472:INFO:Base model : CatBoost Classifier
2024-01-09 12:13:21,479:INFO:Declaring metric variables
2024-01-09 12:13:21,485:INFO:Defining Hyperparameters
2024-01-09 12:13:21,812:INFO:Tuning with n_jobs=-1
2024-01-09 12:13:21,812:INFO:Initializing RandomizedSearchCV
2024-01-09 12:14:21,827:INFO:best_params: {'actual_estimator__random_strength': 0.8, 'actual_estimator__n_estimators': 220, 'actual_estimator__l2_leaf_reg': 2, 'actual_estimator__eta': 0.2, 'actual_estimator__depth': 9}
2024-01-09 12:14:21,828:INFO:Hyperparameter search completed
2024-01-09 12:14:21,828:INFO:SubProcess create_model() called ==================================
2024-01-09 12:14:21,829:INFO:Initializing create_model()
2024-01-09 12:14:21,829:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B92A19810>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B96678650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'random_strength': 0.8, 'n_estimators': 220, 'l2_leaf_reg': 2, 'eta': 0.2, 'depth': 9})
2024-01-09 12:14:21,829:INFO:Checking exceptions
2024-01-09 12:14:21,830:INFO:Importing libraries
2024-01-09 12:14:21,831:INFO:Copying training dataset
2024-01-09 12:14:21,842:INFO:Defining folds
2024-01-09 12:14:21,843:INFO:Declaring metric variables
2024-01-09 12:14:21,851:INFO:Importing untrained model
2024-01-09 12:14:21,852:INFO:Declaring custom model
2024-01-09 12:14:21,861:INFO:CatBoost Classifier Imported successfully
2024-01-09 12:14:21,877:INFO:Starting cross validation
2024-01-09 12:14:21,892:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 12:14:30,900:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:30,918:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:30,922:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:30,965:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:30,965:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:30,965:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:30,965:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:30,965:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:30,965:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:30,981:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:30,981:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:30,981:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:39,247:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:39,247:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:39,247:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:39,613:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:39,613:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:39,625:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:39,675:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:39,675:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:39,675:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:40,161:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:40,176:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:40,176:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:44,733:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:44,750:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:44,750:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:44,819:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:44,819:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:44,819:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:44,831:INFO:Calculating mean and std
2024-01-09 12:14:44,833:INFO:Creating metrics dataframe
2024-01-09 12:14:44,840:INFO:Finalizing model
2024-01-09 12:14:44,894:INFO:[LightGBM] [Info] Number of positive: 68, number of negative: 77
2024-01-09 12:14:44,894:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000140 seconds.
2024-01-09 12:14:44,894:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-01-09 12:14:44,894:INFO:[LightGBM] [Info] Total Bins 2741
2024-01-09 12:14:44,894:INFO:[LightGBM] [Info] Number of data points in the train set: 145, number of used features: 57
2024-01-09 12:14:44,894:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.468966 -> initscore=-0.124298
2024-01-09 12:14:44,894:INFO:[LightGBM] [Info] Start training from score -0.124298
2024-01-09 12:14:44,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,910:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,926:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:44,926:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:14:48,180:INFO:Uploading results into container
2024-01-09 12:14:48,181:INFO:Uploading model into container now
2024-01-09 12:14:48,182:INFO:_master_model_container: 2
2024-01-09 12:14:48,183:INFO:_display_container: 3
2024-01-09 12:14:48,183:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B96642DD0>
2024-01-09 12:14:48,183:INFO:create_model() successfully completed......................................
2024-01-09 12:14:48,457:INFO:SubProcess create_model() end ==================================
2024-01-09 12:14:48,457:INFO:choose_better activated
2024-01-09 12:14:48,464:INFO:SubProcess create_model() called ==================================
2024-01-09 12:14:48,465:INFO:Initializing create_model()
2024-01-09 12:14:48,465:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 12:14:48,466:INFO:Checking exceptions
2024-01-09 12:14:48,469:INFO:Importing libraries
2024-01-09 12:14:48,469:INFO:Copying training dataset
2024-01-09 12:14:48,479:INFO:Defining folds
2024-01-09 12:14:48,480:INFO:Declaring metric variables
2024-01-09 12:14:48,480:INFO:Importing untrained model
2024-01-09 12:14:48,481:INFO:Declaring custom model
2024-01-09 12:14:48,481:INFO:CatBoost Classifier Imported successfully
2024-01-09 12:14:48,482:INFO:Starting cross validation
2024-01-09 12:14:48,490:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 12:14:56,038:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:56,038:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:56,038:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:56,054:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:56,054:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:56,063:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:56,098:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:56,098:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:56,098:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:56,233:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:56,233:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:14:56,251:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:03,255:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:03,255:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:03,268:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:03,396:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:03,401:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:03,406:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:03,600:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:03,600:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:03,600:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:04,394:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:04,410:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:04,410:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:08,135:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:08,135:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:08,135:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:08,157:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:08,157:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:08,157:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:15:08,167:INFO:Calculating mean and std
2024-01-09 12:15:08,168:INFO:Creating metrics dataframe
2024-01-09 12:15:08,168:INFO:Finalizing model
2024-01-09 12:15:08,200:INFO:[LightGBM] [Info] Number of positive: 68, number of negative: 77
2024-01-09 12:15:08,200:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000151 seconds.
2024-01-09 12:15:08,200:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-01-09 12:15:08,200:INFO:[LightGBM] [Info] Total Bins 2741
2024-01-09 12:15:08,200:INFO:[LightGBM] [Info] Number of data points in the train set: 145, number of used features: 57
2024-01-09 12:15:08,200:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.468966 -> initscore=-0.124298
2024-01-09 12:15:08,200:INFO:[LightGBM] [Info] Start training from score -0.124298
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:08,216:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:15:12,106:INFO:Uploading results into container
2024-01-09 12:15:12,106:INFO:Uploading model into container now
2024-01-09 12:15:12,106:INFO:_master_model_container: 3
2024-01-09 12:15:12,106:INFO:_display_container: 4
2024-01-09 12:15:12,106:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B96698390>
2024-01-09 12:15:12,106:INFO:create_model() successfully completed......................................
2024-01-09 12:15:12,368:INFO:SubProcess create_model() end ==================================
2024-01-09 12:15:12,368:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B96698390> result for Accuracy is 0.8067
2024-01-09 12:15:12,368:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B96642DD0> result for Accuracy is 0.8267
2024-01-09 12:15:12,368:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B96642DD0> is best model
2024-01-09 12:15:12,368:INFO:choose_better completed
2024-01-09 12:15:12,390:INFO:_master_model_container: 3
2024-01-09 12:15:12,390:INFO:_display_container: 3
2024-01-09 12:15:12,390:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B96642DD0>
2024-01-09 12:15:12,391:INFO:tune_model() successfully completed......................................
2024-01-09 12:15:36,863:INFO:Initializing plot_model()
2024-01-09 12:15:36,868:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 12:15:36,868:INFO:Checking exceptions
2024-01-09 12:15:36,877:INFO:Preloading libraries
2024-01-09 12:15:36,881:INFO:Copying training dataset
2024-01-09 12:15:36,881:INFO:Plot type: confusion_matrix
2024-01-09 12:15:37,023:INFO:Fitting Model
2024-01-09 12:15:37,023:INFO:Scoring test/hold-out set
2024-01-09 12:15:37,183:INFO:Visual Rendered Successfully
2024-01-09 12:15:37,451:INFO:plot_model() successfully completed......................................
2024-01-09 12:15:37,987:INFO:Initializing plot_model()
2024-01-09 12:15:37,987:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 12:15:37,987:INFO:Checking exceptions
2024-01-09 12:15:37,996:INFO:Preloading libraries
2024-01-09 12:15:38,000:INFO:Copying training dataset
2024-01-09 12:15:38,001:INFO:Plot type: auc
2024-01-09 12:15:38,115:INFO:Fitting Model
2024-01-09 12:15:38,115:INFO:Scoring test/hold-out set
2024-01-09 12:15:38,351:INFO:Visual Rendered Successfully
2024-01-09 12:15:38,623:INFO:plot_model() successfully completed......................................
2024-01-09 12:15:38,912:INFO:Initializing plot_model()
2024-01-09 12:15:38,912:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, plot=learning, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 12:15:38,915:INFO:Checking exceptions
2024-01-09 12:15:38,928:INFO:Preloading libraries
2024-01-09 12:15:38,932:INFO:Copying training dataset
2024-01-09 12:15:38,932:INFO:Plot type: learning
2024-01-09 12:15:39,025:INFO:Fitting Model
2024-01-09 12:18:11,783:INFO:Visual Rendered Successfully
2024-01-09 12:18:12,202:INFO:plot_model() successfully completed......................................
2024-01-09 12:37:36,315:INFO:Initializing tune_model()
2024-01-09 12:37:36,317:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2024-01-09 12:37:36,318:INFO:Checking exceptions
2024-01-09 12:37:36,412:INFO:Copying training dataset
2024-01-09 12:37:36,417:INFO:Checking base model
2024-01-09 12:37:36,419:INFO:Base model : CatBoost Classifier
2024-01-09 12:37:36,427:INFO:Declaring metric variables
2024-01-09 12:37:36,436:INFO:Defining Hyperparameters
2024-01-09 12:37:36,748:INFO:Tuning with n_jobs=-1
2024-01-09 12:37:36,748:INFO:Initializing RandomizedSearchCV
2024-01-09 12:38:37,370:INFO:best_params: {'actual_estimator__random_strength': 0.8, 'actual_estimator__n_estimators': 220, 'actual_estimator__l2_leaf_reg': 2, 'actual_estimator__eta': 0.2, 'actual_estimator__depth': 9}
2024-01-09 12:38:37,371:INFO:Hyperparameter search completed
2024-01-09 12:38:37,371:INFO:SubProcess create_model() called ==================================
2024-01-09 12:38:37,372:INFO:Initializing create_model()
2024-01-09 12:38:37,372:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B9648FE90>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B92C9A110>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'random_strength': 0.8, 'n_estimators': 220, 'l2_leaf_reg': 2, 'eta': 0.2, 'depth': 9})
2024-01-09 12:38:37,372:INFO:Checking exceptions
2024-01-09 12:38:37,372:INFO:Importing libraries
2024-01-09 12:38:37,373:INFO:Copying training dataset
2024-01-09 12:38:37,379:INFO:Defining folds
2024-01-09 12:38:37,379:INFO:Declaring metric variables
2024-01-09 12:38:37,385:INFO:Importing untrained model
2024-01-09 12:38:37,386:INFO:Declaring custom model
2024-01-09 12:38:37,394:INFO:CatBoost Classifier Imported successfully
2024-01-09 12:38:37,411:INFO:Starting cross validation
2024-01-09 12:38:37,422:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 12:38:46,755:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:46,755:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:46,755:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:46,809:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:46,809:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:46,809:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:46,841:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:46,841:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:46,841:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:48,095:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:48,103:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:48,103:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:53,947:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:53,955:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:53,955:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:54,118:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:54,126:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:54,126:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:54,777:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:54,794:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:38:54,794:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:00,693:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:00,706:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:00,711:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:01,409:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:01,426:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:01,429:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:01,532:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:01,534:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:01,534:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:01,548:INFO:Calculating mean and std
2024-01-09 12:39:01,550:INFO:Creating metrics dataframe
2024-01-09 12:39:01,564:INFO:Finalizing model
2024-01-09 12:39:01,621:INFO:[LightGBM] [Info] Number of positive: 68, number of negative: 77
2024-01-09 12:39:01,621:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000158 seconds.
2024-01-09 12:39:01,621:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-01-09 12:39:01,621:INFO:[LightGBM] [Info] Total Bins 2741
2024-01-09 12:39:01,621:INFO:[LightGBM] [Info] Number of data points in the train set: 145, number of used features: 57
2024-01-09 12:39:01,621:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.468966 -> initscore=-0.124298
2024-01-09 12:39:01,621:INFO:[LightGBM] [Info] Start training from score -0.124298
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,629:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:01,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:04,937:INFO:Uploading results into container
2024-01-09 12:39:04,940:INFO:Uploading model into container now
2024-01-09 12:39:04,941:INFO:_master_model_container: 4
2024-01-09 12:39:04,941:INFO:_display_container: 4
2024-01-09 12:39:04,942:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B9648F710>
2024-01-09 12:39:04,942:INFO:create_model() successfully completed......................................
2024-01-09 12:39:05,227:INFO:SubProcess create_model() end ==================================
2024-01-09 12:39:05,227:INFO:choose_better activated
2024-01-09 12:39:05,233:INFO:SubProcess create_model() called ==================================
2024-01-09 12:39:05,234:INFO:Initializing create_model()
2024-01-09 12:39:05,234:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B8E767590>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 12:39:05,234:INFO:Checking exceptions
2024-01-09 12:39:05,236:INFO:Importing libraries
2024-01-09 12:39:05,236:INFO:Copying training dataset
2024-01-09 12:39:05,243:INFO:Defining folds
2024-01-09 12:39:05,243:INFO:Declaring metric variables
2024-01-09 12:39:05,243:INFO:Importing untrained model
2024-01-09 12:39:05,244:INFO:Declaring custom model
2024-01-09 12:39:05,244:INFO:CatBoost Classifier Imported successfully
2024-01-09 12:39:05,244:INFO:Starting cross validation
2024-01-09 12:39:05,254:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 12:39:13,373:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:13,373:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:13,381:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:13,536:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:13,544:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:13,552:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:13,568:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:13,576:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:13,576:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:13,584:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:13,592:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:13,600:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:21,337:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:21,337:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:21,337:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:21,584:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:21,584:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:21,584:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:21,735:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:21,751:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:21,751:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:21,968:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:21,985:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:21,985:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:26,506:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:26,506:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:26,521:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:26,527:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:26,539:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:26,544:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:39:26,555:INFO:Calculating mean and std
2024-01-09 12:39:26,556:INFO:Creating metrics dataframe
2024-01-09 12:39:26,557:INFO:Finalizing model
2024-01-09 12:39:26,605:INFO:[LightGBM] [Info] Number of positive: 68, number of negative: 77
2024-01-09 12:39:26,605:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000211 seconds.
2024-01-09 12:39:26,605:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-01-09 12:39:26,605:INFO:[LightGBM] [Info] Total Bins 2741
2024-01-09 12:39:26,605:INFO:[LightGBM] [Info] Number of data points in the train set: 145, number of used features: 57
2024-01-09 12:39:26,605:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.468966 -> initscore=-0.124298
2024-01-09 12:39:26,605:INFO:[LightGBM] [Info] Start training from score -0.124298
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:26,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:39:30,589:INFO:Uploading results into container
2024-01-09 12:39:30,589:INFO:Uploading model into container now
2024-01-09 12:39:30,589:INFO:_master_model_container: 5
2024-01-09 12:39:30,589:INFO:_display_container: 5
2024-01-09 12:39:30,589:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B966B8E10>
2024-01-09 12:39:30,589:INFO:create_model() successfully completed......................................
2024-01-09 12:39:30,872:INFO:SubProcess create_model() end ==================================
2024-01-09 12:39:30,872:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B966B8E10> result for Accuracy is 0.8067
2024-01-09 12:39:30,872:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B9648F710> result for Accuracy is 0.8267
2024-01-09 12:39:30,872:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B9648F710> is best model
2024-01-09 12:39:30,872:INFO:choose_better completed
2024-01-09 12:39:30,902:INFO:_master_model_container: 5
2024-01-09 12:39:30,902:INFO:_display_container: 4
2024-01-09 12:39:30,903:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B9648F710>
2024-01-09 12:39:30,903:INFO:tune_model() successfully completed......................................
2024-01-09 12:43:05,832:INFO:Initializing create_model()
2024-01-09 12:43:05,832:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=catboost, fold=2, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 12:43:05,832:INFO:Checking exceptions
2024-01-09 12:43:05,916:INFO:Importing libraries
2024-01-09 12:43:05,916:INFO:Copying training dataset
2024-01-09 12:43:05,938:INFO:Defining folds
2024-01-09 12:43:05,938:INFO:Declaring metric variables
2024-01-09 12:43:05,954:INFO:Importing untrained model
2024-01-09 12:43:05,962:INFO:CatBoost Classifier Imported successfully
2024-01-09 12:43:05,975:INFO:Starting cross validation
2024-01-09 12:43:05,990:INFO:Cross validating with StratifiedKFold(n_splits=2, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 12:43:09,828:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:09,840:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:09,848:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:09,849:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:09,854:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:09,860:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:09,868:INFO:Calculating mean and std
2024-01-09 12:43:09,871:INFO:Creating metrics dataframe
2024-01-09 12:43:09,887:INFO:Finalizing model
2024-01-09 12:43:09,975:INFO:[LightGBM] [Info] Number of positive: 68, number of negative: 77
2024-01-09 12:43:09,975:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000309 seconds.
2024-01-09 12:43:09,976:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-01-09 12:43:09,976:INFO:[LightGBM] [Info] Total Bins 2741
2024-01-09 12:43:09,977:INFO:[LightGBM] [Info] Number of data points in the train set: 145, number of used features: 57
2024-01-09 12:43:09,978:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.468966 -> initscore=-0.124298
2024-01-09 12:43:09,978:INFO:[LightGBM] [Info] Start training from score -0.124298
2024-01-09 12:43:09,979:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,980:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,980:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,981:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,982:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,983:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,983:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,984:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,984:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,985:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,987:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,987:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,987:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,988:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,988:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,988:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,988:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,990:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,990:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,990:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,991:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,991:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,991:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,991:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,991:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,991:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,991:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:09,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,000:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,000:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,002:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,002:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,003:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,010:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,011:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,012:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,020:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:10,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:43:14,037:INFO:Uploading results into container
2024-01-09 12:43:14,039:INFO:Uploading model into container now
2024-01-09 12:43:14,059:INFO:_master_model_container: 6
2024-01-09 12:43:14,061:INFO:_display_container: 5
2024-01-09 12:43:14,061:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B96491750>
2024-01-09 12:43:14,061:INFO:create_model() successfully completed......................................
2024-01-09 12:43:45,123:INFO:Initializing create_model()
2024-01-09 12:43:45,124:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=catboost, fold=10, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 12:43:45,124:INFO:Checking exceptions
2024-01-09 12:43:45,202:INFO:Importing libraries
2024-01-09 12:43:45,203:INFO:Copying training dataset
2024-01-09 12:43:45,216:INFO:Defining folds
2024-01-09 12:43:45,216:INFO:Declaring metric variables
2024-01-09 12:43:45,226:INFO:Importing untrained model
2024-01-09 12:43:45,233:INFO:CatBoost Classifier Imported successfully
2024-01-09 12:43:45,247:INFO:Starting cross validation
2024-01-09 12:43:45,260:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 12:43:53,166:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:53,169:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:53,180:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:53,266:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:53,273:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:53,279:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:53,354:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:53,354:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:53,370:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:53,412:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:53,412:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:43:53,422:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:01,100:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:01,108:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:01,116:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:01,603:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:01,603:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:01,611:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:02,018:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:02,018:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:02,026:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:02,050:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:02,058:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:02,058:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:07,071:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:07,086:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:07,092:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:07,171:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:07,175:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:07,186:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:44:07,199:INFO:Calculating mean and std
2024-01-09 12:44:07,201:INFO:Creating metrics dataframe
2024-01-09 12:44:07,217:INFO:Finalizing model
2024-01-09 12:44:07,278:INFO:[LightGBM] [Info] Number of positive: 68, number of negative: 77
2024-01-09 12:44:07,278:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000124 seconds.
2024-01-09 12:44:07,278:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-01-09 12:44:07,278:INFO:[LightGBM] [Info] Total Bins 2741
2024-01-09 12:44:07,278:INFO:[LightGBM] [Info] Number of data points in the train set: 145, number of used features: 57
2024-01-09 12:44:07,278:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.468966 -> initscore=-0.124298
2024-01-09 12:44:07,278:INFO:[LightGBM] [Info] Start training from score -0.124298
2024-01-09 12:44:07,278:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,278:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,278:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,284:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,285:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,285:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,286:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,291:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,292:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,300:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,300:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,300:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,307:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,307:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,307:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,307:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,308:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,314:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,314:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,314:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,314:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,315:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,315:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:07,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:44:11,407:INFO:Uploading results into container
2024-01-09 12:44:11,409:INFO:Uploading model into container now
2024-01-09 12:44:11,426:INFO:_master_model_container: 7
2024-01-09 12:44:11,426:INFO:_display_container: 6
2024-01-09 12:44:11,426:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B929A4790>
2024-01-09 12:44:11,427:INFO:create_model() successfully completed......................................
2024-01-09 12:49:12,115:INFO:Initializing create_model()
2024-01-09 12:49:12,115:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 12:49:12,115:INFO:Checking exceptions
2024-01-09 12:49:12,165:INFO:Importing libraries
2024-01-09 12:49:12,165:INFO:Copying training dataset
2024-01-09 12:49:12,177:INFO:Defining folds
2024-01-09 12:49:12,177:INFO:Declaring metric variables
2024-01-09 12:49:12,188:INFO:Importing untrained model
2024-01-09 12:49:12,196:INFO:Random Forest Classifier Imported successfully
2024-01-09 12:49:12,213:INFO:Starting cross validation
2024-01-09 12:49:12,224:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 12:49:22,780:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:22,780:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:22,796:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:22,796:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:22,796:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:22,807:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:22,895:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:22,895:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:22,895:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:23,273:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:23,273:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:23,289:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:23,569:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:23,574:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:23,580:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:23,589:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:23,589:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:23,589:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:23,747:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:23,755:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:23,755:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:24,154:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:24,161:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:24,166:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:24,226:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:24,232:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:24,237:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:24,245:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:24,246:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:24,246:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 12:49:24,255:INFO:Calculating mean and std
2024-01-09 12:49:24,257:INFO:Creating metrics dataframe
2024-01-09 12:49:24,264:INFO:Finalizing model
2024-01-09 12:49:24,316:INFO:[LightGBM] [Info] Number of positive: 68, number of negative: 77
2024-01-09 12:49:24,316:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000156 seconds.
2024-01-09 12:49:24,316:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-01-09 12:49:24,316:INFO:[LightGBM] [Info] Total Bins 2741
2024-01-09 12:49:24,316:INFO:[LightGBM] [Info] Number of data points in the train set: 145, number of used features: 57
2024-01-09 12:49:24,316:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.468966 -> initscore=-0.124298
2024-01-09 12:49:24,316:INFO:[LightGBM] [Info] Start training from score -0.124298
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,316:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,325:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,342:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 12:49:24,655:INFO:Uploading results into container
2024-01-09 12:49:24,656:INFO:Uploading model into container now
2024-01-09 12:49:24,681:INFO:_master_model_container: 8
2024-01-09 12:49:24,683:INFO:_display_container: 7
2024-01-09 12:49:24,684:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=1572, verbose=0, warm_start=False)
2024-01-09 12:49:24,684:INFO:create_model() successfully completed......................................
2024-01-09 12:56:18,483:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-01-09 12:56:51,836:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-01-09 12:58:21,617:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-01-09 12:58:35,247:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-01-09 13:00:29,704:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-01-09 13:01:24,861:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-01-09 13:02:11,651:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-01-09 13:02:22,476:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-01-09 13:02:45,748:INFO:Initializing create_model()
2024-01-09 13:02:45,749:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=catboost, fold=10, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 13:02:45,749:INFO:Checking exceptions
2024-01-09 13:02:45,860:INFO:Importing libraries
2024-01-09 13:02:45,860:INFO:Copying training dataset
2024-01-09 13:02:45,887:INFO:Defining folds
2024-01-09 13:02:45,887:INFO:Declaring metric variables
2024-01-09 13:02:45,901:INFO:Importing untrained model
2024-01-09 13:02:45,909:INFO:CatBoost Classifier Imported successfully
2024-01-09 13:02:45,925:INFO:Starting cross validation
2024-01-09 13:02:45,931:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 13:03:06,647:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:06,652:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:06,652:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:06,652:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:06,652:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:06,652:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:06,652:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:06,662:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:06,663:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:06,763:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:06,763:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:06,763:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:13,970:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:13,970:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:13,970:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:14,127:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:14,127:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:14,142:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:14,178:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:14,178:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:14,194:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:14,802:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:14,802:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:14,802:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:18,657:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:18,662:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:18,666:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:18,822:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:18,822:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:18,838:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:03:18,849:INFO:Calculating mean and std
2024-01-09 13:03:18,852:INFO:Creating metrics dataframe
2024-01-09 13:03:18,862:INFO:Finalizing model
2024-01-09 13:03:18,961:INFO:[LightGBM] [Info] Number of positive: 68, number of negative: 77
2024-01-09 13:03:18,961:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000246 seconds.
2024-01-09 13:03:18,961:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-01-09 13:03:18,961:INFO:[LightGBM] [Info] Total Bins 2741
2024-01-09 13:03:18,961:INFO:[LightGBM] [Info] Number of data points in the train set: 145, number of used features: 57
2024-01-09 13:03:18,961:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.468966 -> initscore=-0.124298
2024-01-09 13:03:18,961:INFO:[LightGBM] [Info] Start training from score -0.124298
2024-01-09 13:03:18,961:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,961:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,961:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,961:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,961:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,961:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,961:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,961:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,961:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,961:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,969:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,969:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,970:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,970:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,970:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,970:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,970:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,970:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,970:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,970:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,970:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,970:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,970:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,970:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,978:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:18,994:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:03:22,958:INFO:Uploading results into container
2024-01-09 13:03:22,960:INFO:Uploading model into container now
2024-01-09 13:03:22,979:INFO:_master_model_container: 9
2024-01-09 13:03:22,979:INFO:_display_container: 8
2024-01-09 13:03:22,979:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B9827D990>
2024-01-09 13:03:22,980:INFO:create_model() successfully completed......................................
2024-01-09 13:03:23,344:INFO:Initializing tune_model()
2024-01-09 13:03:23,344:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B9827D990>, fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2024-01-09 13:03:23,345:INFO:Checking exceptions
2024-01-09 13:03:23,429:INFO:Copying training dataset
2024-01-09 13:03:23,435:INFO:Checking base model
2024-01-09 13:03:23,435:INFO:Base model : CatBoost Classifier
2024-01-09 13:03:23,448:INFO:Declaring metric variables
2024-01-09 13:03:23,462:INFO:Defining Hyperparameters
2024-01-09 13:03:23,844:INFO:Tuning with n_jobs=-1
2024-01-09 13:03:23,844:INFO:Initializing RandomizedSearchCV
2024-01-09 13:04:12,010:INFO:best_params: {'actual_estimator__random_strength': 0.8, 'actual_estimator__n_estimators': 220, 'actual_estimator__l2_leaf_reg': 2, 'actual_estimator__eta': 0.2, 'actual_estimator__depth': 9}
2024-01-09 13:04:12,012:INFO:Hyperparameter search completed
2024-01-09 13:04:12,013:INFO:SubProcess create_model() called ==================================
2024-01-09 13:04:12,013:INFO:Initializing create_model()
2024-01-09 13:04:12,013:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B93E5F710>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B9621B7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'random_strength': 0.8, 'n_estimators': 220, 'l2_leaf_reg': 2, 'eta': 0.2, 'depth': 9})
2024-01-09 13:04:12,014:INFO:Checking exceptions
2024-01-09 13:04:12,014:INFO:Importing libraries
2024-01-09 13:04:12,014:INFO:Copying training dataset
2024-01-09 13:04:12,024:INFO:Defining folds
2024-01-09 13:04:12,025:INFO:Declaring metric variables
2024-01-09 13:04:12,033:INFO:Importing untrained model
2024-01-09 13:04:12,034:INFO:Declaring custom model
2024-01-09 13:04:12,046:INFO:CatBoost Classifier Imported successfully
2024-01-09 13:04:12,056:INFO:Starting cross validation
2024-01-09 13:04:12,059:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 13:04:20,750:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:20,760:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:20,760:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:20,760:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:20,774:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:20,774:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:20,809:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:20,825:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:20,825:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:22,093:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:22,109:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:22,109:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:28,005:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:28,009:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:28,010:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:28,053:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:28,057:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:28,066:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:28,187:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:28,187:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:28,202:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:34,449:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:34,461:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:34,461:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:34,804:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:34,804:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:34,804:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:35,080:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:35,080:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:35,080:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:35,095:INFO:Calculating mean and std
2024-01-09 13:04:35,097:INFO:Creating metrics dataframe
2024-01-09 13:04:35,104:INFO:Finalizing model
2024-01-09 13:04:35,159:INFO:[LightGBM] [Info] Number of positive: 68, number of negative: 77
2024-01-09 13:04:35,168:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000156 seconds.
2024-01-09 13:04:35,168:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-01-09 13:04:35,168:INFO:[LightGBM] [Info] Total Bins 2741
2024-01-09 13:04:35,168:INFO:[LightGBM] [Info] Number of data points in the train set: 145, number of used features: 57
2024-01-09 13:04:35,168:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.468966 -> initscore=-0.124298
2024-01-09 13:04:35,168:INFO:[LightGBM] [Info] Start training from score -0.124298
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,168:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,176:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,210:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,210:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,211:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,211:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:35,211:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:38,455:INFO:Uploading results into container
2024-01-09 13:04:38,457:INFO:Uploading model into container now
2024-01-09 13:04:38,459:INFO:_master_model_container: 10
2024-01-09 13:04:38,459:INFO:_display_container: 9
2024-01-09 13:04:38,459:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B9793FC50>
2024-01-09 13:04:38,459:INFO:create_model() successfully completed......................................
2024-01-09 13:04:38,786:INFO:SubProcess create_model() end ==================================
2024-01-09 13:04:38,786:INFO:choose_better activated
2024-01-09 13:04:38,799:INFO:SubProcess create_model() called ==================================
2024-01-09 13:04:38,799:INFO:Initializing create_model()
2024-01-09 13:04:38,799:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B9827D990>, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-09 13:04:38,799:INFO:Checking exceptions
2024-01-09 13:04:38,802:INFO:Importing libraries
2024-01-09 13:04:38,802:INFO:Copying training dataset
2024-01-09 13:04:38,808:INFO:Defining folds
2024-01-09 13:04:38,808:INFO:Declaring metric variables
2024-01-09 13:04:38,808:INFO:Importing untrained model
2024-01-09 13:04:38,809:INFO:Declaring custom model
2024-01-09 13:04:38,810:INFO:CatBoost Classifier Imported successfully
2024-01-09 13:04:38,810:INFO:Starting cross validation
2024-01-09 13:04:38,819:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-09 13:04:46,304:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:46,312:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:46,312:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:46,378:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:46,378:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:46,394:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:46,394:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:46,404:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:46,405:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:46,479:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:46,479:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:46,479:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:53,753:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:53,759:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:53,759:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:53,995:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:54,011:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:54,011:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:54,011:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:54,011:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:54,011:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:54,534:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:54,534:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:54,550:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:58,402:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:58,409:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:58,414:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:58,688:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:58,692:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:58,699:WARNING:C:\Users\HP\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'R') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-09 13:04:58,710:INFO:Calculating mean and std
2024-01-09 13:04:58,711:INFO:Creating metrics dataframe
2024-01-09 13:04:58,715:INFO:Finalizing model
2024-01-09 13:04:58,788:INFO:[LightGBM] [Info] Number of positive: 68, number of negative: 77
2024-01-09 13:04:58,788:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000240 seconds.
2024-01-09 13:04:58,789:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-01-09 13:04:58,789:INFO:[LightGBM] [Info] Total Bins 2741
2024-01-09 13:04:58,790:INFO:[LightGBM] [Info] Number of data points in the train set: 145, number of used features: 57
2024-01-09 13:04:58,791:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.468966 -> initscore=-0.124298
2024-01-09 13:04:58,791:INFO:[LightGBM] [Info] Start training from score -0.124298
2024-01-09 13:04:58,791:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,792:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,792:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,792:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,793:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,794:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,794:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,795:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,796:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,796:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,797:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,798:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,798:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,799:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,799:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,800:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,800:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,800:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,802:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,803:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,804:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,804:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,805:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,807:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,808:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,809:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,809:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,810:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,810:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,811:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,811:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,812:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,812:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,813:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,814:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,815:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,815:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,821:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,821:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,822:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,822:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,822:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,823:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,824:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,824:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,825:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,826:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,827:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,828:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,828:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,828:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,829:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,829:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,830:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,831:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,832:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,832:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,833:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,833:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,833:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,835:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,835:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,836:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,836:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,836:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,839:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,839:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,840:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,841:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,841:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,842:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:04:58,843:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-01-09 13:05:02,671:INFO:Uploading results into container
2024-01-09 13:05:02,671:INFO:Uploading model into container now
2024-01-09 13:05:02,671:INFO:_master_model_container: 11
2024-01-09 13:05:02,671:INFO:_display_container: 10
2024-01-09 13:05:02,671:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B8C939710>
2024-01-09 13:05:02,671:INFO:create_model() successfully completed......................................
2024-01-09 13:05:02,972:INFO:SubProcess create_model() end ==================================
2024-01-09 13:05:02,972:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B8C939710> result for Accuracy is 0.8067
2024-01-09 13:05:02,972:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B9793FC50> result for Accuracy is 0.8267
2024-01-09 13:05:02,972:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B9793FC50> is best model
2024-01-09 13:05:02,972:INFO:choose_better completed
2024-01-09 13:05:03,010:INFO:_master_model_container: 11
2024-01-09 13:05:03,010:INFO:_display_container: 9
2024-01-09 13:05:03,010:INFO:<catboost.core.CatBoostClassifier object at 0x0000022B9793FC50>
2024-01-09 13:05:03,011:INFO:tune_model() successfully completed......................................
2024-01-09 13:05:03,345:INFO:Initializing plot_model()
2024-01-09 13:05:03,345:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B9827D990>, plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 13:05:03,345:INFO:Checking exceptions
2024-01-09 13:05:03,362:INFO:Preloading libraries
2024-01-09 13:05:03,368:INFO:Copying training dataset
2024-01-09 13:05:03,369:INFO:Plot type: confusion_matrix
2024-01-09 13:05:03,540:INFO:Fitting Model
2024-01-09 13:05:03,542:INFO:Scoring test/hold-out set
2024-01-09 13:05:03,712:INFO:Visual Rendered Successfully
2024-01-09 13:05:04,037:INFO:plot_model() successfully completed......................................
2024-01-09 13:05:04,051:INFO:Initializing plot_model()
2024-01-09 13:05:04,051:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B9827D990>, plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 13:05:04,051:INFO:Checking exceptions
2024-01-09 13:05:04,063:INFO:Preloading libraries
2024-01-09 13:05:04,069:INFO:Copying training dataset
2024-01-09 13:05:04,069:INFO:Plot type: auc
2024-01-09 13:05:04,154:INFO:Fitting Model
2024-01-09 13:05:04,170:INFO:Scoring test/hold-out set
2024-01-09 13:05:04,403:INFO:Visual Rendered Successfully
2024-01-09 13:05:04,715:INFO:plot_model() successfully completed......................................
2024-01-09 13:05:04,739:INFO:Initializing plot_model()
2024-01-09 13:05:04,740:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B9827D990>, plot=learning, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 13:05:04,740:INFO:Checking exceptions
2024-01-09 13:05:04,752:INFO:Preloading libraries
2024-01-09 13:05:04,754:INFO:Copying training dataset
2024-01-09 13:05:04,755:INFO:Plot type: learning
2024-01-09 13:05:04,851:INFO:Fitting Model
2024-01-09 13:06:14,322:INFO:Initializing plot_model()
2024-01-09 13:06:14,322:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B9827D990>, plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 13:06:14,323:INFO:Checking exceptions
2024-01-09 13:06:14,332:INFO:Preloading libraries
2024-01-09 13:06:14,335:INFO:Copying training dataset
2024-01-09 13:06:14,336:INFO:Plot type: auc
2024-01-09 13:06:14,454:INFO:Fitting Model
2024-01-09 13:06:14,454:INFO:Scoring test/hold-out set
2024-01-09 13:06:14,718:INFO:Visual Rendered Successfully
2024-01-09 13:06:15,046:INFO:plot_model() successfully completed......................................
2024-01-09 13:06:18,407:INFO:Initializing plot_model()
2024-01-09 13:06:18,410:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B9827D990>, plot=confusion_matrix, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 13:06:18,411:INFO:Checking exceptions
2024-01-09 13:06:18,429:INFO:Preloading libraries
2024-01-09 13:06:18,438:INFO:Copying training dataset
2024-01-09 13:06:18,438:INFO:Plot type: confusion_matrix
2024-01-09 13:06:18,571:INFO:Fitting Model
2024-01-09 13:06:18,571:INFO:Scoring test/hold-out set
2024-01-09 13:06:18,760:INFO:Visual Rendered Successfully
2024-01-09 13:06:19,128:INFO:plot_model() successfully completed......................................
2024-01-09 13:06:25,737:INFO:Initializing plot_model()
2024-01-09 13:06:25,737:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B9827D990>, plot=learning, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 13:06:25,737:INFO:Checking exceptions
2024-01-09 13:06:25,760:INFO:Preloading libraries
2024-01-09 13:06:25,765:INFO:Copying training dataset
2024-01-09 13:06:25,765:INFO:Plot type: learning
2024-01-09 13:06:25,923:INFO:Fitting Model
2024-01-09 13:10:04,285:INFO:Initializing plot_model()
2024-01-09 13:10:04,285:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B9827D990>, plot=feature_improtance, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 13:10:04,285:INFO:Checking exceptions
2024-01-09 13:12:37,705:INFO:Initializing plot_model()
2024-01-09 13:12:37,705:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=[ 4.5697333   8.45428574 10.60492996 10.57628251  8.91298196  8.41041321
  8.15626854  9.52866423  9.58418529  6.29488706  7.65517377  7.25219443], plot=auc, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 13:12:37,705:INFO:Checking exceptions
2024-01-09 13:13:11,669:INFO:Initializing plot_model()
2024-01-09 13:13:11,670:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B89744090>, estimator=<catboost.core.CatBoostClassifier object at 0x0000022B9827D990>, plot=feature, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-01-09 13:13:11,670:INFO:Checking exceptions
2024-01-09 13:13:11,686:INFO:Preloading libraries
2024-01-09 13:13:11,689:INFO:Copying training dataset
2024-01-09 13:13:11,691:INFO:Plot type: feature
2024-01-09 13:13:11,692:WARNING:No coef_ found. Trying feature_importances_
2024-01-09 13:13:11,894:INFO:Visual Rendered Successfully
2024-01-09 13:13:12,255:INFO:plot_model() successfully completed......................................
